<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shawn&#39;s Blog | Beyond Compare</title>
  <icon>https://www.gravatar.com/avatar/0c298e441686bc0d3316a768923ac91c</icon>
  <subtitle>Learning programming, i enjoy it.</subtitle>
  <link href="https://goghtsui.github.io/atom.xml" rel="self"/>
  
  <link href="https://goghtsui.github.io/"/>
  <updated>2021-01-26T02:34:57.576Z</updated>
  <id>https://goghtsui.github.io/</id>
  
  <author>
    <name>xiaofeng</name>
    <email>xiaofeng355@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java同步之synchronized关键字</title>
    <link href="https://goghtsui.github.io/2021/01/26/Java%E5%90%8C%E6%AD%A5%E4%B9%8Bsynchronized%E5%85%B3%E9%94%AE%E5%AD%97/undefined/"/>
    <id>https://goghtsui.github.io/2021/01/26/Java%E5%90%8C%E6%AD%A5%E4%B9%8Bsynchronized%E5%85%B3%E9%94%AE%E5%AD%97/undefined/</id>
    <published>2021-01-26T02:34:57.576Z</published>
    <updated>2021-01-26T02:34:57.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>synchronized主要有四种用法：</p><ul><li>第一是在方法声明时使用</li></ul><blockquote><p>放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 <em>成员锁</em>,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：</p></blockquote><pre><code class="java">public synchronized void method() &#123;    // do something&#125;</code></pre><a id="more"></a><ul><li>第二是针对某一代码块使用</li></ul><blockquote><p>synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块，此时，线程获得的是 <em>成员锁</em></p></blockquote><pre><code class="java">public int method(int arg1)&#123;    synchronized(arg1) &#123;        //一次只能有一个线程进入    &#125;&#125;</code></pre><ul><li>第三是对某一对象使用</li></ul><blockquote><p>synchronized后面括号里是对象,此时,线程获得的是 <em>对象锁</em></p></blockquote><pre><code class="java">public void method(String arg)&#123;       synchronized (this)&#123;        //取得该类实例化后对象的锁       &#125;   &#125; </code></pre><p>等同于</p><pre><code class="java">public synchronized void method(String arg)&#123;     //取得Demo实例化后对象的锁   &#125; </code></pre><ul><li>第四是对某一类使用。</li></ul><blockquote><p>synchronized后面括号里是类,此时,线程获得的是 <em>对象锁</em></p></blockquote><pre><code class="java">public static void method(String arg)&#123;       synchronized (Demo.class) &#123;         //取得Demo.class类的锁  &#125;</code></pre><p>等同于：</p><pre><code class="java">public synchronized static void method(String arg)&#123;    //取得Demo.class类的锁   &#125; </code></pre><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>实现同步机制注意以下几点</p><ul><li>多线程：安全性高，性能低</li><li>单线程：性能高，安全性低</li></ul><p>所以：</p><ul><li>不要对线程安全类的所有方法都进行同步操作，只对那些持有共享资源的方法进行同步</li><li>如果该类有两种运行环境，单线程环境和多线程环境。则应该为该类提供两种版本：线程安全版本和线程不安全版本(没有同步方法和同步块)。在单线程中环境中，使用线程不安全版本以保证性能，在多线程中使用线程安全版本.</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p></li><li><p>当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块</p></li><li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞</p></li><li><p>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</p></li></ul><p><code>注：synchronized关键字可以修饰方法，也可以修饰代码块，但不能修饰构造器，属性等</code></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;synchronized主要有四种用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一是在方法声明时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 &lt;em&gt;成员锁&lt;/em&gt;,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public synchronized void method() &amp;#123;
    // do something
&amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="synchronized" scheme="https://goghtsui.github.io/tags/synchronized/"/>
    
  </entry>
  
  <entry>
    <title>Android 适配之dimens adapter</title>
    <link href="https://goghtsui.github.io/2018/02/06/Android-%E9%80%82%E9%85%8D%E4%B9%8Bdimens-adapter/undefined/"/>
    <id>https://goghtsui.github.io/2018/02/06/Android-%E9%80%82%E9%85%8D%E4%B9%8Bdimens-adapter/undefined/</id>
    <published>2018-02-06T05:46:45.000Z</published>
    <updated>2021-01-26T02:34:57.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>大渣好，马上要过春节了，举国同庆的日子，在这里先祝大家：新年快乐，合家欢里，工作顺利，每天都旺、旺、旺！接下来，进入正题，今天我们的主题是适配，我们都知道 Android 屏幕碎片化特别严重，所以我们不止要开发一款好的应用，而且要在各种手机上都保持一样的效果，至少主流机型没问题，这是我们最头疼的问题，总之适配的工作是不可避免的，适配的方式包括很多内容，关于这一块的内容，我们简单聊一下！</p><h2 id="适配常识"><a href="#适配常识" class="headerlink" title="适配常识"></a>适配常识</h2><p>对于度量单位，有很多形式，android 中提到的类型有：<strong>dp</strong> 、<strong>ps</strong>、<strong>px</strong>、<strong>inch</strong>、<strong>pt</strong>、<strong>mm</strong>，也就是你可以使用这几种形式的单位，在不同的分辨率下，显示的效果是截然不同的，所以在 Android 中提倡以 <strong>dp</strong> （与像素无关）来作为统一单位，在实际使用中1dp大约等于<strong>1/160 in</strong>，而文字统一使用 <strong>sp</strong> 作为单位，以达到显示的一致性。关于单位的换算，可以看 Android 源码或者百科一下</p><p>所以，适配是一个很复杂的工作，简单罗列一下适配的几种形式：</p><ul><li>基础适配<ul><li>使用 <strong>dp</strong> 而非其他单位</li><li>使用 <strong>wrap_content</strong>, <strong>match_parent</strong> 与 <strong>weight</strong> 权重，尽量不写固定尺寸</li><li>使用相对布局</li><li>配合使用 .9 图片</li><li>使用矢量图</li></ul></li></ul><ul><li>资源适配<ul><li>多套 drawable 资源</li><li>多套 layout 资源</li><li>多套 values 资源</li></ul></li><li>百分比布局</li></ul><a id="more"></a><h2 id="关于软件"><a href="#关于软件" class="headerlink" title="关于软件"></a>关于软件</h2><p>以上就是关于适配的一些方式，这里就不再一一详细说明了，接下来重点说一说 values 中 dimens.xml 适配的问题，这就是我来做这个软件的关键所在。</p><p>我们在适配 values 时会创建如：<strong>values-720×1280</strong>、<strong>values-sw720dp</strong>、<strong>values-w720dp</strong> 等针对不同分辨率下的尺寸适配方案，我们都知道 dimens.xml 中保存了各种尺寸值，所以，当存在多套 values 适配时，需要将默认的 dimens.xml 尺寸值转换为对应分辨率下的尺寸，无论是 dp 、ps 、px  等，都需要根据不同的比例转换，当 dimens.xml 文件中尺寸越来越多，单位不同时，如果一个个的计算很麻烦，这是发生在我身边的事，维护的以前的项目，现在要重新作适配，很多分辨率下的适配，就 dimens 这一块的适配就好几天（可能有同学会说，写程序的时候就写好，但是试问谁是这么做的，一开始没有人设定适配的方案，而且在第一套方案没有完成之前，谈适配不是太早了吗，每一次的调整都要改好几套，累死不讨好），呵呵…… 而且最后还找了一些软件，但是很不好用，还要把所有的单位统一之后才可以使用，很鸡肋，所以我决定自己写一个统一的方案，可以一键转换的那种，最终，今天的主角，就是来做这件事的，我暂且叫作：<strong>Dimens Adapter</strong>。</p><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><p>本着方便的原因，我将这个功能提供了两种形式的使用方式，PC端（Windows） 和 Web端，同样的使用效果。</p><p>**Web版的入口：<a href="http://devtools.net.cn/dimens/">http://devtools.net.cn/dimens/</a> **</p><p>**Web版的入口：<a href="http://devtools.net.cn/dimens/">http://devtools.net.cn/dimens/</a> **</p><p>**Web版的入口：<a href="http://devtools.net.cn/dimens/">http://devtools.net.cn/dimens/</a> **</p><p>这款软件，我使用了强大的 <strong>Python</strong> 语言，至于为什么，自行了解，就边学习边使用，之前已经看过很多遍了，其实还是很好上手的，哈…… ，Web 版本使用的是：<strong>阿里ECS云服务器</strong> + <strong>Django</strong> + <strong>uwsgi</strong>，在部署的过程中，遇到了很棘手的问题，问题并不多，但是搜不到相关的答案，不过最终还是很幸运的说，换个思路，部署成功了，效果很不错的说</p><ul><li>效果如下：</li></ul><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//dimens/dimens_web.png" alt="dimens_web"></p><ul><li>使用<ol><li>填写目标分辨率 density</li><li>填写目标分辨率 sacle density</li><li>填写目标分辨率 xdpi</li><li>将默认的 dimens.xml 文件的内容复制到这里</li><li>这里是转换后的文件内容，没有提供文件下载，自行复制</li><li>当1、2、3、4 填写好之后，点击转换，最终展示在 5 里面</li></ol></li></ul><h3 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h3><p>核心代码变化不大，面对的输出环境不一样，区别于读写操作，本身的 python 文件可以通过追加参数本地运行，也可以作为正常模块使用，最后在UI 方面，使用 <strong>Qt</strong>，最后打包，一款图形化的软件就诞生了，只需要一个 exe 文件，不需要安装，绿色环保，所见即所得。但是话说遇到了很多的坑，主要在于打包工具的兼容性问题，开发环境安装卸载了很多遍，各种姿势都试过了，但是软件开发或者对程序员来说，就是这样一个不断调试完善的过程，不断填坑的过程。虽然UI丑了点，但是核心功能具备，这就说明了软件迭代的重要性了，哈……</p><p><strong>下载地址：<a href="https://pan.baidu.com/s/1qYYtRhM">密码un9w</a></strong></p><p><strong>下载地址：<a href="https://pan.baidu.com/s/1qYYtRhM">密码un9w</a></strong></p><p><strong>下载地址：<a href="https://pan.baidu.com/s/1qYYtRhM">密码un9w</a></strong></p><ul><li>效果如下</li></ul><p>​    其实软件的使用很简单，都是一键式的傻瓜操作：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//dimens/dimens_inout.png" alt="dimens_soft"></p><ul><li>功能讲解：</li></ul><ol><li>填写目标分辨率 density</li><li>填写目标分辨率 sacle density</li><li>填写目标分辨率 xdpi</li><li>填写默认的 dimens.xml 文件地址</li><li>日志输出区域，成功后会显示目标文件的地址</li><li>如果不手动填写 dimens.xml 文件地址，可以浏览选择文件</li><li>都填写完毕之后，点击该按钮执行转换</li></ol><p>菜单讲解：</p><ol><li>主要的说明就是 <strong>选项（options）</strong> 功能，默认提供了几种比例方案，只要选择对应的方案，就可以填写到指定内容，并选择默认的 dimens.xml 转换即可</li><li>可以转换语言（英语、中文）</li><li>简单的使用说明、作者信息</li></ol><h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h2><p>关于密度、分辨率的比例参考如下：</p><table><thead><tr><th>屏幕密度</th><th>范围(dpi)</th><th>标准分辨率</th><th>dp与px</th><th>图标尺寸</th></tr></thead><tbody><tr><td><strong>ldpi</strong>(QVGA)</td><td>~ <strong>120</strong></td><td>240 * 320</td><td>1dp=0.75px</td><td>36 * 36</td></tr><tr><td><strong>mdpi</strong>(HVGA)</td><td>120 ~ <strong>160</strong></td><td>320 * 480</td><td>1dp=1px</td><td>48 * 48</td></tr><tr><td><strong>hdpi</strong>(WVGA)</td><td>160 ~ <strong>240</strong></td><td>480 * 800</td><td>1dp=1.5px</td><td>72 * 72</td></tr><tr><td><strong>xhdpi</strong>(720P)</td><td>240 ~ <strong>320</strong></td><td>720 * 1280</td><td>1dp=2px</td><td>96 * 96</td></tr><tr><td><strong>xxhdpi(1080p)</strong></td><td>320 ~ <strong>480</strong></td><td>1080 * 1920</td><td>1dp=3px</td><td>144 * 144</td></tr><tr><td><strong>xxxhdpi</strong>(2K)</td><td>480 ~ <strong>640</strong></td><td>1440 × 2560</td><td>1dp=4px</td><td>192 * 192</td></tr></tbody></table><p>提示：<strong>图标大小 = px数 * 4 * 12</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管是Web还是pc，从专业的角度讲，有点简陋和丑陋，纯属个人爱好和需要，没什么比较的，愿意使用就放心使用，不想用绕道即可，不接受喷子，没有产品经理、项目经理，还不能任性一回？如果有遇到任何问题，可以随时联系：<strong><a href="mailto:&#x78;&#105;&#97;&#111;&#x66;&#101;&#110;&#x67;&#x33;&#53;&#x35;&#64;&#x73;&#105;&#110;&#97;&#46;&#99;&#111;&#109;">&#x78;&#105;&#97;&#111;&#x66;&#101;&#110;&#x67;&#x33;&#53;&#x35;&#64;&#x73;&#105;&#110;&#97;&#46;&#99;&#111;&#109;</a></strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;大渣好，马上要过春节了，举国同庆的日子，在这里先祝大家：新年快乐，合家欢里，工作顺利，每天都旺、旺、旺！接下来，进入正题，今天我们的主题是适配，我们都知道 Android 屏幕碎片化特别严重，所以我们不止要开发一款好的应用，而且要在各种手机上都保持一样的效果，至少主流机型没问题，这是我们最头疼的问题，总之适配的工作是不可避免的，适配的方式包括很多内容，关于这一块的内容，我们简单聊一下！&lt;/p&gt;
&lt;h2 id=&quot;适配常识&quot;&gt;&lt;a href=&quot;#适配常识&quot; class=&quot;headerlink&quot; title=&quot;适配常识&quot;&gt;&lt;/a&gt;适配常识&lt;/h2&gt;&lt;p&gt;对于度量单位，有很多形式，android 中提到的类型有：&lt;strong&gt;dp&lt;/strong&gt; 、&lt;strong&gt;ps&lt;/strong&gt;、&lt;strong&gt;px&lt;/strong&gt;、&lt;strong&gt;inch&lt;/strong&gt;、&lt;strong&gt;pt&lt;/strong&gt;、&lt;strong&gt;mm&lt;/strong&gt;，也就是你可以使用这几种形式的单位，在不同的分辨率下，显示的效果是截然不同的，所以在 Android 中提倡以 &lt;strong&gt;dp&lt;/strong&gt; （与像素无关）来作为统一单位，在实际使用中1dp大约等于&lt;strong&gt;1/160 in&lt;/strong&gt;，而文字统一使用 &lt;strong&gt;sp&lt;/strong&gt; 作为单位，以达到显示的一致性。关于单位的换算，可以看 Android 源码或者百科一下&lt;/p&gt;
&lt;p&gt;所以，适配是一个很复杂的工作，简单罗列一下适配的几种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础适配&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;dp&lt;/strong&gt; 而非其他单位&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;wrap_content&lt;/strong&gt;, &lt;strong&gt;match_parent&lt;/strong&gt; 与 &lt;strong&gt;weight&lt;/strong&gt; 权重，尽量不写固定尺寸&lt;/li&gt;
&lt;li&gt;使用相对布局&lt;/li&gt;
&lt;li&gt;配合使用 .9 图片&lt;/li&gt;
&lt;li&gt;使用矢量图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;资源适配&lt;ul&gt;
&lt;li&gt;多套 drawable 资源&lt;/li&gt;
&lt;li&gt;多套 layout 资源&lt;/li&gt;
&lt;li&gt;多套 values 资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;百分比布局&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="适配" scheme="https://goghtsui.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
    <category term="dimens" scheme="https://goghtsui.github.io/tags/dimens/"/>
    
    <category term="dimens adapter" scheme="https://goghtsui.github.io/tags/dimens-adapter/"/>
    
    <category term="devtools.net.cn" scheme="https://goghtsui.github.io/tags/devtools-net-cn/"/>
    
  </entry>
  
  <entry>
    <title>Android Emulator 更新了 伤害爆炸</title>
    <link href="https://goghtsui.github.io/2017/12/28/Android-Emulator-%E6%9B%B4%E6%96%B0%E4%BA%86-%E4%BC%A4%E5%AE%B3%E7%88%86%E7%82%B8/undefined/"/>
    <id>https://goghtsui.github.io/2017/12/28/Android-Emulator-%E6%9B%B4%E6%96%B0%E4%BA%86-%E4%BC%A4%E5%AE%B3%E7%88%86%E7%82%B8/undefined/</id>
    <published>2017-12-28T07:44:59.000Z</published>
    <updated>2021-01-26T02:34:57.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>最近Google新版的模拟器，性能真是杠杠的，秒开，而且比Genymotion还要快，你敢信？所以，你可以告别额外的软件安装，告别使用真机调试造成的一万点暴击伤害。并且添加了很多功能的支持，还是很强大的，兄dei 你还不赶紧试试？ 下面是官方的内容。</p><blockquote><p><a href="https://android-developers.googleblog.com/2017/12/quick-boot-top-features-in-android.html">原文地址（需要翻墙）</a> </p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>发布者：Android 产品经理 <a href="https://www.google.com/+JamalEason">Jamal Eason</a></p><p><a href="http://7xod2d.com1.z0.glb.clouddn.com//emulator/emulator_logo.png"><img src="http://bp.googleblog.cn/-KKfHGyztPBY/WjfzJPsk1gI/AAAAAAAAE6E/zuXucIqvQ04lmZUo602BTdXSAu61vkKoACLcBGAs/s1600/image3.png" alt="img"></a></p><p>今天，我们高兴地宣布为 Android Emulator 推出 Quick Boot 功能。利用 Quick Boot，您可以在 6 秒内启动 Android Emulator。Quick Boot 会为模拟器会话拍摄快照，因此您可以在数秒内重新加载。Quick Boot 最初随 Android Studio 3.0 在 Canary 更新版本渠道中发布，今天，我们非常高兴地以稳定更新版本形式发布此功能。</p><p>除了这个新功能，我们还希望重点介绍一下近期版本中的一些热门功能。自从<a href="https://android-developers.googleblog.com/2015/12/android-studio-20-preview-android.html">两年前</a>对 Android Emulator 进行彻底改造以来，我们继续侧重于提升速度、稳定性，以及添加众多功能，加快您的应用开发和测试的速度。鉴于所有近期变更，对您来说，今天绝对值得更新到最新版本的 Android Emulator 并开始使用这些功能。</p><h2 id="5-大功能"><a href="#5-大功能" class="headerlink" title="5 大功能"></a>5 大功能</h2><ul><li><p><strong>Quick Boot</strong> </p><p>今天以稳定功能形式发布，Quick Boot 让您可以在 6 秒内恢复 Android Emulator 会话。在您首次启动带 Android Emulator 的 Android Virtual Device (AVD) 时，它必须执行冷启动（就像接通设备电源），但是，后续启动的速度会非常快，系统将恢复到您上次关闭模拟器时的状态（类似于唤醒设备）。为此，我们完全重新设计了旧版模拟器快照架构，以便与虚拟传感器和 GPU 加速搭配使用。无需其他步骤，因为从 Android Emulator v27.0.2 起，Quick Boot 默认处于启用状态。</p><p>如图：<em>Android Emulator 中的 Quick Boot</em></p></li></ul><p><a href="http://7xod2d.com1.z0.glb.clouddn.com//emulator/Quick_Boot_in_the_Android_Emulator.gif"><img src="http://bp.googleblog.cn/-TKy0vJfZ5vA/WjfzdkppCEI/AAAAAAAAE6I/Zkv4O_k_Z9wq0cdZJ4cv6m0XTYCjmVHtQCLcBGAs/s1600/image2.gif" alt="img"></a></p><p>​ </p><a id="more"></a>                                  <ul><li><p><strong>Android CTS 兼容性</strong>  </p><p>在每一个版本的 Android SDK 中，我们都会确保 Android Emulator 可以立即解决您的应用开发需求，从测试与 Android KitKat 的向后兼容性到集成开发者预览版的最新 API，不一而足。为了提高模拟器系统映像的产品质量和可靠性，现在，我们针对 <a href="https://source.android.com/compatibility/">Android 兼容性测试套件</a> (CTS) 将最终 Android 系统映像版本号限定为 Android Nougat (API 24) 及更高版本 - 官方的 Android 实体设备必须通过相同的测试套件。</p></li></ul><ul><li><p><strong>Google Play 支持</strong></p><p>我们知道许多应用开发者都使用 Google Play 服务，在 Android Emulator 系统映像中确保服务处于最新状态可能非常困难。为了解决这个问题，我们现在提供多种版本并且包含 Play 商店应用的 Android 系统映像。Google Play 映像支持 Android Nougat (API 24) 及更高版本。利用这些新的模拟器映像，您可以在模拟器中通过 Play 商店应用更新 Google Play 服务，就像您在实体的 Android 设备上操作一样。此外，您现在还可以通过 Google Play 商店测试端到端安装、更新和购买流程。</p></li></ul><ul><li><p>**性能改进 **</p><p>让模拟器快速和高效是我们团队的一个持续目标。我们会持续关注在您的开发机器上运行模拟器的性能影响，尤其是 RAM 使用情况。在最近几个版本的 Android Emulator 中，我们现在可以按需分配 RAM，而不是分配内存并将其固定为在您的 AVD 中定义的最大 RAM 大小。为此，我们将本机管理程序用于 Linux (KVM) 和 macOS® (Hypervisor.Framework)，将增强的 Intel® HAXM（v6.2.1 及更高版本）用于 Microsoft® Windows®，后者使用全新的按需内存分配机制。</p></li><li><p>​</p></li><li><p>此外，在过去几个版本中，我们还提升了 CPU 和 I/O 性能，同时增强了 GPU 性能，包括 OpenGL ES 3.0 支持。下面通过 ADB 推送等常见任务突出显示了 Android CPU 和 I/O 管道的改进（图例：<em>Android Emulator 的 ADB 推送速度比较</em>）：</p></li><li><p><a href="http://7xod2d.com1.z0.glb.clouddn.com//emulator/ADB_Push_Speed_Comparison_with_Android_Emulator.png"><img src="http://bp.googleblog.cn/-vR9KU5AIfRI/WjfzpyInlmI/AAAAAAAAE6Q/7fiLLaGkIrYPVM1ylpSqPk5QszzEnKfswCLcBGAs/s1600/image5.png" alt="img"></a></p></li><li><p>对于 GPU 性能，我们创建了一个示例<a href="https://github.com/google/gpu-emulation-stress-test">GPU 仿真压力测试应用</a>来衡量一段时间的性能改进。我们发现，最新的模拟器可以比之前渲染更高的帧速率，而且它是少数几个可以按照 Android 规范准确渲染 OpenGL ES 3.0 的模拟器之一。</p></li><li><p>如图：<em>GPU 仿真压力测试 - Android 应用</em></p></li></ul><p><a href="http://7xod2d.com1.z0.glb.clouddn.com//emulator/GPU_Emulation_Stress_Test.gif"><img src="http://bp.googleblog.cn/-bgYW6_GU8bY/Wjfz4zv_OAI/AAAAAAAAE6U/ECTtrleCUSs-dksSBIJ5T62-ymx9TmDbQCLcBGAs/s1600/image1.gif" alt="img"></a></p><p>如图：<em>Android Emulator 的 GPU 仿真压力测试</em></p><p><a href="http://7xod2d.com1.z0.glb.clouddn.com//emulator/gpu_emulator_stress_test_chart.png"><img src="http://bp.googleblog.cn/-gOcq-URxxTM/WjgIWLtf20I/AAAAAAAAE6o/E2nhpU_hFcQcC2qxxOQHK3QVOawhLgY6ACLcBGAs/s1600/gpu_emulator_stress_test_chart.png" alt="img"></a></p><h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><p>除了这些主要功能外，我们在过去一年还为 Android Emulator 添加了很多其他功能，大家可能没意识到：</p><ul><li><p><strong>WLAN 支持</strong> </p><p>从 API 24 系统映像开始，您可以创建一个能够同时连接到虚拟蜂窝网络和虚拟 WLAN 接入点的 AVD。</p></li><li><p><strong>Google Cast 支持</strong> </p><p>使用 Google Play 系统映像时，您可以将屏幕和音频内容投射到位于同一个 WLAN 网络上的 Chromecast 设备。</p></li><li><p><strong>拖放 APK 和文件</strong> </p><p>只需将 APK 拖放到 Android Emulator 窗口上即可触发应用安装。您也可以拖动任何其他数据文件，并在 Android Virtual Device 的 /Downloads 文件夹中找到。</p></li><li><p><strong>主机复制与粘贴</strong> </p><p>您可以在 Android Emulator 与您的开发机器之间复制和粘贴文本。</p></li><li><p><strong>虚拟双指张合与缩放</strong> </p><p>在与 Google 地图等应用交互时，按下 Ctrl 键（在 Microsoft® Windows® 或 Linux 上）或者 ⌘（在 macOS® 上），屏幕上将出现一个手指叠加层来协助进行张合与缩放操作。</p></li><li><p><strong>GPS 位置</strong></p><p>在 Android Emulator 的 Location 标签下手动选择一个 GPS 点或一组 GPS 点。</p></li><li><p><strong>虚拟传感器</strong> </p><p>扩展的控制面板中有一个专门的页面，已在 Android Emulator 中支持加速、旋转和近程等传感器。</p></li><li><p><strong>WebCam 支持</strong> </p><p>您可以将网络摄像头或笔记本电脑的内置网络摄像头用作 AVD 的虚拟摄像头。在 AVD Manager 的 Advanced Settings 页面中验证您的 AVD 摄像头设置。</p></li><li><p><strong>主机键盘</strong></p><p>您可以使用自己的实体键盘向 Android Virtual Device 输入文本。</p></li><li><p><strong>虚拟短信和通话</strong> </p><p>在扩展的控制面板中，您可以触发虚拟的短信或通话来测试具有电话依赖关系的应用。</p></li><li><p><strong>屏幕缩放</strong> </p><p>在主工具栏上，点击放大镜图标进入缩放模式，然后选择您想要检查的屏幕区域。</p></li><li><p><strong>调整窗口大小</strong></p><p>只需拖动 Android Emulator 窗口的一个角即可更改为所需大小。</p></li><li><p><strong>网络代理支持</strong> </p><p>转到 Settings 页面的 Proxy 标签，为您的 Android Emulator 会话添加一个自定义 HTTP 代理。</p></li><li><p><strong>错误报告</strong> </p><p>使用扩展的控制面板中的 Bug Report 部分，您可以为自己的应用快速生成错误报告，与您的团队分享或向 Google 发送反馈。</p></li></ul><p>在 <a href="https://developer.android.google.cn/studio/run/emulator.html">Emulator 文档</a>中详细了解 Android Emulator。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>现在，所有这些功能和改进都可以在 Android Emulator v27.0.2+ 中下载和使用，您可以在 Android Studio 中通过 SDK 管理器获取支持的 Android Emulator 版本。为了获得快速体验，我们建议创建和运行 x86 版本的模拟器系统映像，并安装最新的 Android Emulator、Intel® HAXM（如适用）和图形驱动程序。</p><p>我们感谢您提供有关您喜欢的特性、存在的问题或希望看到的功能的任何反馈意见。如果您发现错误或问题，或者想要分享功能请求，欢迎随时向我们<a href="https://developer.android.google.cn/studio/report-bugs.html#emulator-bugs">提交问题</a>。我们的工作远未完成，但我们希望大家对我们目前的改进感到兴奋。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;最近Google新版的模拟器，性能真是杠杠的，秒开，而且比Genymotion还要快，你敢信？所以，你可以告别额外的软件安装，告别使用真机调试造成的一万点暴击伤害。并且添加了很多功能的支持，还是很强大的，兄dei 你还不赶紧试试？ 下面是官方的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2017/12/quick-boot-top-features-in-android.html&quot;&gt;原文地址（需要翻墙）&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;发布者：Android 产品经理 &lt;a href=&quot;https://www.google.com/+JamalEason&quot;&gt;Jamal Eason&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://7xod2d.com1.z0.glb.clouddn.com//emulator/emulator_logo.png&quot;&gt;&lt;img src=&quot;http://bp.googleblog.cn/-KKfHGyztPBY/WjfzJPsk1gI/AAAAAAAAE6E/zuXucIqvQ04lmZUo602BTdXSAu61vkKoACLcBGAs/s1600/image3.png&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天，我们高兴地宣布为 Android Emulator 推出 Quick Boot 功能。利用 Quick Boot，您可以在 6 秒内启动 Android Emulator。Quick Boot 会为模拟器会话拍摄快照，因此您可以在数秒内重新加载。Quick Boot 最初随 Android Studio 3.0 在 Canary 更新版本渠道中发布，今天，我们非常高兴地以稳定更新版本形式发布此功能。&lt;/p&gt;
&lt;p&gt;除了这个新功能，我们还希望重点介绍一下近期版本中的一些热门功能。自从&lt;a href=&quot;https://android-developers.googleblog.com/2015/12/android-studio-20-preview-android.html&quot;&gt;两年前&lt;/a&gt;对 Android Emulator 进行彻底改造以来，我们继续侧重于提升速度、稳定性，以及添加众多功能，加快您的应用开发和测试的速度。鉴于所有近期变更，对您来说，今天绝对值得更新到最新版本的 Android Emulator 并开始使用这些功能。&lt;/p&gt;
&lt;h2 id=&quot;5-大功能&quot;&gt;&lt;a href=&quot;#5-大功能&quot; class=&quot;headerlink&quot; title=&quot;5 大功能&quot;&gt;&lt;/a&gt;5 大功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quick Boot&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;今天以稳定功能形式发布，Quick Boot 让您可以在 6 秒内恢复 Android Emulator 会话。在您首次启动带 Android Emulator 的 Android Virtual Device (AVD) 时，它必须执行冷启动（就像接通设备电源），但是，后续启动的速度会非常快，系统将恢复到您上次关闭模拟器时的状态（类似于唤醒设备）。为此，我们完全重新设计了旧版模拟器快照架构，以便与虚拟传感器和 GPU 加速搭配使用。无需其他步骤，因为从 Android Emulator v27.0.2 起，Quick Boot 默认处于启用状态。&lt;/p&gt;
&lt;p&gt;如图：&lt;em&gt;Android Emulator 中的 Quick Boot&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://7xod2d.com1.z0.glb.clouddn.com//emulator/Quick_Boot_in_the_Android_Emulator.gif&quot;&gt;&lt;img src=&quot;http://bp.googleblog.cn/-TKy0vJfZ5vA/WjfzdkppCEI/AAAAAAAAE6I/Zkv4O_k_Z9wq0cdZJ4cv6m0XTYCjmVHtQCLcBGAs/s1600/image2.gif&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​ &lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Emulator" scheme="https://goghtsui.github.io/tags/Android-Emulator/"/>
    
    <category term="Quick Boot" scheme="https://goghtsui.github.io/tags/Quick-Boot/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发规约》插件p3c使用说明</title>
    <link href="https://goghtsui.github.io/2017/10/15/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E7%BA%A6%E3%80%8B%E6%8F%92%E4%BB%B6p3c%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/undefined/"/>
    <id>https://goghtsui.github.io/2017/10/15/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E7%BA%A6%E3%80%8B%E6%8F%92%E4%BB%B6p3c%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/undefined/</id>
    <published>2017-10-15T02:35:42.000Z</published>
    <updated>2021-01-26T03:15:32.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_java_olugin.jpg" alt="img"></p><h2 id="官方发布说明"><a href="#官方发布说明" class="headerlink" title="官方发布说明"></a>官方发布说明</h2><p>经过247天的持续研发，阿里巴巴于10月14日在杭州云栖大会上，正式发布众所期待的《阿里巴巴Java开发规约》扫描插件！</p><p><strong>插件全球首发仪式，大牛云集</strong></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_plugin_second.jpg" alt="img"></p><p>阿里巴巴大牛天团倾力助阵：毕玄、玄难、索尼、叶渡，淘宝代码第一人多隆、代码规约作者孤尽携手规约项目组成员，以及业界规约生态代表等重磅大咖联合发布阿里巴巴代码规约插件！</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_plugin_third.jpg" alt="img"></p><p>平日低调的大神们，为了这次盛会都来了～</p><p>该插件由阿里巴巴P3C项目组研发。P3C是世界知名的反潜机，专门对付水下潜水艇，寓意是扫描出所有潜在的代码隐患。这个项目组是阿里巴巴开发爱好者自发组织形成的虚拟项目组，把《阿里巴巴Java开发规约》强制条目转化成自动化插件，并实现部分的自动编程。该插件在扫描代码后，将不符合规约的代码按Blocker/Critical/Major三个等级显示在下方，甚至在IDEA上，还基于Inspection机制提供了实时检测功能，编写代码的同时也能快速发现问题所在。对于历史代码，部分规则实现了批量一键修复的功能，如此爽心悦目的功能是不是很值得拥有？提升代码质量，提高团队研发效能，插件将会一路同行</p><h2 id="插件下载地址"><a href="#插件下载地址" class="headerlink" title="插件下载地址"></a>插件下载地址</h2><blockquote><p><a href="https://github.com/alibaba/p3c">https://github.com/alibaba/p3c</a> </p></blockquote><p> 或者在Github直接搜索p3c</p><a id="more"></a><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><ol><li><p>准备</p><ul><li>Eclipse Juno+</li><li>maven3.+</li><li>JDK 1.7+</li></ul></li><li><p>构建</p><pre><code class="she">mvn -U clean install</code></pre></li><li><p>安装</p><ol><li><strong>Help</strong> &gt;&gt; <strong>Install New Software</strong> 然后输入这个地址： <a href="https://p3c.alibaba.com/plugin/eclipse/update">https://p3c.alibaba.com/plugin/eclipse/update</a></li></ol><p><a href="https://github.com/alibaba/p3c/blob/master/eclipse-plugin/doc/images/install.png"><img src="https://github.com/alibaba/p3c/raw/master/eclipse-plugin/doc/images/install.png" alt="Install Plugin"></a></p><ol><li>点击next 一步一步完成安装之后，重启就可以正常使用了</li></ol></li><li><p>使用</p><ol><li><p>语言切换</p><p><a href="https://github.com/alibaba/p3c/blob/master/eclipse-plugin/doc/images/eclipse_switch_language.png"><img src="https://github.com/alibaba/p3c/raw/master/eclipse-plugin/doc/images/eclipse_switch_language.png" alt="Switch language"></a></p></li><li><p>代码解析</p></li></ol><p><a href="https://github.com/alibaba/p3c/blob/master/eclipse-plugin/doc/images/eclipse_analyze.png"><img src="https://github.com/alibaba/p3c/raw/master/eclipse-plugin/doc/images/eclipse_analyze.png" alt="Analyze"></a></p><p><a href="https://github.com/alibaba/p3c/blob/master/eclipse-plugin/doc/images/analyze_result.png"><img src="https://github.com/alibaba/p3c/raw/master/eclipse-plugin/doc/images/analyze_result.png" alt="Analyze"></a></p><p>​</p></li></ol><h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><ol><li><p>准备</p><ul><li>项目 JDK 1.7+</li><li>Gradle: 3.0+ （需要 JDK 1.8+）</li></ul></li><li><p>构建</p><pre><code class="shell">cd p3c-ideagradle clen buildPlugin</code></pre></li><li><p>使用</p><p>​</p></li><li><p>安装</p><ol><li><p><strong>Settings</strong> &gt;&gt; <strong>Plugins</strong> &gt;&gt; <strong>Browse repositories…</strong> ，然后搜索 ‘alibaba’ ，默认第一个就是，点击右侧的 <strong>Install</strong>，重启即可使用</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_install.png" alt="p3c_install"></p></li></ol></li><li><p>注意</p><p>如果安装之后出现乱码问题，可以尝试更换IDE字体为：<strong>Monospaced</strong></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_font.png" alt="p3c_font"></p></li><li><p>使用</p><ul><li><p>语言切换</p><p>在 <strong>Tools</strong> 菜单里，如图：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_tools.png" alt="p3c_switch_launguage"></p></li><li><p>设置检测项</p><p>在 <strong>Settings</strong> &gt;&gt; <strong>Inspections</strong> &gt;&gt; <strong>Ali Check</strong> 你可以开关检测的约束规范</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_inspection.png" alt="p3c_analysis"></p></li><li><p>代码分析</p><p>通过上面的图片，可以看到插件提供的代码解析快捷键是：<strong>Ctrl+Alt+Shift+J</strong> ，使用快捷键之后会出现如下图的选择界面：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_scan_tips.png" alt="p3c_analysis_guide"></p><p>可以选择整个 Project 或者选中的 module ，代码分析完成之后可以看到类似如下的结果：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_inspections_result.png" alt="p3c_inspections_result"></p></li><li><p>代码自动提示</p><p>插件还 提供了自动提示的功能，在我们编写代码的过程中，实时提示：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_codeing_tips1.png" alt="p3c-coding_tip1"></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//p3c/p3c_coding_tips2.png" alt="pc_tip2"></p></li></ul></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你还没有看过或者了解《阿里巴巴Java开发规约》你可以从这里开始：</p><p><a href="https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%E4%B9%8B%E7%BB%88%E6%9E%81%E7%89%88%E4%BF%AE%E8%AE%A2%EF%BC%81/undefined/#more">阿里巴巴Java开发手册》之终极版</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_java_olugin.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;官方发布说明&quot;&gt;&lt;a href=&quot;#官方发布说明&quot; class=&quot;headerlink&quot; title=&quot;官方发布说明&quot;&gt;&lt;/a&gt;官方发布说明&lt;/h2&gt;&lt;p&gt;经过247天的持续研发，阿里巴巴于10月14日在杭州云栖大会上，正式发布众所期待的《阿里巴巴Java开发规约》扫描插件！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插件全球首发仪式，大牛云集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_plugin_second.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;阿里巴巴大牛天团倾力助阵：毕玄、玄难、索尼、叶渡，淘宝代码第一人多隆、代码规约作者孤尽携手规约项目组成员，以及业界规约生态代表等重磅大咖联合发布阿里巴巴代码规约插件！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com//p3c/ali_plugin_third.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;平日低调的大神们，为了这次盛会都来了～&lt;/p&gt;
&lt;p&gt;该插件由阿里巴巴P3C项目组研发。P3C是世界知名的反潜机，专门对付水下潜水艇，寓意是扫描出所有潜在的代码隐患。这个项目组是阿里巴巴开发爱好者自发组织形成的虚拟项目组，把《阿里巴巴Java开发规约》强制条目转化成自动化插件，并实现部分的自动编程。该插件在扫描代码后，将不符合规约的代码按Blocker/Critical/Major三个等级显示在下方，甚至在IDEA上，还基于Inspection机制提供了实时检测功能，编写代码的同时也能快速发现问题所在。对于历史代码，部分规则实现了批量一键修复的功能，如此爽心悦目的功能是不是很值得拥有？提升代码质量，提高团队研发效能，插件将会一路同行&lt;/p&gt;
&lt;h2 id=&quot;插件下载地址&quot;&gt;&lt;a href=&quot;#插件下载地址&quot; class=&quot;headerlink&quot; title=&quot;插件下载地址&quot;&gt;&lt;/a&gt;插件下载地址&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/p3c&quot;&gt;https://github.com/alibaba/p3c&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 或者在Github直接搜索p3c&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="阿里巴巴Java开发规约" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E7%BA%A6/"/>
    
    <category term="p3c" scheme="https://goghtsui.github.io/tags/p3c/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》4-1安全规约（新增）</title>
    <link href="https://goghtsui.github.io/2017/09/25/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B4-1%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%EF%BC%88%E6%96%B0%E5%A2%9E%EF%BC%89/undefined/"/>
    <id>https://goghtsui.github.io/2017/09/25/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B4-1%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6%EF%BC%88%E6%96%B0%E5%A2%9E%EF%BC%89/undefined/</id>
    <published>2017-09-25T03:10:09.000Z</published>
    <updated>2021-01-26T02:34:57.587Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。<br>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信<br>内容、修改他人的订单。</p></li><li><p>【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。<br>说明：查看个人手机号码会显示成:158****9119，隐藏中间 4 位，防止隐私泄露。</p></li><li><p>【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，<br>禁止字符串拼接 SQL 访问数据库。</p></li><li><p>【强制】用户请求传入的任何参数必须做有效性验证。<br>说明：忽略参数校验可能导致：<br>  page size 过大导致内存溢出<br>  恶意 order by 导致数据库慢查询<br>  任意重定向<br>  SQL 注入<br>  反序列化注入<br>  正则输入源串拒绝服务 ReDoS<br>说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，<br>但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p></li></ol><a id="more"></a><ol start="5"><li><p>【强制】禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p></li><li><p>【强制】表单、 AJAX 提交必须执行 CSRF 安全过滤。<br>说明： CSRF(Cross - site request forgery) 跨站请求伪造是一类常见编程漏洞。对于存在<br>CSRF 漏洞的应用/网站，攻击者可以事先构造好 URL ，只要受害者用户一访问，后台便在用户<br>不知情情况下对数据库中用户参数进行相应修改。</p></li><li><p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，<br>如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。<br>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其<br>它用户，并造成短信平台资源浪费。</p></li><li><p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过<br>滤等风控策略。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。&lt;br&gt;说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信&lt;br&gt;内容、修改他人的订单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。&lt;br&gt;说明：查看个人手机号码会显示成:158****9119，隐藏中间 4 位，防止隐私泄露。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，&lt;br&gt;禁止字符串拼接 SQL 访问数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】用户请求传入的任何参数必须做有效性验证。&lt;br&gt;说明：忽略参数校验可能导致：&lt;br&gt;  page size 过大导致内存溢出&lt;br&gt;  恶意 order by 导致数据库慢查询&lt;br&gt;  任意重定向&lt;br&gt;  SQL 注入&lt;br&gt;  反序列化注入&lt;br&gt;  正则输入源串拒绝服务 ReDoS&lt;br&gt;说明：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，&lt;br&gt;但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="安全规约" scheme="https://goghtsui.github.io/tags/%E5%AE%89%E5%85%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》3-1单元测试（新增）</title>
    <link href="https://goghtsui.github.io/2017/09/25/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B3-1%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%88%E6%96%B0%E5%A2%9E%EF%BC%89/undefined/"/>
    <id>https://goghtsui.github.io/2017/09/25/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B3-1%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%88%E6%96%B0%E5%A2%9E%EF%BC%89/undefined/</id>
    <published>2017-09-25T03:00:25.000Z</published>
    <updated>2021-01-26T02:34:57.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ol><li><p>【强制】好的单元测试必须遵守 AIR 原则。<br>说明：单元测试在线上运行时，感觉像空气 （AIR） 一样并不存在，但在测试质量的保障上，<br>却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。<br>  A： Automatic （自动化）<br>  I： Independent （独立性）<br>  R： Repeatable （可重复）</p></li><li><p>【强制】单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行<br>过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测<br>试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</p></li><li><p>【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间<br>决不能互相调用，也不能依赖执行的先后次序。<br>反例： method2 需要依赖 method1 的执行，将执行结果做为 method2 的输入。</p></li><li><p>【强制】单元测试是可以重复执行的，不能受到外界环境的影响。<br>说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如<br>果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。<br>正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring<br>这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</p></li></ol><a id="more"></a><ol start="5"><li><p>【强制】对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级<br>别，一般是方法级别。<br>说明：只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的<br>交互逻辑，那是集成测试的领域。</p></li><li><p>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过。<br>说明：新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></li><li><p>【强制】单元测试代码必须写在如下工程目录： src/test/java ，不允许写在业务代码目录下。<br>说明：源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p></li><li><p>【推荐】单元测试的基本目标：语句覆盖率达到 70% ；核心模块的语句覆盖率和分支覆盖率都<br>要达到 100%<br>说明：在工程规约的应用分层中提到的 DAO 层， Manager 层，可重用度高的 Service ，都应该<br>进行单元测试。</p></li><li><p>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。<br>  B： Border ，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。<br>  C： Correct ，正确的输入，并得到预期的结果。<br>  D： Design ，与设计文档相结合，来编写单元测试。<br>  E： Error ，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得<br>到预期的结果。</p></li><li><p>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，<br>或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<br>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这<br>一行新增数据并不符合业务插入规则，导致测试结果异常。</p></li><li><p>【推荐】和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者<br>对单元测试产生的数据有明确的前后缀标识。<br>正例：在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_ 的前缀标识数据。</p></li><li><p>【推荐】对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而<br>书写不规范测试代码。</p></li><li><p>【推荐】在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好<br>覆盖所有测试用例（ UC ）。</p></li><li><p>【推荐】单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项<br>目提测前完成单元测试。</p></li><li><p>【参考】为了更方便地进行单元测试，业务代码应避免以下情况：<br>  构造方法中做的事情过多。<br>  存在过多的全局变量和静态方法。<br>  存在过多的外部依赖。<br>  存在过多的条件语句。<br>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</p></li><li><p>【参考】不要对单元测试存在如下误解：<br>  那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。<br>  单元测试代码是多余的。汽车的整体功能与各单元部件的测试正常与否是强相关的。<br>  单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。<br>  单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】好的单元测试必须遵守 AIR 原则。&lt;br&gt;说明：单元测试在线上运行时，感觉像空气 （AIR） 一样并不存在，但在测试质量的保障上，&lt;br&gt;却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。&lt;br&gt;  A： Automatic （自动化）&lt;br&gt;  I： Independent （独立性）&lt;br&gt;  R： Repeatable （可重复）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行&lt;br&gt;过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测&lt;br&gt;试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间&lt;br&gt;决不能互相调用，也不能依赖执行的先后次序。&lt;br&gt;反例： method2 需要依赖 method1 的执行，将执行结果做为 method2 的输入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】单元测试是可以重复执行的，不能受到外界环境的影响。&lt;br&gt;说明：单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如&lt;br&gt;果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。&lt;br&gt;正例：为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring&lt;br&gt;这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="单元测试" scheme="https://goghtsui.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android-Studio-之依赖方式详解(Compile, Provided...)</title>
    <link href="https://goghtsui.github.io/2017/08/25/Android-Studio-%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3(Compile,%20Provided...)/undefined/"/>
    <id>https://goghtsui.github.io/2017/08/25/Android-Studio-%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3(Compile,%20Provided...)/undefined/</id>
    <published>2017-08-25T01:47:22.000Z</published>
    <updated>2021-01-26T02:34:57.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>我们在项目开发中，不可避免的需要使用到第三方的一些库，或者自己定义的一些lib，所以我们就需要在 build.gradle 文件添加对这些lib的依赖，代码如下：</p><pre><code class="gr">dependencies &#123;    compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)    compile &#39;com.android.support:support-v4:25.3.0&#39;    ...    provided files(&#39;jar/framework.jar&#39;)&#125;</code></pre><p>可以看到上面使用到了两种依赖的方式：<strong>compile</strong> <strong>provided</strong> ，那么还有没有其它依赖方式？都有哪些？</p><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><p>下面我们一起看看Studio给我们提供了那些依赖方式：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com//studio/studio_six_dependencies.png" alt="studio_dependencies"></p><p>其实 Studio 已经提供了6种依赖方式：<strong>Compile</strong>、<strong>Provided</strong>、<strong>APK</strong>、<strong>Test compile</strong>、<strong>Debug compile</strong>、<strong>Release compile</strong> 。<strong>这里的名字和 dependencies 里面使用的命名是不用的</strong> ，你可以添加几个试试看。那么问题来了，它们有什么不同？继续往下看</p><a id="more"></a><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h3><p>Compile 是对所有的 build type 以及 favlors 都会<strong>参与编译并且打包</strong>到最终的 apk 文件中</p><h3 id="Provided"><a href="#Provided" class="headerlink" title="Provided"></a>Provided</h3><p>Provided 是对所有的 build type 以及 favlors <strong>只在编译时使用</strong>，类似eclipse中的external-libs,只参与编译，不打包到最终apk</p><h3 id="APK"><a href="#APK" class="headerlink" title="APK"></a>APK</h3><p><strong>只会打包到 apk</strong> 文件中，而<strong>不参与编译</strong>，所以不能再代码中直接调用 jar 中的类或方法，否则在编译时会报错</p><h3 id="Test-compile"><a href="#Test-compile" class="headerlink" title="Test compile"></a>Test compile</h3><p>Test compile 仅仅是<strong>针对单元测试代码的编译以及最终打包测试apk时有效</strong>，而对正常的 debug 或者 release apk 包不起作用</p><h3 id="Debug-compile"><a href="#Debug-compile" class="headerlink" title="Debug compile"></a>Debug compile</h3><p>Debug compile 仅仅针对 debug 模式的编译和最终的 debug apk 打包</p><h3 id="Release-compile"><a href="#Release-compile" class="headerlink" title="Release compile"></a>Release compile</h3><p>Release compile 仅仅针对 release 模式的编译和最终的 release apk 打包</p><p>我相信你看到这些应该是恍然大悟了吧，根据不同的场景使用不同的依赖方式，一定要严谨！ 试问，还有其它的依赖方式吗？好像我在哪里看到过……</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>其实除了上面提供的6中依赖方式，还有一些支持的方式：<strong>android-apt</strong>、<strong>annotationProcessor</strong> 。</p><p>Android-apt 是由一位开发者自己开发的 apt 框架，源代码托管在<a href="https://bitbucket.org/hvisser/android-apt">这里</a>，随着 android Gradle 插件 2.2 版本的发布，Android Gradle 插件提供了名为 annotationProcessor 的功能来完全代替 android-apt ，自此 android-apt 作者在官网发表声明最新的 Android Gradle 插件现在已经支持 annotationProcessor，并警告和或阻止 android-apt ，并推荐大家使用 Android 官方插件 annotationProcessor。</p><p>关于注解的使用，不是本文的重点，重点是依赖所提供的功能。</p><h3 id="android-apt-amp-annotationProcessor"><a href="#android-apt-amp-annotationProcessor" class="headerlink" title="android-apt &amp; annotationProcessor"></a>android-apt &amp; annotationProcessor</h3><p><strong>只在编译的时候执行依赖的库，但是库最终不打包到apk中</strong>。编译库中的代码没有直接使用的意义，也没有提供开放的 api调用，最终的目的是得到编译库中生成的文件，供我们调用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我曾经错误的将 compile 使用到了 provider 库，很悲剧的出现了方法数超过了65535，于是我开始改造项目，结果各种没效果，最后才了解到是依赖方式的问题，想想有多愚蠢！唉，年轻没经验啊！如果可以的话，尝试去使用每一种方式，看看有什么不同。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;我们在项目开发中，不可避免的需要使用到第三方的一些库，或者自己定义的一些lib，所以我们就需要在 build.gradle 文件添加对这些lib的依赖，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;gr&quot;&gt;dependencies &amp;#123;
    compile fileTree(include: [&amp;#39;*.jar&amp;#39;], dir: &amp;#39;libs&amp;#39;)
    compile &amp;#39;com.android.support:support-v4:25.3.0&amp;#39;
    ...
    provided files(&amp;#39;jar/framework.jar&amp;#39;)
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到上面使用到了两种依赖的方式：&lt;strong&gt;compile&lt;/strong&gt; &lt;strong&gt;provided&lt;/strong&gt; ，那么还有没有其它依赖方式？都有哪些？&lt;/p&gt;
&lt;h2 id=&quot;dependencies&quot;&gt;&lt;a href=&quot;#dependencies&quot; class=&quot;headerlink&quot; title=&quot;dependencies&quot;&gt;&lt;/a&gt;dependencies&lt;/h2&gt;&lt;p&gt;下面我们一起看看Studio给我们提供了那些依赖方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com//studio/studio_six_dependencies.png&quot; alt=&quot;studio_dependencies&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实 Studio 已经提供了6种依赖方式：&lt;strong&gt;Compile&lt;/strong&gt;、&lt;strong&gt;Provided&lt;/strong&gt;、&lt;strong&gt;APK&lt;/strong&gt;、&lt;strong&gt;Test compile&lt;/strong&gt;、&lt;strong&gt;Debug compile&lt;/strong&gt;、&lt;strong&gt;Release compile&lt;/strong&gt; 。&lt;strong&gt;这里的名字和 dependencies 里面使用的命名是不用的&lt;/strong&gt; ，你可以添加几个试试看。那么问题来了，它们有什么不同？继续往下看&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android-Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="Compile" scheme="https://goghtsui.github.io/tags/Compile/"/>
    
    <category term="Provided" scheme="https://goghtsui.github.io/tags/Provided/"/>
    
    <category term="Test compile" scheme="https://goghtsui.github.io/tags/Test-compile/"/>
    
    <category term="Debug compile" scheme="https://goghtsui.github.io/tags/Debug-compile/"/>
    
    <category term="Release compile" scheme="https://goghtsui.github.io/tags/Release-compile/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 发布 library 到 jcenter 和 maven central</title>
    <link href="https://goghtsui.github.io/2017/08/08/Android-Studio-%E5%8F%91%E5%B8%83-library-%E5%88%B0-jcenter-%E5%92%8C-maven-central/undefined/"/>
    <id>https://goghtsui.github.io/2017/08/08/Android-Studio-%E5%8F%91%E5%B8%83-library-%E5%88%B0-jcenter-%E5%92%8C-maven-central/undefined/</id>
    <published>2017-08-08T07:44:17.000Z</published>
    <updated>2021-01-26T02:34:57.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在我们日常的开发中，会遇到各种各样的需求和技术解决方案。所以产生了各位大神提供的各种功能的开源库，并且通过：compile ‘xxxxxxxx’ 就可以使用了，非常方便。可以你有没有想过自己写一个开源库？又或者你已经贡献了很多好的代码，不知道怎么共享，怎么通过 compile 的方式给别人使用？你要知道，装B也是需要技术的。</p><h2 id="jcenter-amp-maven-central"><a href="#jcenter-amp-maven-central" class="headerlink" title="jcenter &amp; maven central"></a>jcenter &amp; maven central</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果你留心的话，应该了解到我们使用了两种标准的 libraries 仓库，分别是 <strong>jcenter</strong> 和 <strong>maven central</strong> ：</p><ul><li><p><strong>jcenter</strong> </p><p>jcenter 是一个托管在 <a href="https://bintray.com/">bintray.com</a> 的资源库，你可以在 <a href="http://jcenter.bintray.com/">这里</a> 找到需要的资源为了能在项目中使用 <strong>jcenter</strong>，我们需要在 project 的 build.gradle 文件中添加对资源库的引用：</p><p>​</p><pre><code>allprojects &#123;    repositories &#123;        jcenter()    &#125;&#125;</code></pre><p>​</p></li><li><p><strong>maven central</strong> </p><p>Maven Central 是一个托管在 <a href="https://sonatype.org/">sonatype.org</a> 的资源库，你可以在 <a href="https://oss.sonatype.org/content/repositories/releases/">这里</a> 找到需要的资源如果在项目中使用 Maven Central，我们需要在 project 的 build.gradle 文件中定义自己的资源库：</p><p>​</p><pre><code>allprojects &#123;    repositories &#123;        mavenCentral()    &#125;&#125;</code></pre></li></ul><p>请注意，虽然 jcenter 和 Maven Central 都是标准Android library 资源仓库，但他们的托管地址完全不同，它们的内容是由不同提供者提供的，而且之间并没有任何关联。所以也就可能，在 jcenter 中能够找到的 library ，在 Maven Central 中并不能找到，反之亦然。</p><a id="more"></a><p>除了这两个标准的资源库外，我们也可以定义特殊的资源库，引入一些开发者自己托管维护的 library，然后像下面这样添加对该库的引用：</p><pre><code>repositories &#123;    maven &#123; url &#39;http://xxxx.xxxx&#39; &#125;&#125;</code></pre><p>最后通过 compile 依赖：</p><pre><code>dependencies &#123;     // 替换对应的配置值     compile &#39;groupId:artifactId:version@aar&#39;&#125;</code></pre><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>那么为什么有两个标准资源库而不是一个？而且它们都拥有相同的功能：托管 java / Android library ，完全由开发者决定把 library 上传到它们中的一个或两个上。最开始的时候，Android Studio 使用 Maven Central 作为默认资源库，一旦你从老版本的 Android Studio 创建了一个新的项目，mavenCentral() 会自动添加到 build.gradle 中</p><p>但是 Maven Central 存在一个较大的问题，即对开发者并不友好。上传 library 比较困难。为了能够做到上传，开发者从某种程度上讲得具备极客的能力。再考虑到其他一些原因，比如安全问题，Android Studio 团队决定把默认资源库改为jcenter，所以新版 Android Studio 创建新项目的时候，默认使用 jcenter() 而不是 mavenCentral()这里列举了一些他们决定从 Maven Central 切换 jcenter 的主要原因：</p><ul><li><strong>jcenter 通过 CDN 传输 library ，这意味着开发者能够享受更快的加载速度</strong></li><li><strong>jcenter 是世界上最大的 java 库，所以能在 Maven Central 里面找到的，基本在 jcenter 里面也能找到</strong></li><li><strong>非常容易上传 library 到 jcenter 仓库，没有必要签名或做其他一些在 Maven Central 上很复杂的操作</strong></li><li><strong>界面友好</strong></li></ul><p>所以，我推荐使用 jcenter 仓库来上传自己的库，而且可以同步到 maven central 。</p><h2 id="上传-library-到-jcenter"><a href="#上传-library-到-jcenter" class="headerlink" title="上传 library 到 jcenter"></a>上传 library 到 jcenter</h2><p>我们对 jcenter 和 maven central 已经了解了，那么就让我们开始最重要环节：上传</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_rule.jpg" alt="img"></p><p>其实，这个过程非常简单，一旦你配置成功之后，只需要修改一些值，就可以到处使用了，接下来分步骤给大家讲解一下：</p><ol><li><p>第一步：注册帐号</p><p><a href="https://bintray.com/">Bintray 官网</a> 首页默认注册是<strong>组织</strong> ，</p><p>个人注册地址是：<a href="https://bintray.com/signup/oss">https://bintray.com/signup/oss</a></p><p>个人注册地址是：<a href="https://bintray.com/signup/oss">https://bintray.com/signup/oss</a></p><p>个人注册地址是：<a href="https://bintray.com/signup/oss">https://bintray.com/signup/oss</a></p><p>重要的事情说三遍</p><p>注意：不能使用国内的邮箱注册，可以使用 google 帐号，推荐使用 github 帐号注册</p></li><li><p>获取 api key</p><p>登陆之后，点击 <strong>右上角你的头像 -&gt; Edit Profile -&gt; API Key</strong></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_copy_apikey.png" alt="img"></p><p><strong>API Key</strong> 后面会用到，先复制出来，备用</p></li><li><p>创建个人 Maven 仓库</p><ol><li><p>回到个人主页，点击 <strong>Add New Repository</strong></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_add.png" alt="img"></p><p>设置库名称、类型、Licenses、描述信息： <strong>库的名称后面会用到</strong></p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenterjcenter_add_detail.png" alt="img"></p></li></ol></li><li><p>环境配置</p><ol><li>创建 module 或者 打开你创建好的module，在 Project 的 build.gradle 中添加 Maven 和 Jfrog Bintray 的依赖：</li></ol><p>​</p><pre><code>buildscript &#123;    repositories &#123;        jcenter()    &#125;    dependencies &#123;        classpath &#39;com.android.tools.build:gradle:2.3.0&#39;        // NOTE: Do not place your application dependencies here; they belong        // in the individual module build.gradle files        // 添加下面两行        classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.5&#39;        classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3&#39;    &#125;&#125;allprojects &#123;    repositories &#123;        jcenter()    &#125;&#125;task clean(type: Delete) &#123;    delete rootProject.buildDir&#125;</code></pre><p>关于版本号，可以去这里查看 <a href="https://github.com/dcendents/android-maven-gradle-plugin">Maven</a> 和 <a href="https://github.com/bintray/gradle-bintray-plugin">Jfrog Bintray</a> 的最新版本</p><p>​</p><ol><li><p>在 module 的 builde.gradle 开头添加以下配置：</p><pre><code>//添加这两行apply plugin: &#39;com.github.dcendents.android-maven&#39;apply plugin: &#39;com.jfrog.bintray&#39;</code></pre><p>在 module 的  builde.gradle 末尾添加以下配置：</p><p>​</p><pre><code>// 项目主页，需要修改def siteUrl = &#39;https://bintray.com/goghtsui/RxOkRetrofit&#39;// 项目的git地址（必须是git地址，可以不存在），需要修改def gitUrl = &#39;git@github.com:goghtsui/TvRecyclerView.git&#39;// 上传到 Bintray 的库名称（刚才创建的名称），需要修改def libName = &quot;RxOkRetrofit&quot;// 这两个参数配置是为了最终生成 compile &#39;com.xxx:xxxx:1.0.0&#39;  group  version 是关键字，自动识别的，需要修改group = &quot;com.gogh&quot;;version = &quot;1.0.01&quot;install &#123;    repositories.mavenInstaller &#123;        // 生成pom.xml和参数        pom &#123;            project &#123;                packaging &#39;aar&#39;                // 可选，项目名称，需要修改                name &#39;RxOkRetrofit&#39;                // 可选，项目描述，需要修改                description &#39;Support for http request, use okhttp rxjava and retrofit.&#39;                url siteUrl // 项目主页，这里是引用上面定义好                // 软件开源协议，现在一般都是Apache License2.0                licenses &#123;                    license &#123;                        name &#39;The Apache Software License, Version 2.0&#39;                        url &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;                    &#125;                &#125;                //填写开发者基本信息，需要修改                developers &#123;                    developer &#123;                        id &#39;gaoxiaofeng&#39; // 开发者的id                        name &#39;gaoxiaofeng&#39; // 开发者名字                        email &#39;xiaofeng355@gmail.com&#39; // 开发者邮箱                    &#125;                &#125;                // SCM                scm &#123;                    connection gitUrl // Git仓库地址                    developerConnection gitUrl // Git仓库地址                    url siteUrl // 项目主页                &#125;            &#125;        &#125;    &#125;&#125;//上传到JCenterProperties properties = new Properties()properties.load(project.rootProject.file(&#39;local.properties&#39;).newDataInputStream())bintray &#123;    // 读取 local.properties 文件里面的 bintray.user 登录用户名    user = properties.getProperty(&quot;bintray.username&quot;)        // 读取 local.properties 文件里面的 bintray.apikey    key = properties.getProperty(&quot;bintray.apikey&quot;)       configurations = [&#39;archives&#39;]    pkg &#123;        // 这里的repo值必须要和你创建Maven仓库的时候的名字一样，需要修改        repo = &quot;RxOkRetrofit&quot;        // 发布到 JCenter 上的项目名字        name = libName        websiteUrl = siteUrl        vcsUrl = gitUrl        licenses = [&quot;Apache-2.0&quot;]        publish = true //是否是公开项目    &#125;&#125;// 生成jar包的tasktask sourcesJar(type: Jar) &#123;    from android.sourceSets.main.java.srcDirs    classifier = &#39;sources&#39;&#125;// 生成jarDoc的tasktask javadoc(type: Javadoc) &#123;    options.encoding &quot;UTF-8&quot;    options.charSet &#39;UTF-8&#39;    source = android.sourceSets.main.java.srcDirs    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过&#125;// 生成javaDoc的jartask javadocJar(type: Jar, dependsOn: javadoc) &#123;    classifier = &#39;javadoc&#39;    from javadoc.destinationDir&#125;artifacts &#123;    archives javadocJar    archives sourcesJar&#125;</code></pre><p>​</p></li><li><p>在  build.gradle 中还需要添加的配置：</p><p>​</p><pre><code>android&#123;    lintOptions &#123;        checkReleaseBuilds false        abortOnError false    &#125;&#125;</code></pre><p>​</p></li><li><p>在 local.properties 中添加上面需要的参数值：</p><p>​</p><pre><code>bintray.username= bintray注册的用户名bintray.apikey= 在文章开头获取的 apikey</code></pre><p>​</p></li></ol></li><li><p>上传</p><p>环境基本上就配置好了，需要修改的都己经给出，如果编译没有问题，就可以上传了</p><ul><li><p>Windows 环境</p><pre><code>gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false</code></pre><p>​</p></li><li><p>Mac OS 环境</p><p>如果出现拒绝该命令 <code>./gradlew: Permission denied</code>，可以先运行 <code>chmod +x gradlew</code>再运行该命令；</p><pre><code>./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false</code></pre><p>上面命令中 <strong>BINTRAY_USERNAME</strong> 是你在 bintray 上注册的用户名，<strong>BINTRAY_KEY</strong> 是文章开头获取的 API Key，替换了用户名和 API key 回车执行，等到控制台最终输出 <strong>BUILD SUCCESSFUL</strong> 就表明项目上传成功了</p></li></ul></li></ol><h2 id="发布到-jcenter"><a href="#发布到-jcenter" class="headerlink" title="发布到 jcenter"></a>发布到 jcenter</h2><p>这个时候回到 bintray 我们的 maven 仓库中，进入我们刚上传成功的 packge ，可以看到像这样：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_library.png" alt="jcenter_library"></p><p>   ​</p><p>   刚才新建的库已经有信息了，点击名称打开，会看到以下信息，然后点击 <strong>Add to JCenter</strong> ：</p><p><strong><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_detail.png" alt="jcenter-detail"></strong></p><p>接下来打开的是提交的页面，如下：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_send.png" alt="jcenter_send"></p><p>什么都不用填，直接点击 <strong>Send</strong> 按钮，等待审核！</p><p>至此，我们已经正确的创建、提交了我们的项目到jcenter，当然了，通过审核之后就有可以通过 compile 的方式依赖使用了，屌屌的！</p><h2 id="同步到Maven-Central"><a href="#同步到Maven-Central" class="headerlink" title="同步到Maven Central"></a>同步到Maven Central</h2><p>在详情页面，切换到 Maven Central 标签下， 设置好自己的 <strong>User token</strong> 和 <strong>password</strong> 点击 <strong>Sync</strong>：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_sync.png" alt="jcenter_sync"></p><h2 id="Url方式依赖"><a href="#Url方式依赖" class="headerlink" title="Url方式依赖"></a>Url方式依赖</h2><p>刚才我们提到过，一些个人维护或者其它平台的libraries 可以通过 url 的形式配置使用，所以，在没有通过审核之前，我们还是可以直接通过库的地址来依赖使用：</p><ol><li><p>找到库的链接地址，点击项目名称打开详情之后，我们可以看到右上角的地址：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_test_address.png" alt="jcenter_detail_address"></p></li><li><p>在 project 的 build.gradle 添加 url</p><pre><code class="gr">allprojects &#123;    repositories &#123;        jcenter()        // 添加这行        maven &#123;url &#39;右上角的链接&#39;&#125;    &#125;&#125;</code></pre></li><li><p>在 module 的 build.gradle 添加依赖</p><pre><code class="groovy">// 注意，第二个信息是 module 的名称compile &#39;com.gogh:module名称:1.0.1&#39;// 如果出错，可以使用下面的 @arr 依赖形式// compile &#39;com.gogh:module名称:1.0.1@arr&#39;</code></pre></li></ol><p>其实我们可以通过 jcenter 项目的详情页，左下角看到不同的引用形式：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/jcenter/jcenter_detail_dependencies.png" alt="jcenter_dependencies"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，还是非常简单的，只需要注册相应托管服务平台的账号，然后创建对应的项目，再配置本地的项目 pom 信息，上传并提交审核，同时可以同步到 maven central ，就是这么简单！如果你产出了更多更好的优质代码，不妨共享出来造福更多的程序猿！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在我们日常的开发中，会遇到各种各样的需求和技术解决方案。所以产生了各位大神提供的各种功能的开源库，并且通过：compile ‘xxxxxxxx’ 就可以使用了，非常方便。可以你有没有想过自己写一个开源库？又或者你已经贡献了很多好的代码，不知道怎么共享，怎么通过 compile 的方式给别人使用？你要知道，装B也是需要技术的。&lt;/p&gt;
&lt;h2 id=&quot;jcenter-amp-maven-central&quot;&gt;&lt;a href=&quot;#jcenter-amp-maven-central&quot; class=&quot;headerlink&quot; title=&quot;jcenter &amp;amp; maven central&quot;&gt;&lt;/a&gt;jcenter &amp;amp; maven central&lt;/h2&gt;&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;如果你留心的话，应该了解到我们使用了两种标准的 libraries 仓库，分别是 &lt;strong&gt;jcenter&lt;/strong&gt; 和 &lt;strong&gt;maven central&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;jcenter&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;jcenter 是一个托管在 &lt;a href=&quot;https://bintray.com/&quot;&gt;bintray.com&lt;/a&gt; 的资源库，你可以在 &lt;a href=&quot;http://jcenter.bintray.com/&quot;&gt;这里&lt;/a&gt; 找到需要的资源为了能在项目中使用 &lt;strong&gt;jcenter&lt;/strong&gt;，我们需要在 project 的 build.gradle 文件中添加对资源库的引用：&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allprojects &amp;#123;
    repositories &amp;#123;
        jcenter()
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;maven central&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Maven Central 是一个托管在 &lt;a href=&quot;https://sonatype.org/&quot;&gt;sonatype.org&lt;/a&gt; 的资源库，你可以在 &lt;a href=&quot;https://oss.sonatype.org/content/repositories/releases/&quot;&gt;这里&lt;/a&gt; 找到需要的资源如果在项目中使用 Maven Central，我们需要在 project 的 build.gradle 文件中定义自己的资源库：&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;allprojects &amp;#123;
    repositories &amp;#123;
        mavenCentral()
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，虽然 jcenter 和 Maven Central 都是标准Android library 资源仓库，但他们的托管地址完全不同，它们的内容是由不同提供者提供的，而且之间并没有任何关联。所以也就可能，在 jcenter 中能够找到的 library ，在 Maven Central 中并不能找到，反之亦然。&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="jcenter" scheme="https://goghtsui.github.io/tags/jcenter/"/>
    
    <category term="maven central" scheme="https://goghtsui.github.io/tags/maven-central/"/>
    
  </entry>
  
  <entry>
    <title>Moto Z Play 去除内核加密和dm-verify</title>
    <link href="https://goghtsui.github.io/2017/07/05/Moto-Z-Play-%E5%8E%BB%E9%99%A4%E5%86%85%E6%A0%B8%E5%8A%A0%E5%AF%86%E5%92%8Cdm-verify/undefined/"/>
    <id>https://goghtsui.github.io/2017/07/05/Moto-Z-Play-%E5%8E%BB%E9%99%A4%E5%86%85%E6%A0%B8%E5%8A%A0%E5%AF%86%E5%92%8Cdm-verify/undefined/</id>
    <published>2017-07-05T09:13:35.000Z</published>
    <updated>2021-01-26T02:34:57.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>由于各种原因，我们需要修改系统已完成定制，所以我们需要想办法去除掉它。</p><p>最近迎来了 Moto Z Play 的安全补丁更新，但是由于已经解锁 bootloader，无法正常OTA，所以需要手动刷最新完整底包，或者刷上一个版本然后OTA，更新到最新的 NCN25.137-24 版本，安全补丁是 2017年5月1日 的，无奈最新的完整底包还没有放出，只能刷上一个版本的底包再OTA了。当然了，Google全家桶是必不可少的，但是现在 Moto Z / Moto Z Play 刷 Google 全家桶可没那么容易了，两个问题：内核强制加密、dm-verify 验证！</p><ul><li><p>内核强制加密</p><p>Moto Z / Moto Z Play 开启了强制加密 Data(数据目录) 分区功能</p><p>开启强制加密会影响磁盘读写性能、无法修改、不能 ROOT、开机速度慢</p></li><li><p>dm-verify 验证</p><p>这是由 Google 设计的一项用于保护系统的技术。当系统经过修改后，手机将会重启，并且将会无法开机进入系统</p></li></ul><p>关于内核加密，现在第三方的ROM制作团队或者厂商都默认开启了内核加密，这没有任何问题，但是对于喜欢DIY或者定制ROM的人，就相当于是一道墙。 但是，还是有大神来解决的，下面是我整理的一些大神提供的去除内核加密和dm-verify验证的方法（<strong>只针对Moto Z / Moto Z Play</strong>）</p><a id="more"></a><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>需要使用的工具：**Android Image Kitchen **</li><li>官方固件（相应版本底包）</li><li>需要在 Linux 或者 有Java环境下</li><li>高级文本编辑器：Notepad++ 等</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>下载工具解压缩</p><p>附件是：Android.Image.Kitchen.v2.4-Win32.zip</p></li><li><p>解包内核</p><p>内核文件一般在底包中都命名为：boot.img ，镜像文件</p><p>打开cmd窗口，输入：</p><pre><code class="shell">unpackimg &lt;image-filename.img&gt;</code></pre><p>或者可以拖放 img 到 unpackimg.bat，这个脚本会解包 img 并解压到 ramdisk 的一个子目录中。 </p></li><li><p>去除 dm-verify 验证</p><p>打开 ramdisk 文件夹，找到 <em>fstab.qcom</em> 文件，并用Notepad++等编辑器打开</p><p>找到第9行，将 wait 后面的 <em>,verify</em> 删掉，即将一下内容：</p><pre><code class="xml">/dev/block/bootdevice/by-name/system    /system      ext4    ro,barrier=1         wait,verify</code></pre><p>修改为：</p><pre><code class="xml">/dev/block/bootdevice/by-name/system    /system      ext4    ro,barrier=1         wait</code></pre><p>假如是 Android 6.0.1，还有一个 charger.fstab.qcom，同样在第九行去掉 ,verify ，可加入 noatime 以提交 io 性能。</p><pre><code class="xml">/dev/block/bootdevice/by-name/system    /system           ext4    ro,barrier=1,noatime,discard       wait</code></pre></li><li><p>去除去除强制加密</p><p>接着找到第10行，将 <em>forceencrypt</em> 修改为 <em>encryptable</em> ，即将一下内容：</p><pre><code class="xml">&lt;blockquote&gt;/dev/block/bootdevice/by-name/userdata       /data        f2fs    rw,discard,nosuid,nodev,noatime,nodiratime,nobarrier,inline_xattr,inline_data    wait,check,formattable,forceencrypt=/dev/block/bootdevice/by-name/metadata</code></pre><p>修改为：</p><pre><code class="xml">&lt;blockquote&gt;/dev/block/bootdevice/by-name/userdata       /data        f2fs    rw,discard,nosuid,nodev,noatime,nodiratime,nobarrier,inline_xattr,inline_data    wait,check,formattable,encryptable=/dev/block/bootdevice/by-name/metadata</code></pre></li><li><p>删除 verity_key</p><p>删除 ramdisk 文件夹下 verity_key 文件，不删除 verity_key 将会导致国行系统不读卡</p></li><li><p>重新打包内核</p><p>直接点击 repackimg.bat（repackimg.bat 这个批处理脚本不需要输入命令，只要点击运行）。可以直接打包成 image-new.img 文件</p><p>关于 cleanup.bat ：清理文件夹并重置为初始状态，消除以下文件与文件夹：split_img + ramdisk的目录和任何新的打包的 ramdisk 或 img 文件</p></li><li><p>刷入</p><p>手机进入bootloader模式，执行以下命令：</p><pre><code class="shell">fastboot flash boot image_new.img</code></pre></li><li><p>格式化 Data 分区</p><pre><code class="shell">fastboot -w</code></pre><p>注意，只有当格式化 Data 分区后去除加密才可以生效</p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>刷入第三方包需要使用第三方recovery ，我使用的是TWRP 3.1.0，所以刷入内核之前要先刷入这个recovery。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p><a href="https://pan.baidu.com/s/1geVvQPd">Android Image Kitchen 点我下载</a></p><p><a href="https://pan.baidu.com/s/1qXZNsew">TWRP 3.1.0 </a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;由于各种原因，我们需要修改系统已完成定制，所以我们需要想办法去除掉它。&lt;/p&gt;
&lt;p&gt;最近迎来了 Moto Z Play 的安全补丁更新，但是由于已经解锁 bootloader，无法正常OTA，所以需要手动刷最新完整底包，或者刷上一个版本然后OTA，更新到最新的 NCN25.137-24 版本，安全补丁是 2017年5月1日 的，无奈最新的完整底包还没有放出，只能刷上一个版本的底包再OTA了。当然了，Google全家桶是必不可少的，但是现在 Moto Z / Moto Z Play 刷 Google 全家桶可没那么容易了，两个问题：内核强制加密、dm-verify 验证！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内核强制加密&lt;/p&gt;
&lt;p&gt;Moto Z / Moto Z Play 开启了强制加密 Data(数据目录) 分区功能&lt;/p&gt;
&lt;p&gt;开启强制加密会影响磁盘读写性能、无法修改、不能 ROOT、开机速度慢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dm-verify 验证&lt;/p&gt;
&lt;p&gt;这是由 Google 设计的一项用于保护系统的技术。当系统经过修改后，手机将会重启，并且将会无法开机进入系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于内核加密，现在第三方的ROM制作团队或者厂商都默认开启了内核加密，这没有任何问题，但是对于喜欢DIY或者定制ROM的人，就相当于是一道墙。 但是，还是有大神来解决的，下面是我整理的一些大神提供的去除内核加密和dm-verify验证的方法（&lt;strong&gt;只针对Moto Z / Moto Z Play&lt;/strong&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="mobile" scheme="https://goghtsui.github.io/categories/mobile/"/>
    
    
    <category term="Moto Z" scheme="https://goghtsui.github.io/tags/Moto-Z/"/>
    
    <category term="Moto Z Play" scheme="https://goghtsui.github.io/tags/Moto-Z-Play/"/>
    
    <category term="内核加密" scheme="https://goghtsui.github.io/tags/%E5%86%85%E6%A0%B8%E5%8A%A0%E5%AF%86/"/>
    
    <category term="dm-verify" scheme="https://goghtsui.github.io/tags/dm-verify/"/>
    
  </entry>
  
  <entry>
    <title>Google 发布 Android Studio 3.0 Canary 1</title>
    <link href="https://goghtsui.github.io/2017/05/24/Google-%E5%8F%91%E5%B8%83-Android-Studio-3-0-Canary-1/undefined/"/>
    <id>https://goghtsui.github.io/2017/05/24/Google-%E5%8F%91%E5%B8%83-Android-Studio-3-0-Canary-1/undefined/</id>
    <published>2017-05-24T03:01:45.000Z</published>
    <updated>2021-01-26T02:34:57.575Z</updated>
    
    <content type="html"><![CDATA[<p>发布人：Android 产品经理 <a href="https://www.google.com/+JamalEason">Jamal Eason</a></p><p>正巧赶上 Google I/O 2017 ，我们提供发布了 Android Studio 3.0 - 今天就可以在我们的 Canary 发布渠道上</p><p><a href="https://developer.android.com/studio/preview/index.html">下载</a>。Android Studio 是我们的官方 IDE，专门为 Android 开发构建的，我们不断加大投入，改进该 IDE。Android Studio中的功能集专注于加速您的应用程序开发流程并提供针对 Android 平台构建的最新工具。</p><p>为加快您的开发流程，Android Studio 3.0 包含了三大主要功能：</p><ul><li><p><strong>一套全新的应用性能分析工具</strong>，用于快速诊断性能问题</p></li><li><p>支持 Kotlin 编程语言</p></li><li><p>加快大型应用项目的 Gradle 构建速度</p></li></ul><p>Android Studio 3.0 还紧密集成了 Android 平台开发工具，提供以下附加的关键功能：</p><ul><li><p>支持Instant App（即时应用或免安装应用）的开发</p></li><li><p>在 Android O 模拟器系统映像中包含 Google Play 商店</p></li><li><p>全新的 Android O 开发向导</p></li></ul><p>总的来说，Android Studio 3.0 的第一个 Canary 版本包含 20 多项新功能。</p><p>我们一直在 Android Studio 2.4 的各个 Canary 版本中默默地迭代了这当中的许多功能。直到今天，我们认识到，我们已经添加了许多重要功能，并且，我们必须在Android Gradle插件中引入一个罕见的变化，以提高可扩展性和构建时间，于是，我们将此版本重新编号为 Android Studio 3.0。如果您希望针对 Android O 开发应用，创建免安装应用，开始使用 Kotlin 语言开发，或者希望使用最新的 Android 应用性能工具来提升应用质量，那么，您应立即下载 Android Studio 3.0 Canary 1。</p><p><a href="https://youtu.be/rHiA66zUv8c">Yutube视频演示地址：Android DevByte - Android Studio 3.0 Canary 1 中的新增功能</a></p><a id="more"></a><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><strong>Kotlin 编程语言</strong> - 根据行情的需要，Android Studio 3.0 现在包含对 <a href="http://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html">Kotlin</a> 的支持。凭借对此新语言的支持，您可以在现有 Android 应用代码的旁边无缝添加 Kotlin 代码，还可访问 Android Studio 中提供的所有优秀开发工具。您可以选择使用  <strong>Code</strong> → <strong>Convert Java File to Kotlin File</strong> 中提供的内置转换工具将 Kotlin 添加到您的项目，也可以选择使用 <strong>New Project</strong> 向导创建启用 Kotlin 的项目。详细了解 <a href="https://developer.android.google.cn/kotlin">Android</a> 和 <a href="https://d.android.com/kotlin/get-started.html">Android Studio</a> 中的 Kotlin 语言支持。</li></ul><p><img src="http://bp.googleblog.cn/-lHeuEY-SRDk/WRuYZwG9PII/AAAAAAAAEIc/Hoyf07WSM5UEPcines6EHPm-TqxsOy0SgCLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B5.24.36%2BPM.png" alt="img"></p><p>​                                                      <em>Android Studio 中的 Kotlin 语言转换</em></p><ul><li><strong>Java 8 语言功能</strong> - 我们正在继续完善对 Java 8 语言功能和 API 的支持。由于最近<a href="https://android-developers.googleblog.com/2017/03/future-of-java-8-language-feature.html">弃用 Jack 工具链</a>并迁移到基于 javac 的工具链，对于使用 Java 8 语言功能的项目，您可以在 Android Studio 中访问许多新功能，例如 Instant Run。要更新您的项目以支持全新 Java 8 语言工具链，只需在 Project Structure 对话框中将您的 <em>源代码</em> 和 <em>目标代码</em> 兼容性级别更新至 1.8。<a href="https://developer.android.google.cn/studio/preview/features/java8-support.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-zzGX2IibwyQ/WRuaSBSAoTI/AAAAAAAAEIo/vrTUOb7k65AOdiEpi9goTKuLnY7obuyowCLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B5.32.42%2BPM.png"><img src="http://bp.googleblog.cn/-zzGX2IibwyQ/WRuaSBSAoTI/AAAAAAAAEIo/vrTUOb7k65AOdiEpi9goTKuLnY7obuyowCLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B5.32.42%2BPM.png" alt="img"></a></p><p>​                                                          <em>更新 Java 8 语言的 Project Structure 对话框</em></p><ul><li><strong>布局编辑器</strong> - 在此 Android Studio 版本中，您会发现针对布局编辑器的更多增强功能。我们更新了组件树，提供更好用的拖拽式视图插入功能以及全新的错误面板。为配合对 <code>ConstraintLayout</code> 的更新，布局编辑器还支持创建视图 Barrier 和 Group，并增强了链创建功能。<a href="https://developer.android.google.cn/studio/write/layout-editor.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-HZyj3VD96jA/WRucMgZZuNI/AAAAAAAAEI0/0qaSvv_50ZQmul67yIznTBLU4i_Q53_FACLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B5.40.30%2BPM.png"><img src="http://bp.googleblog.cn/-HZyj3VD96jA/WRucMgZZuNI/AAAAAAAAEI0/0qaSvv_50ZQmul67yIznTBLU4i_Q53_FACLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B5.40.30%2BPM.png" alt="img"></a></p><p>​                                                             <em>布局编辑器组件树和警告面板</em>                                                                                       </p><ul><li><strong>Adaptive Icon 向导</strong> - Android O 引入了自适应启动器图标，其可以在不同的 Android 设备上显示为不同的形状。全新 Adaptive Launcher Icon 向导可创建新旧两种版本的启动器图标资源并可预览自适应图标在不同启动器屏幕图标蒙版上的外观。创建新资源的方法是：右键点击项目中的 <strong>/res</strong> 文件夹，然后导航至 → <strong>New</strong> → <strong>Image Asset</strong> → **Launcher Icons (Adaptive and Legacy) **<a href="https://developer.android.google.cn/preview/features/adaptive-icons.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-YdVUEQRs6jg/WRueU5lQNoI/AAAAAAAAEJA/7aoBWnq2nwkUWMnXXr22LHmMjksin-j3ACLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B5.49.59%2BPM.png"><img src="http://bp.googleblog.cn/-YdVUEQRs6jg/WRueU5lQNoI/AAAAAAAAEJA/7aoBWnq2nwkUWMnXXr22LHmMjksin-j3ACLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B5.49.59%2BPM.png" alt="img"></a>                           </p><p>​                                                                                    <em>Adaptive Icon 向导</em></p><ul><li>**XML 字体和可下载字体 **- 现在，使用 Android Studio 中的 XML 字体预览和字体选择工具可以为您的应用（针对 Android O 的应用）更轻松地添加自定义字体。您也可以为您的应用创建可下载的字体资源。使用可下载的字体，您将可以在应用中使用自定义字体，同时又不需要在 APK 中捆绑字体资源。要使用可下载字体，请确保您的设备或模拟器运行的是 Google Play 服务 11.2.63 版或更高版本。<a href="https://developer.android.google.cn/preview/features/working-with-fonts.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-YyJfefOOuYg/WRufh8oG_HI/AAAAAAAAEJM/uTgQ1p_GhtQsf9RUrISWfMSlJ48nB4gkQCLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B5.54.53%2BPM.png"><img src="http://bp.googleblog.cn/-YyJfefOOuYg/WRufh8oG_HI/AAAAAAAAEJM/uTgQ1p_GhtQsf9RUrISWfMSlJ48nB4gkQCLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B5.54.53%2BPM.png" alt="img"></a>               </p><p>​                                                                     <em>可下载字体资源选取器</em></p><p><a href="http://bp.googleblog.cn/-9-R6bmQU9rE/WRugwGXaQhI/AAAAAAAAEJY/1eFsIT3RBi4DzQJknO5mrcClxWGjE3c9gCLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B6.00.17%2BPM.png"><img src="http://bp.googleblog.cn/-9-R6bmQU9rE/WRugwGXaQhI/AAAAAAAAEJY/1eFsIT3RBi4DzQJknO5mrcClxWGjE3c9gCLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B6.00.17%2BPM.png" alt="img"></a></p><p>​                                                                                <em>XML 字体预览</em></p><ul><li>**Android Things 支持 **- 借助于 Android Studio 3.0，您可以使用 New Project 向导和 New Module 向导中的一组新模板来开始开发 Android Things。Android Things 允许您将自己的 Android 开发知识拓展到物联网 (IoT) 设备类别。<a href="https://developer.android.google.cn/things/index.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-hddvLe6HWk4/WRui4egjJyI/AAAAAAAAEJk/JRLxBR_VhGY8IEsy9N6vQCS1TBNRvCu1gCLcB/s1600/Screen%2BShot%2B2017-05-16%2Bat%2B6.09.13%2BPM.png"><img src="http://bp.googleblog.cn/-hddvLe6HWk4/WRui4egjJyI/AAAAAAAAEJk/JRLxBR_VhGY8IEsy9N6vQCS1TBNRvCu1gCLcB/s640/Screen%2BShot%2B2017-05-16%2Bat%2B6.09.13%2BPM.png" alt="img"></a></p><p>​                                                                     <em>Android Things New Module 向导</em></p><ul><li><strong>IntelliJ 平台更新</strong>：Android Studio 3.0 Canary 1 包含 IntelliJ 2017.1 版本，其包含 Java 8 语言重构、参数提示、语义突出显示、可拖拽的断点、增强的版本控制搜索等功能。<a href="https://www.jetbrains.com/idea/whatsnew/#v2017-1">了解详情</a>。</li></ul><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><ul><li><strong>免安装应用支持</strong> - 利用 Android Studio 3.0，您可以在项目中创建<a href="https://developer.android.google.cn/topic/instant-apps/index.html">免安装应用</a>。免安装应用是一种轻巧的 Android 应用，用户无需安装即可直接运行该应用。为支持免安装应用，Android Studio 引入了两种新模块类型：免安装应用和功能。结合全新的“模块化”重构操作和<a href="https://developer.android.google.cn/studio/write/app-link-indexing.html">应用链接助手</a>，Android Studio 可以帮助您将现有应用拓展为免安装应用。为使用此功能，您可以使用 New Module 向导或右键点击某个类并导航至：<strong>Refactor</strong> → <strong>Modularize</strong> <a href="http://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-7s_5i1prU8k/WRumXwzk_KI/AAAAAAAAEJw/wlq8uV0D17oLd70hYNVJjNgpwfc_dkL8wCLcB/s1600/Untitled_document8.png"><img src="http://bp.googleblog.cn/-7s_5i1prU8k/WRumXwzk_KI/AAAAAAAAEJw/wlq8uV0D17oLd70hYNVJjNgpwfc_dkL8wCLcB/s640/Untitled_document8.png" alt="img"></a></p><p>​                                                                 <em>Instant App Module 向导</em></p><ul><li>**构建速度的提升 **- 我们继续努力提升构建速度。在此版本中，我们侧重于提升包含大量模块的项目的构建速度。为提升这些项目的构建速度并支持未来的增强功能， *我们对 Android Studio 所使用的 Android Gradle 插件的 API *做出了颠覆性的改动。如果您依赖于之前版本的插件所提供的 API，您应验证与新插件的兼容性并迁移到适用的 API。在您的 <code>build.gradle</code> 文件中测试和更新插件版本。<a href="https://developer.android.google.cn/studio/preview/features/new-android-plugin.html">了解详情</a>。</li></ul><p><code>build.gradle</code></p><pre><code>dependencies &#123;   classpath &#39;com.android.tools.build:gradle:3.0.0-alpha1&#39;&#125;</code></pre><ul><li><strong>Google 的 Maven 存储区</strong> - 此外，应广大开发者的热切呼声，现在，我们以全新 Maven 存储区的形式在 Android SDK 管理器外部分发 Android 支持库的 Maven 依赖项。对于使用持续集成 (CI) 系统开发的人来说，这样可以简化 Maven 依赖项的管理。结合最新的命令行 <a href="https://developer.android.google.cn/studio/intro/update.html#download-with-gradle">SDK 管理器工具</a>和 <a href="https://developer.android.google.cn/studio/intro/update.html#download-with-gradle">Gradle</a> 使用时，使用 Google 的 Maven 存储区应该能够简化 CI 构建的管理。要使用全新 Maven 的位置，请在应用模块的 <code>build.gradle</code> 文件中添加以下网址。<a href="http://developer.android.google.cn/studio/build/dependencies.html#google-maven">了解详情</a>。</li></ul><p><code>build.gradle</code></p><pre><code>repositories &#123;   maven &#123;       url &quot;https://maven.google.com&quot;   &#125;&#125;</code></pre><h3 id="测试和调试"><a href="#测试和调试" class="headerlink" title="测试和调试"></a>测试和调试</h3><ul><li>**Google Play 系统映像 **- 在更新 Android O Beta 版本的同时，我们也更新了 Android Emulator O 系统映像，使之包含 Google Play 商店。捆绑 Google Play 商店让您能够使用 Google Play 端到端地测试应用，同时也方便您在 Android Virtual Device (AVD) 中使 Google Play 服务保持最新状态。就像实际设备上的 Google Play 服务更新一样，您也可以在 AVD 上启用同样的更新。</li></ul><p><a href="http://bp.googleblog.cn/-44GDMUflbQM/WRurVK0GPaI/AAAAAAAAEKA/KG6cPrxcfaQEp_EO2b8DXOw2As7BQEvyACLcB/s1600/Untitled_document9.png"><img src="http://bp.googleblog.cn/-44GDMUflbQM/WRurVK0GPaI/AAAAAAAAEKA/KG6cPrxcfaQEp_EO2b8DXOw2As7BQEvyACLcB/s640/Untitled_document9.png" alt="img"></a></p><p>​                                                      <em>Android Emulator 中的 Google Play 商店</em></p><p><a href="http://bp.googleblog.cn/-okSZTHiws6w/WRurwSZiYsI/AAAAAAAAEKE/NkLl-4rWFAgbErc8WSZUGBNCSBivbgC6QCLcB/s1600/Untitled_document10.png"><img src="http://bp.googleblog.cn/-okSZTHiws6w/WRurwSZiYsI/AAAAAAAAEKE/NkLl-4rWFAgbErc8WSZUGBNCSBivbgC6QCLcB/s640/Untitled_document10.png" alt="img"></a></p><p>​                                                   <em>更新 Android Emulator 中的 Google Play 服务</em></p><p>为确保应用安全性以及与实际设备一致的体验，包含 Google Play 商店的模拟器系统映像已使用发布密钥签名。这意味着您将无法获得高级权限。如果您要求使用高级权限 (root) 来帮助您排查应用问题，您可以使用不包含 Google 应用或服务的 Android 开放源代码项目 (AOSP) 模拟器系统映像。要开始，请确保您使用的是 Android Emulator v26.1+ 和最新的系统映像 API 24+，然后使用设备定义旁边的 Google Play 图标创建一个新 AVD。<a href="https://developer.android.google.cn/studio/run/emulator.html">了解详情</a>。</p><p><a href="http://bp.googleblog.cn/-MsgkoqS9SPU/WRusSzxv-hI/AAAAAAAAEKM/gtYXdiPMMAMLitY38EGQFWfLYmtffZeCQCLcB/s1600/Untitled_document11.png"><img src="http://bp.googleblog.cn/-MsgkoqS9SPU/WRusSzxv-hI/AAAAAAAAEKM/gtYXdiPMMAMLitY38EGQFWfLYmtffZeCQCLcB/s640/Untitled_document11.png" alt="img"></a></p><p>​                                                <em>包含 Google Play 商店支持的 Android Virtual Device 管理器</em></p><ul><li><strong>Android Emulator 中的 OpenGL ES 3.0 支持</strong> - 我们不断投资，努力给您带来快速开发体验，最新版的 Android Emulator 针对 Android O 系统映像引入了 OpenGL ES 3.0 支持，针对旧版模拟器系统映像，则大幅增强了 OpenGL ES 2.0 的图形性能。在所有操作系统中，大多数最新的显卡均支持 OpenGL ES 2.0 加速。要将 OpenGL ES 3.0 与 Android Emulator 配合使用，开发计算机需要在 Microsoft® Windows® 或 Linux（即将支持 Apple MacOS®）中支持 OpenGL 3.2 或更高版本的主机 GPU 显卡。<a href="https://developer.android.google.cn/studio/run/emulator-acceleration.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-9zTEvPDWlTs/WRusu2KQA7I/AAAAAAAAEKQ/TWBacAIL8Ok97nT-cTBg3BRdE1BXw6jQwCLcB/s1600/Untitled_document12.png"><img src="http://bp.googleblog.cn/-9zTEvPDWlTs/WRusu2KQA7I/AAAAAAAAEKQ/TWBacAIL8Ok97nT-cTBg3BRdE1BXw6jQwCLcB/s640/Untitled_document12.png" alt="img"></a></p><p>​                                                       <em>Android Emulator 中的 OpenGL ES 3.0</em></p><ul><li><strong>Android Emulator 中的应用错误报告程序</strong> - 为帮助记录应用中的错误，我们新增了一种更简便的错误报告生成方法，该报告程序提供所有必要的配置设置以及捕获重现步骤的空间。另外，我们还新增了一个链接，以便您在想要与 Android 团队分享特定模拟器错误时，能够在 Android Issue Tracker 中快速生成错误。要使用此功能，请导航至 <strong>Emulator Tool Bar</strong> → <strong>Extended Controls</strong> → <strong>Help</strong> → <strong>Emulator Help</strong> → <strong>File a Bug</strong>。<a href="https://developer.android.google.cn/studio/debug/bug-report.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-Cya9JApeEFA/WRutDad4wJI/AAAAAAAAEKU/cnfmghJv5Vkg6wgt-cOXUa8WNrss8DcMgCLcB/s1600/Untitled_document13.png"><img src="http://bp.googleblog.cn/-Cya9JApeEFA/WRutDad4wJI/AAAAAAAAEKU/cnfmghJv5Vkg6wgt-cOXUa8WNrss8DcMgCLcB/s640/Untitled_document13.png" alt="img"></a></p><p>​                                                              <em>Android Emulator 中的应用错误报告</em></p><ul><li><strong>Android 中的代理支持 **- 针对那些需要使用 HTTP 代理访问互联网的用户，我们新增了一个用户界面，可用于管理模拟器所使用的代理设置。现在，默认情况下，Android Emulator 会使用 Android Studio 中的设置，但您可以在您的网络设置中替换这些设置。要进行配置，请导航至 **Extended Controls</strong> → <strong>Settings</strong> → <strong>Proxy</strong>。</li></ul><p><a href="http://bp.googleblog.cn/-5n5rvZxEmRA/WRuteQWd_BI/AAAAAAAAEKY/EieOKW2wZ4kugY87j8LBHrCI0FCEykpGwCLcB/s1600/Untitled_document14.png"><img src="http://bp.googleblog.cn/-5n5rvZxEmRA/WRuteQWd_BI/AAAAAAAAEKY/EieOKW2wZ4kugY87j8LBHrCI0FCEykpGwCLcB/s640/Untitled_document14.png" alt="img"></a></p><p>​                                                                     <em>Android Emulator 代理设置</em></p><ul><li>**Android Emulator 中的 Android Wear 旋转控件 **- 现在，Android Emulator 支持 Android Wear 2.0 模拟器系统映像的旋转控件。现在，对于针对包含旋转输入滚动功能的 Android Wear 设备的应用，测试将更加简单。要启用此功能，请创建针对 Android Wear 的 Emulator AVD，Rotary Input 面板应出现在扩展控件下面。<a href="https://developer.android.google.cn/training/wearables/ui/rotary-input.html#emulator">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-n_TJ72D7ixw/WRuuAVCV48I/AAAAAAAAEKg/RyCdU-Xw8gk3ph1rDYtDP52HExF7xKnvQCLcB/s1600/Untitled_document15.png"><img src="http://bp.googleblog.cn/-n_TJ72D7ixw/WRuuAVCV48I/AAAAAAAAEKg/RyCdU-Xw8gk3ph1rDYtDP52HExF7xKnvQCLcB/s640/Untitled_document15.png" alt="img"></a></p><p>​                                                                   <em>Android Emulator 中的旋转输入</em></p><ul><li><strong>APK 调试 **- 现在，针对不想在 Android Studio 中构建项目、只想在其中调试 APK 的开发者，Android Studio 3.0 版本加入了调试任意 APK的功能。对于在其他开发环境编写 Android C++ 代码而想在 Android Studio 环境中调试和分析 APK 的用户而言，此功能尤为有用。只要您有可调试版本的 APK，您就可以使用新的 APK 调试功能来静态分析、动态分析和调试 APK。而且，如果您可以访问 APK 的源代码，您可以将此源代码链接到 APK 调试流，以提高调试流程的保真度。只需在 Android Studio Welcome Screen 中选择 **Profile or debug APK</strong> 或选择 <strong>File → Profile or debug APK</strong>，即可使用此功能。 <a href="https://developer.android.google.cn/studio/preview/features/apk-debugger.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-9gMp5nOo5rM/WRuueexuPkI/AAAAAAAAEKk/w0TjKI9kM24RIib_2Rrw-S0cNjVe7cdgACLcB/s1600/Untitled_document16.png"><img src="http://bp.googleblog.cn/-9gMp5nOo5rM/WRuueexuPkI/AAAAAAAAEKk/w0TjKI9kM24RIib_2Rrw-S0cNjVe7cdgACLcB/s640/Untitled_document16.png" alt="img"></a></p><p>​                                                                                <em>分析或调试 APK</em></p><p><a href="http://bp.googleblog.cn/-Wc0TE7Aw21U/WRuuu5hcF9I/AAAAAAAAEKs/bg8N8ZtW43Ezf_licLqTjPRQD1HaK8sUACLcB/s1600/Untitled_document17.png"><img src="http://bp.googleblog.cn/-Wc0TE7Aw21U/WRuuu5hcF9I/AAAAAAAAEKs/bg8N8ZtW43Ezf_licLqTjPRQD1HaK8sUACLcB/s640/Untitled_document17.png" alt="img"></a></p><p>​                                                                                   <em>APK 调试</em></p><ul><li><strong>布局检查器 **- 您会发现，Android Studio 3.0 中的布局检查器提供几项增强功能，简化了应用布局问题的调试。这几项增强功能包括更好地将属性分组到常用分类中，以及 View Tree 和 Properties 面板中的搜索功能等。在应用运行时，通过 **Tools</strong> → <strong>Android</strong> → <strong>Layout Inspector</strong> 访问布局检查器。<a href="http://tools.android.com/tech-docs/layout-inspector">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-AnXGQN3rPAY/WRuvMQFkSSI/AAAAAAAAEKw/QJax6eLPM1s4jom6XYY7u1rIAZF2DRvrQCLcB/s1600/Untitled_document18.png"><img src="http://bp.googleblog.cn/-AnXGQN3rPAY/WRuvMQFkSSI/AAAAAAAAEKw/QJax6eLPM1s4jom6XYY7u1rIAZF2DRvrQCLcB/s640/Untitled_document18.png" alt="img"></a></p><p>​                                                                           <em>布局检查器</em></p><ul><li>**设备文件浏览器 **- 应广大用户的热切呼声，我们将设备文件浏览器从 DDMS 移植到 Android Studio 中，新的浏览器允许查看 Android 设备或模拟器的文件和目录结构。现在，您在测试应用时，可以直接在 Android Studio 中快速预览和修改应用数据文件。</li></ul><p><a href="http://bp.googleblog.cn/-AXNjf7DcsPc/WRuvmxc-F8I/AAAAAAAAEK0/ConW_Yck8R80WbTtrYT1sHfXnVh9SflRACLcB/s1600/Untitled_document19.png"><img src="http://bp.googleblog.cn/-AXNjf7DcsPc/WRuvmxc-F8I/AAAAAAAAEK0/ConW_Yck8R80WbTtrYT1sHfXnVh9SflRACLcB/s640/Untitled_document19.png" alt="img"></a></p><p>​                                                                                  <em>设备文件浏览器</em></p><h3 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h3><ul><li><strong>Android 分析器</strong> - Android Studio 3.0 包含全新的工具包，以帮助调试应用的性能问题。我们对之前的 Android Monitor 工具集进行彻底重写，代之以 Android 分析器。您将应用部署到正在运行的设备或模拟器后，点击 <strong>Android Profiler</strong> 标签，即可在实时、统一的视图中访问应用的 CPU、内存和网络活动。每个性能事件映射到 UI 事件时间线中，该时间线突出显示触摸事件、按键和活动变更，以便您更清楚地了解特定事件发生的时间和原因。 点击每个时间线，深入了解应用的性能情况。<a href="https://developer.android.google.cn/studio/preview/features/android-profiler.html">了解详情</a>。 </li></ul><p><a href="http://bp.googleblog.cn/-ldsm-bneWBA/WRuwE497u5I/AAAAAAAAEK4/3gd7l7XjC7wuhHYdVFNuwQGrw8uYnYpRQCLcB/s1600/Untitled_document20.png"><img src="http://bp.googleblog.cn/-ldsm-bneWBA/WRuwE497u5I/AAAAAAAAEK4/3gd7l7XjC7wuhHYdVFNuwQGrw8uYnYpRQCLcB/s640/Untitled_document20.png" alt="img"></a></p><p>​                                                                   <em>Android 分析器 - 时间线组合视图</em></p><ul><li>**CPU 分析器 **- 不必要的 CPU 处理和负载峰值是应用性能不佳的征兆。有了 CPU 分析器，您可以触发一个样本或测试的 CPU 跟踪文件，分析应用的 CPU 线程使用情况。然后，您可以使用 CPU 分析器中内置的各种数据视图和过滤器排查 CPU 性能问题。<a href="https://developer.android.google.cn/studio/profile/cpu-profiler.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-ZDxNakmTddo/WRuwWl4Hc5I/AAAAAAAAELA/nAAjBOzpC_QCJU11Aa-Vs0e8U5FGaGCiwCLcB/s1600/Untitled_document21.png"><img src="http://bp.googleblog.cn/-ZDxNakmTddo/WRuwWl4Hc5I/AAAAAAAAELA/nAAjBOzpC_QCJU11Aa-Vs0e8U5FGaGCiwCLcB/s640/Untitled_document21.png" alt="img"></a></p><p>CPU 分析器</p><ul><li><strong>内存分析器</strong> - 内存使用效率低，可能导致许多设备问题，包括 UI 反应迟钝和内存不足事件等。内存分析器将之前的堆查看器和分配跟踪器的功能集成到一个丰富的界面中，帮助调试应用中的内存使用问题。您可以通过分析内存分配、堆转储等来诊断各种内存问题。<a href="https://developer.android.google.cn/studio/profile/memory-profiler.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-80loiOrn5Z8/WRuw99AssFI/AAAAAAAAELI/tDPfHoISCnsIiHbMR-deITizLHgubOlVgCLcB/s1600/Untitled_document22.png"><img src="http://bp.googleblog.cn/-80loiOrn5Z8/WRuw99AssFI/AAAAAAAAELI/tDPfHoISCnsIiHbMR-deITizLHgubOlVgCLcB/s640/Untitled_document22.png" alt="img"></a></p><p>​                                                                                      <em>内存分析器</em></p><ul><li><strong>网络分析器</strong> - 通过优化应用的前台和后台网络使用情况，可以提高应用性能和减少应用流量消耗。通过网络分析器，您可以监控应用的网络活动，检查每个网络请求的有效负载，链接回生成网络请求的源代码行。现在，网络分析器可与 <a href="https://developer.android.google.cn/reference/java/net/HttpURLConnection.html">HttpURLConnection</a>、<a href="http://square.github.io/okhttp/">OkHttp</a> 及 <a href="https://developer.android.google.cn/training/volley/index.html">Volley</a> 网络库配合使用。网络分析器是一项高级分析功能，可在 Android O 之前版本的设备和模拟器上启用，方法是：在 Run Configuration 框的 Profiling 标签中选中 <em>Enable Advanced Profiling</em> 。除了启用网络请求和有效负载分析外，此复选框还可以启用最高等级事件收集、内存对象计数和内存垃圾回收。对于基于 Android O 的设备和模拟器，只需部署应用即可。<a href="https://developer.android.google.cn/studio/profile/network-profiler.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-J3S4UdSMzRA/WRuxdBRfmrI/AAAAAAAAELQ/qjlVRSND1Goh3zEVmo599kBPeBh4ZBEYACLcB/s1600/Untitled_document23.png"><img src="http://bp.googleblog.cn/-J3S4UdSMzRA/WRuxdBRfmrI/AAAAAAAAELQ/qjlVRSND1Goh3zEVmo599kBPeBh4ZBEYACLcB/s640/Untitled_document23.png" alt="img"></a></p><p>​                                                                                      <em>网络分析器</em></p><p><a href="http://bp.googleblog.cn/-TuWuC_XpCA0/WRuxqTmfYSI/AAAAAAAAELU/iLiINZ0mLwUxWcbTpH5lBTRK3LgpHsE1ACLcB/s1600/Untitled_document24.png"><img src="http://bp.googleblog.cn/-TuWuC_XpCA0/WRuxqTmfYSI/AAAAAAAAELU/iLiINZ0mLwUxWcbTpH5lBTRK3LgpHsE1ACLcB/s640/Untitled_document24.png" alt="img"></a></p><p>​                                                       <em>Android O 之前版本的设备中的网络分析器设置</em></p><ul><li><strong>APK 分析器增强功能</strong> - 在 Android Studio 3.0 中，我们对 APK 分析器新增了一些额外的增强功能，以帮助您进一步减小 APK 的大小。通过此功能更新，您现在可以分析免安装应用的 Zip 文件和 AAR，查看类和方法的 dex 字节码。您还可以生成 Proguard 配置规则和在 dex 查看器中加载 Proguard 映射文件。<a href="https://developer.android.google.cn/studio/build/apk-analyzer.html">了解详情</a>。</li></ul><p><a href="http://bp.googleblog.cn/-nLI51BtTL0Y/WRux-GmCeCI/AAAAAAAAELY/JhV81jDLfUkxYHiFdqbV7T1jX3sK_2ZfwCLcB/s1600/Untitled_document25.png"><img src="http://bp.googleblog.cn/-nLI51BtTL0Y/WRux-GmCeCI/AAAAAAAAELY/JhV81jDLfUkxYHiFdqbV7T1jX3sK_2ZfwCLcB/s640/Untitled_document25.png" alt="img"></a></p><p>​                                                                                            <em>APK 分析器</em></p><p>回顾一下，Android Studio 3.0 Canary 1 包含以下重要的新功能：<br>| 开发                                       | 测试&amp;调试                                    |<br>| —————————————- | —————————————- |<br>| <a href="http://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html">Kotlin 语言</a> | <a href="https://developer.android.google.cn/studio/run/emulator-acceleration.html">Emulator OpenGL ES 3.0 支持</a> |<br>| <a href="https://developer.android.google.cn/studio/preview/features/java8-support.html">Java 8 语言</a> | <a href="https://developer.android.google.cn/studio/run/emulator.html">Emulator Google Play 系统映像</a> |<br>| <a href="https://developer.android.google.cn/studio/write/layout-editor.html">布局编辑器增强功能</a> | Emulator 代理支持                            |<br>| <a href="https://developer.android.google.cn/preview/features/adaptive-icons.html">Adaptive Icon 向导</a> | <a href="https://developer.android.google.cn/studio/debug/bug-report.html">应用错误报告程序</a> |<br>| <a href="https://developer.android.google.cn/preview/features/working-with-fonts.html">XML 字体和可下载字体</a> | <a href="https://developer.android.google.cn/training/wearables/ui/rotary-input.html#emulator">Android Wear 旋转输入</a> |<br>| <a href="https://developer.android.google.cn/things/index.html">Android Things</a> | <a href="https://developer.android.google.cn/studio/preview/features/apk-debugger.html">APK 调试</a> |<br>| <a href="https://www.jetbrains.com/idea/whatsnew/#v2017-1">Intellij 平台更新 2017.1</a> | <a href="http://tools.android.com/tech-docs/layout-inspector">布局检查器</a> |<br>| /                                        | 设备文件浏览器                                  |</p><table><thead><tr><th>构建</th><th>优化工具</th></tr></thead><tbody><tr><td><a href="http://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html">Instant App 支持</a></td><td><a href="https://developer.android.google.cn/studio/preview/features/android-profiler.html">CPU 分析器</a></td></tr><tr><td><a href="https://developer.android.google.cn/studio/preview/features/new-android-plugin.html">构建速度的提升</a></td><td><a href="https://developer.android.google.cn/studio/profile/memory-profiler.html">内存分析器</a></td></tr><tr><td><a href="http://developer.android.google.cn/studio/build/dependencies.html#google-maven">Google 的 Maven 存储区变更</a></td><td><a href="https://developer.android.google.cn/studio/profile/network-profiler.html">网络分析器</a></td></tr><tr><td>/</td><td><a href="https://developer.android.google.cn/studio/build/apk-analyzer.html">APK 分析器增强功能</a></td></tr></tbody></table><p>更多详细信息，请查看<a href="http://developer.android.com/studio/preview/features/index.html">版本说明</a></p><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>如果您使用的是之前版本的 Android Studio，您可以<a href="https://developer.android.com/studio/preview/install-preview.html">与稳定版并行</a>安装 Android Studio 3.0 Canary 1。您可以从官方 Android Studio 预览版<a href="https://developer.android.com/studio/preview/index.html">下载页面</a>下载此更新。如本博文所述，为了支持此 IDE 中的一些新功能，对 Gradle Plugin API 做出了一些颠覆性的改动。因此，您也应在当前项目中将 Android Gradle 插件版本更新至 3.0.0-alpha1，测试和验证您的应用项目设置。</p><p>我们感谢您提供有关您喜欢的特性、存在的问题或希望看到的功能的任何反馈意见。如果您发现错误或问题，欢迎随时向我们<a href="https://source.android.com/source/report-bugs#developer-tools">提交问题</a>。在我们的 <a href="https://plus.google.com/103342515830390186255">Google+</a> 信息页或 <a href="http://www.twitter.com/androidstudio">Twitter</a> 上与我们（Android Studio 开发团队）联系。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发布人：Android 产品经理 &lt;a href=&quot;https://www.google.com/+JamalEason&quot;&gt;Jamal Eason&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;正巧赶上 Google I/O 2017 ，我们提供发布了 Android Studio 3.0 - 今天就可以在我们的 Canary 发布渠道上&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/preview/index.html&quot;&gt;下载&lt;/a&gt;。Android Studio 是我们的官方 IDE，专门为 Android 开发构建的，我们不断加大投入，改进该 IDE。Android Studio中的功能集专注于加速您的应用程序开发流程并提供针对 Android 平台构建的最新工具。&lt;/p&gt;
&lt;p&gt;为加快您的开发流程，Android Studio 3.0 包含了三大主要功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;一套全新的应用性能分析工具&lt;/strong&gt;，用于快速诊断性能问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持 Kotlin 编程语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加快大型应用项目的 Gradle 构建速度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android Studio 3.0 还紧密集成了 Android 平台开发工具，提供以下附加的关键功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持Instant App（即时应用或免安装应用）的开发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Android O 模拟器系统映像中包含 Google Play 商店&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全新的 Android O 开发向导&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，Android Studio 3.0 的第一个 Canary 版本包含 20 多项新功能。&lt;/p&gt;
&lt;p&gt;我们一直在 Android Studio 2.4 的各个 Canary 版本中默默地迭代了这当中的许多功能。直到今天，我们认识到，我们已经添加了许多重要功能，并且，我们必须在Android Gradle插件中引入一个罕见的变化，以提高可扩展性和构建时间，于是，我们将此版本重新编号为 Android Studio 3.0。如果您希望针对 Android O 开发应用，创建免安装应用，开始使用 Kotlin 语言开发，或者希望使用最新的 Android 应用性能工具来提升应用质量，那么，您应立即下载 Android Studio 3.0 Canary 1。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/rHiA66zUv8c&quot;&gt;Yutube视频演示地址：Android DevByte - Android Studio 3.0 Canary 1 中的新增功能&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio 3.0" scheme="https://goghtsui.github.io/tags/Android-Studio-3-0/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 使用之进阶篇</title>
    <link href="https://goghtsui.github.io/2017/05/10/Windows-10-%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/undefined/"/>
    <id>https://goghtsui.github.io/2017/05/10/Windows-10-%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87/undefined/</id>
    <published>2017-05-10T06:50:57.000Z</published>
    <updated>2021-01-26T02:34:57.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Windows 10 发布以来一直在使用，而且感觉很不错，为了使用更方便、更优雅，掌握一些小技巧还是非常必要的，内容不多，都是一些简单的日常可以使用的技巧及美化，可以适当提升一下逼格。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="透明任务栏"><a href="#透明任务栏" class="headerlink" title="透明任务栏"></a>透明任务栏</h3><p>有图有真相：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/transparent_bg.png" alt="img"></p><p>这个壁纸是系统自带的，如果搭配上你喜欢的壁纸，效果一定会更好的！我的桌面也是有文件的，隐藏、显示双击切换。</p><p>当然了，效果需要使用一个小软件，当然还有修改注册表的办法，大家自行解决。（重启电脑，需要重新启动软件设置）</p><p>下载地址：<a href="https://pan.baidu.com/s/1c26CXbU">TranslucentTB.2017.2</a></p><a id="more"></a><h3 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h3><p>其实桌面软件很多，大家可以自己了解一些，我这里用的是 Stardock Fences 2 ，可以分组或分类管理桌面文件，下面是软件的设置页面：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/winstartdock_fences_2.png" alt="Stardock Fences 2"></p><p>再来看看桌面的效果:</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/winstardock_desk.png" alt="stardock_desk"></p><p>右键桌面拖动松开，就可以创建分组。我不喜欢桌面太多文件，看着很乱，而且从存储空间来说桌面是占用C盘空间的，很宝贵的，所以我都是分类磁盘，不同的磁盘对应存储不同的文件及安装软件，区分开工作和生活的磁盘等方式，而不是直接放在桌面。</p><p>完全是个人喜欢问题，不喜勿喷。</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>win + R 启动运行，输入 cmd，启动命令行模式，命令行模式可以做很多事情的，可以告别鼠标和繁琐的操作了，逼格瞬间提升：</p><ul><li>calc   打开计算器</li><li>charmap  打开字符映射表</li><li>chkdsk.exe  磁盘检查（以管理员身份运行命令行模式）</li><li>cleanmgr  打开磁盘清理工具</li><li>自动关机 Shutdown -s -t 600   表示600秒后自动关机</li><li>shutdown -a   可取消定时关机</li><li>Shutdown -r -t 600   表示600秒后自动重启</li><li>control   控制面版</li><li>msdt    微软支持诊断工具</li><li>notepad    打开记事本</li><li>Rstrui    系统还原（谨慎使用）</li></ul><h3 id="滑动关机"><a href="#滑动关机" class="headerlink" title="滑动关机"></a>滑动关机</h3><p>win + R 打开运行，输入 <strong>slidetoshutdown</strong> 试试什么效果：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/slidedown.png" alt="slidedown"></p><p>输入以上命令执行会出现上面的关机界面，应该是占用半屏位置，由于截图触发按键，向上回弹了而已。我们只需要向下滑动就可以关机，如果不想关机，向上滑动就可以了。</p><p>如果觉得麻烦，想长期使用，可以添加一个桌面快捷方式：</p><ol><li>创建一个文本文</li><li>输入 <strong>slidetoshutdown</strong></li><li>将文本文档的txt后缀改成cmd或bat</li></ol><h3 id="一键结束进程"><a href="#一键结束进程" class="headerlink" title="一键结束进程"></a>一键结束进程</h3><p>Windows 10系统在运行程序较多时，有时会出现卡顿现象，想要关闭运行程序都难；Windows 10系统关机时，如果运行程序较多，一一结束运行程序，比较烦锁，而我们不关闭运行程序，系统就不能顺利关机或者关机速度慢。我们创建一个一键结束所有运行程序的快捷方式，就可以点击快捷方式，结束所有运行程序。创建一键结束所有运行程序的方法如下（正好还能使用上面的命令）：</p><ol><li><p>桌面右键新建或者命令行模式输入notepad新建一个文本</p></li><li><p>在文本文档中输入以下内容：</p><pre><code class="shell">taskkill /F /FI &quot;USERNAME eq xxx&quot; /FI &quot;IMAGENAME ne explorer.exe&quot; /FI &quot;IMAGENAME ne dwm.exe&quot;</code></pre><p>注意：将字符<strong>xxx</strong>内容<strong>替换为</strong>你的<strong>用户名</strong></p></li><li><p>桌面右键，选择【新建】-【快捷方式】</p></li><li><p>在打开的创建快捷方式窗口的【请键入对象的位置】栏，复制刚才的内容粘贴在这，点击【下一步】</p></li><li><p>在创建快捷方式 - 键入快捷方式的名称栏输入：一键结束进程（根据自己的需要命名），再点击【完成】</p></li><li><p>【非必需】替换自己喜欢的图标</p></li></ol><p>这样就在桌面上创建了一个快捷方式，关机时可以一键结束所有进程，是所有的，当然了关于taskkill命令自行脑补，可以自己定制快捷功能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>任何一个系统都是值得探索的，无论是手机还是PC，大家赶快搞起来吧！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;Windows 10 发布以来一直在使用，而且感觉很不错，为了使用更方便、更优雅，掌握一些小技巧还是非常必要的，内容不多，都是一些简单的日常可以使用的技巧及美化，可以适当提升一下逼格。&lt;/p&gt;
&lt;h2 id=&quot;技巧&quot;&gt;&lt;a href=&quot;#技巧&quot; class=&quot;headerlink&quot; title=&quot;技巧&quot;&gt;&lt;/a&gt;技巧&lt;/h2&gt;&lt;h3 id=&quot;透明任务栏&quot;&gt;&lt;a href=&quot;#透明任务栏&quot; class=&quot;headerlink&quot; title=&quot;透明任务栏&quot;&gt;&lt;/a&gt;透明任务栏&lt;/h3&gt;&lt;p&gt;有图有真相：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com/transparent_bg.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个壁纸是系统自带的，如果搭配上你喜欢的壁纸，效果一定会更好的！我的桌面也是有文件的，隐藏、显示双击切换。&lt;/p&gt;
&lt;p&gt;当然了，效果需要使用一个小软件，当然还有修改注册表的办法，大家自行解决。（重启电脑，需要重新启动软件设置）&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1c26CXbU&quot;&gt;TranslucentTB.2017.2&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Win 10" scheme="https://goghtsui.github.io/categories/Win-10/"/>
    
    
    <category term="Windows 10" scheme="https://goghtsui.github.io/tags/Windows-10/"/>
    
    <category term="Fences" scheme="https://goghtsui.github.io/tags/Fences/"/>
    
    <category term="cmd" scheme="https://goghtsui.github.io/tags/cmd/"/>
    
    <category term="slidetoshutdown" scheme="https://goghtsui.github.io/tags/slidetoshutdown/"/>
    
  </entry>
  
  <entry>
    <title>关于java.lang.String的intern()方法【基础篇】</title>
    <link href="https://goghtsui.github.io/2017/04/28/%E5%85%B3%E4%BA%8Ejava-lang-String%E7%9A%84intern-%E6%96%B9%E6%B3%95%E3%80%90%E5%9F%BA%E7%A1%80%E7%AF%87%E3%80%91/undefined/"/>
    <id>https://goghtsui.github.io/2017/04/28/%E5%85%B3%E4%BA%8Ejava-lang-String%E7%9A%84intern-%E6%96%B9%E6%B3%95%E3%80%90%E5%9F%BA%E7%A1%80%E7%AF%87%E3%80%91/undefined/</id>
    <published>2017-04-28T09:10:01.000Z</published>
    <updated>2021-01-26T02:34:57.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>相信在开发过程中，我们对字符串（String）的使用还是非常普遍的，但它也是很讲究的，像内存的占用、线程安全问题，都是需要注意的，无意中了解到一个新的api，就是intern() ，这个到底是干什么的呢？下面就带大家简单了解一下</p><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><h3 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h3><p>返回字符串对象的规范化表示形式。 </p><p>一个初始时为空的字符串池，它由类 String 私有地维护。<br>当调用 intern 方法时，如果池内已经包含一个等于此 String 对象的字符串（该对象由 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String 对象添加到池中，并且返回此 String 对象的引用。<br>它遵循对于任何两个字符串 s 和 t，当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。<br>所有字面值字符串和字符串赋值常量表达式都是内部的。字符串字面值在《Java Language Specification》的 §3.10.5 中已定义。 </p><a id="more"></a><p>返回：<br>一个字符串，内容与此字符串相同，但它保证来自字符串池中。</p><p>总结：<br>s.intern()方法执行的时候，会将池中的字符串与外部的字符串(s)进行比较，如果池中有与之相等的字符串，则不会将外部的字符串放到池中，返回的只是池中的字符串，如果不同则将外部字符串放入池中，并返回其字符串的句柄（引用）– 这样做的好处就是能够节约空间</p><h3 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h3><p>示例代码：</p><pre><code class="java">String a = new String(&quot;ab&quot;);String b = new String(&quot;ab&quot;);String c = &quot;ab&quot;;String d = &quot;a&quot; + &quot;b&quot;;String e = &quot;b&quot;;String f = &quot;a&quot; + e;System.out.println(b.intern() == a);System.out.println(b.intern() == c);System.out.println(b.intern() == d);System.out.println(b.intern() == f);System.out.println(b.intern() == a.intern());</code></pre><p>运行结果：</p><pre><code class="java">false true true false true </code></pre><p>结果分析：</p><p>首先说，字面值对应的是字符串池。</p><p>接下来说字符串的初始化，有以下形式：</p><pre><code class="java">// 这种创建方式肯定不会存入字符串池，且是一个全新的对象String str1 = new String(&quot;&quot;);// 这种方式会存储在字符串池(赋值的是：常量值)String str2 = &quot;hello&quot;;// 这种方式会存储在字符串池(赋值的是：常量值 + 常量值 = 常量值)String str3 = &quot;hello&quot; + &quot;world&quot;;// 这种方式也不会存储在字符串池(赋值的是：常量值 + 变量值 != 常量值)String str4 = str2 + &quot;world&quot;;</code></pre><p>那么对比结果分析：</p><ol><li>a、b 都是用了关键字 new 的方式初始化，c、d、e 直接赋值字符串，f 使用的是字符串常量 + 变量的形式，也不会进入字符串池</li><li>因此可以看出来，(b.intern() == a) 和 (b.intern() == c)，采用new 创建的字符串对象不进入字符串池，而且(b.intern() == d) 和 (b.intern() == f) 在字符串相加的时候，都是静态字符串的结果会添加到字符串池，如果其中含有变量（如f中的e）则不会进入字符串池中。但是字符串一旦进入字符串池中，就会先查找池中有无此对象。如果有此对象，则让对象引用指向此对象。如果无此对象，则先创建此对象，再让对象引用指向此对象。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;相信在开发过程中，我们对字符串（String）的使用还是非常普遍的，但它也是很讲究的，像内存的占用、线程安全问题，都是需要注意的，无意中了解到一个新的api，就是intern() ，这个到底是干什么的呢？下面就带大家简单了解一下&lt;/p&gt;
&lt;h2 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述&quot;&gt;&lt;/a&gt;功能描述&lt;/h2&gt;&lt;h3 id=&quot;官方解释&quot;&gt;&lt;a href=&quot;#官方解释&quot; class=&quot;headerlink&quot; title=&quot;官方解释&quot;&gt;&lt;/a&gt;官方解释&lt;/h3&gt;&lt;p&gt;返回字符串对象的规范化表示形式。 &lt;/p&gt;
&lt;p&gt;一个初始时为空的字符串池，它由类 String 私有地维护。&lt;br&gt;当调用 intern 方法时，如果池内已经包含一个等于此 String 对象的字符串（该对象由 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String 对象添加到池中，并且返回此 String 对象的引用。&lt;br&gt;它遵循对于任何两个字符串 s 和 t，当且仅当 s.equals(t) 为 true 时，s.intern() == t.intern() 才为 true。&lt;br&gt;所有字面值字符串和字符串赋值常量表达式都是内部的。字符串字面值在《Java Language Specification》的 §3.10.5 中已定义。 &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="String" scheme="https://goghtsui.github.io/tags/String/"/>
    
    <category term="intern" scheme="https://goghtsui.github.io/tags/intern/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 2.4 Preview 1 发布了！</title>
    <link href="https://goghtsui.github.io/2017/03/17/Android-Studio-2-4-Preview-1-%E5%8F%91%E5%B8%83%E4%BA%86%EF%BC%81/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/17/Android-Studio-2-4-Preview-1-%E5%8F%91%E5%B8%83%E4%BA%86%EF%BC%81/undefined/</id>
    <published>2017-03-17T03:14:12.000Z</published>
    <updated>2021-01-26T02:34:57.568Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 2.4 Preview 1 版本于2017年3月15日，由Chris Iremonger 发布。但是这个更新只发布到了Canary的开发渠道。所以你需要设置你的Android Studio的跟新渠道为 <strong>Canary</strong>，而且这是一个初期的版本，所以在接下来的几周会有更多的更新。到底这个版本做了哪些改进呢？让我们一睹为快吧：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>在Android Studio 2.4 Preview 1 中，我们升级了IDE从 IntelliJ 2016.2 到 2017.1 EAP，并在 <a href="https://www.jetbrains.com/idea/whatsnew/#v2016-3">2016.3</a>和<a href="https://blog.jetbrains.com/idea/2017/02/intellij-idea-2017-1-public-preview-java-9-debugger-vcs-search-editor-and-many-more/">2017.1</a> 中增加了许多新功能，包括参数提示，语义突出显示，搜索即时结果，等等。</li><li>许多新的 <strong>lint</strong> 检查</li></ul><h2 id="Instant-Run"><a href="#Instant-Run" class="headerlink" title="Instant Run"></a>Instant Run</h2><ul><li>Instant Run Debug <a href="https://code.google.com/p/android/issues/detail?id=234401">Issue 234401</a> 现在应该已经解决。如果程序在断点处暂停，则应用程序重新启动。但是如果应用程序没有在断点上暂停且当你只有一个方法实现更改时，它不应该重新启动而且热更新应该工作。</li></ul><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><ul><li><p>增量dex’ing。Dex’ing现在是在每个类级别完成的。这将允许更多增量，并会导致更快的增量构建。你应该也期望在使用传统多DEX的条件下，提高构建应用的速度（minSdkVersion &lt;21）</p></li><li><p>执行时的依赖性解析。在以前的版本中，依赖解析在Gradle配置期间发生。通过将依赖关系解析移动到执行期间</p><p>，你应该期望为大型项目改进配置时间。</p></li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li><p>在Mac上 Android Studio 被称为“Android Studio 2.4 Preview.app”，使你更容易运行的2.3。</p></li><li><p><em>设备文件浏览器</em> -无缝查看，直接在Android Studio中修改和与设备文件系统交互。此功能取代了以前通过DDMS完成设备文件系统的交互（<a href="https://developer.android.com/studio/profile/ddms.html">Dalvik的调试监控服务器）</a></p><a id="more"></a></li><li><p><img src="https://lh4.googleusercontent.com/_XRjD-mTv3eKoW-x1Q-VHs3foxEDbt2Xs0tmaFt1i1clcsHDKWd6cmH_RpjcOHRO4ICkhYVTtpbYyqM2Ne6JvcJs-xs22FqUBRnJb7nNYCN075BJ2R_7cAhzxV5Ty5gjF3VY-sLW" alt="img"></p></li></ul><h2 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h2><ul><li><p>如果你检查更新，它会告诉你有一个新版本 Android Studio 2.4 Preview 1（Build171.3804684） 。如果您已经安装了相同的版本，请不要尝试重新下载。我们将在 Android Studio 2.4 Preview 2 中修复。</p><p><a href="http://tools.android.com/download/studio/builds/android-studio-2-4-preview-1/Screen%20Shot%202017-03-14%20at%205.01.48%20PM.png?attredirects=0"><img src="https://sites.google.com/a/android.com/tools/_/rsrc/1489537129853/download/studio/builds/android-studio-2-4-preview-1/Screen%20Shot%202017-03-14%20at%205.01.48%20PM.png?height=173&width=400" alt="img"></a></p></li><li><p>Mac版本可能会提示您无法打开它，因为它是来自不明身份的开发人员。邮件似乎已签名，但有问题。我们将在预览2中更新它。如果您想在预览1中尝试，请右键单击并选择打开</p></li></ul><blockquote><p><a href="http://tools.android.com/recent/androidstudio24preview1isnowavailable">Android Studio 官方描述</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android Studio 2.4 Preview 1 版本于2017年3月15日，由Chris Iremonger 发布。但是这个更新只发布到了Canary的开发渠道。所以你需要设置你的Android Studio的跟新渠道为 &lt;strong&gt;Canary&lt;/strong&gt;，而且这是一个初期的版本，所以在接下来的几周会有更多的更新。到底这个版本做了哪些改进呢？让我们一睹为快吧：&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Android Studio 2.4 Preview 1 中，我们升级了IDE从 IntelliJ 2016.2 到 2017.1 EAP，并在 &lt;a href=&quot;https://www.jetbrains.com/idea/whatsnew/#v2016-3&quot;&gt;2016.3&lt;/a&gt;和&lt;a href=&quot;https://blog.jetbrains.com/idea/2017/02/intellij-idea-2017-1-public-preview-java-9-debugger-vcs-search-editor-and-many-more/&quot;&gt;2017.1&lt;/a&gt; 中增加了许多新功能，包括参数提示，语义突出显示，搜索即时结果，等等。&lt;/li&gt;
&lt;li&gt;许多新的 &lt;strong&gt;lint&lt;/strong&gt; 检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Instant-Run&quot;&gt;&lt;a href=&quot;#Instant-Run&quot; class=&quot;headerlink&quot; title=&quot;Instant Run&quot;&gt;&lt;/a&gt;Instant Run&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Instant Run Debug &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=234401&quot;&gt;Issue 234401&lt;/a&gt; 现在应该已经解决。如果程序在断点处暂停，则应用程序重新启动。但是如果应用程序没有在断点上暂停且当你只有一个方法实现更改时，它不应该重新启动而且热更新应该工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Build&quot;&gt;&lt;a href=&quot;#Build&quot; class=&quot;headerlink&quot; title=&quot;Build&quot;&gt;&lt;/a&gt;Build&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;增量dex’ing。Dex’ing现在是在每个类级别完成的。这将允许更多增量，并会导致更快的增量构建。你应该也期望在使用传统多DEX的条件下，提高构建应用的速度（minSdkVersion &amp;lt;21）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行时的依赖性解析。在以前的版本中，依赖解析在Gradle配置期间发生。通过将依赖关系解析移动到执行期间&lt;/p&gt;
&lt;p&gt;，你应该期望为大型项目改进配置时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Mac上 Android Studio 被称为“Android Studio 2.4 Preview.app”，使你更容易运行的2.3。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;设备文件浏览器&lt;/em&gt; -无缝查看，直接在Android Studio中修改和与设备文件系统交互。此功能取代了以前通过DDMS完成设备文件系统的交互（&lt;a href=&quot;https://developer.android.com/studio/profile/ddms.html&quot;&gt;Dalvik的调试监控服务器）&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio 2.4 Preview" scheme="https://goghtsui.github.io/tags/Android-Studio-2-4-Preview/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 2.3全面解析</title>
    <link href="https://goghtsui.github.io/2017/03/15/Android-Studio-2-3%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/15/Android-Studio-2-3%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/undefined/</id>
    <published>2017-03-15T11:30:32.000Z</published>
    <updated>2021-01-26T02:34:57.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><img src="https://developer.android.google.cn/images/develop/hero_image_studio5.png" alt="img"></p><p>Android Studio 2.3 已提供下载了，下面让我们来看看官方的描述：</p><p>Android Studio 2.3 中最令人激动的是质量上的改进，但此版本也加入了少量新功能，它们集成到了开发流程的每一个阶段：</p><ul><li>设计应用时，请充分利用面向应用图像的更新版 WebP 支持，也请了解一下更新版ConstraintLayout 内容库支持以及布局编辑器中的小部件选项板。</li><li>在开发过程中，Android Studio 新增了一个应用链接助手，它可以帮助您构建一个应用 URI 合并视图，方便您统一查看应用内的 URI。</li><li>在构建和部署应用时，使用更新版运行按钮可获得更加直观而又可靠的 Instant Run 体验。</li><li>最后，在使用 Android Emulator 测试应用时，您现在可以获得充分的文本复制与粘贴支持。</li></ul><a id="more"></a><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="1-Instant-Run-改进和-UI-变化"><a href="#1-Instant-Run-改进和-UI-变化" class="headerlink" title="1. Instant Run 改进和 UI 变化"></a>1. Instant Run 改进和 UI 变化</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/XShGH9kwwEqJTnNBk1OR.png" alt="img"></p><p>新增的 Instant Run 按钮操作</p><p>为体现对质量的重视，我们在 Android Studio 2.3 中对 Instant Run 进行了一些重大更改，以提高该功能的可靠性。Run 操作现在一律会导致应用重新启动，以便让可能需要重新启动的代码更改生效，新增的 Apply Changes 操作会尝试在应用运行时改写代码。为提升可靠性，底层实现进行了大幅度改动，并且还消灭了支持 Instant Run 应用的启动延迟。</p><p><strong><a href="developer.android.google.cn/studio/run/index.html#instant-run">了解详情</a></strong></p><h3 id="2-构建缓存"><a href="#2-构建缓存" class="headerlink" title="2. 构建缓存"></a>2. 构建缓存</h3><p>在 Android Studio 2.2 中引入但默认情况下处于停用状态，是一项旨在加快 Android Studio 中构建速度的底层构建优化。由于缓存了分解的 AAR 和 pre-dexed 外部内容库，因此缓存的新构建可加快干净构建的速度。在 Android Studio 2.3 中，这个用户范围构建缓存现在默认情况下处于启用状态。</p><p><strong><a href="developer.android.google.cn/studio/build/build-cache.html">了解详情</a></strong></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="1-约束布局中的链接和比例支持"><a href="#1-约束布局中的链接和比例支持" class="headerlink" title="1. 约束布局中的链接和比例支持"></a>1. 约束布局中的链接和比例支持</h3><p>Android Studio 2.3 加入了稳定版 ConstraintLayout 在此版本的 ConstraintLayout,  中，您现在可以将两个或更多个 Android 视图双向链接起来，在一个维度上组成一组。如果您想让两个视图紧邻，但又想将它们散布在空白区域上，此功能就很有帮助。</p><p><a href="developer.android.google.cn/training/constraint-layout/index.html#constrain-chain">了解详情</a></p><p><img src="https://dn-sdkcnssl.qbox.me/editor/dFGfmPLZFugn3WOT2U-h.gif" alt="img"></p><p>约束布局链接</p><p>ConstraintLayout 还支持比例，如果您想在包含布局展开和收缩时保持小部件的纵横比，比例会很有帮助。详细了解有关比例的信息。此外，ConstraintLayout 中的链接和比例还能支持通过 ConstraintSet API 进行编程创建。</p><p><img src="https://dn-sdkcnssl.qbox.me/editor/6x8flT1GTfNTzpyBJYJy.gif" alt="img"></p><p>约束布局比例</p><h3 id="2-布局编辑器选项板"><a href="#2-布局编辑器选项板" class="headerlink" title="2. 布局编辑器选项板"></a>2. 布局编辑器选项板</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/Cc9xclVGBUH2bO5-wHnG.jpg" alt="img"></p><p>布局编辑器小部件选项板  </p><p>布局编辑器中的小部件选项板进行了更新，让您可以通过搜索、排序和过滤找到布局所需的小部件，还能让您先预览小部件，然后再拖动到设计界面上。</p><p><a href="developer.android.google.cn/studio/write/layout-editor.html">了解详情</a></p><h3 id="3-布局收藏夹"><a href="#3-布局收藏夹" class="headerlink" title="3. 布局收藏夹"></a>3. 布局收藏夹</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/7TzNkL1gYCL8tFvsIHA5.gif" alt="img"></p><p>布局编辑器 Properties 面板上的 Favorites Attributes    </p><p>布局编辑器的 Properties 面板进行了更新，您现在可以小部件为单位保存自己最爱用的属性。只需在高级面板中给属性加注星标，属性即会出现在 Favorites 部分中。</p><p><a href="developer.android.google.cn/studio/write/layout-editor.html#edit-properties">了解详情</a></p><h3 id="4-WebP-支持"><a href="#4-WebP-支持" class="headerlink" title="4. WebP 支持"></a>4. WebP 支持</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/nqggzN4Boly6qjWMdvUf.jpg" alt="img"></p><p>WebP 图像转换向导</p><p>为帮助您在 APK 中节省空间，Android Studio 现在可以利用项目中的 PNG 资源生成 WebP 图像。WebP 无损格式的体积最多可比 PNG 小 25%。</p><p>Android Studio 2.3 新增了一个向导，可通过它将 PNG 转换成无损 WebP，还能用来检查有损 WebP 的编码。右键点击任何非启动器 PNG 文件便可将其转换为 WebP 格式。并且如果您需要编辑图像，还可以右键点击项目中的任何 WebP 文件，将其转换回 PNG 格式。</p><p><a href="developer.android.google.cn/studio/write/convert-webp.html">了解详情</a></p><h3 id="5-材料图标向导更新"><a href="#5-材料图标向导更新" class="headerlink" title="5. 材料图标向导更新"></a>5. 材料图标向导更新</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/UOvdSihvuRJjRJTkkNCj.jpg" alt="img"></p><p>矢量资源向导    </p><p>矢量资源向导进行了更新，支持搜索和过滤，此外还为每个图标资源提供了标签。</p><p><a href="developer.android.google.cn/studio/write/vector-asset-studio.html#materialicon">了解详情</a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="1-Lint-基线"><a href="#1-Lint-基线" class="headerlink" title="1. Lint 基线"></a>1. Lint 基线</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/Pa-WCqOO9ydG4huXIByM.jpg" alt="img"></p><p>Lint 基线支持</p><p>在 Android Studio 2.3 中，您可以将未解决的 Lint 警告设置为项目中的基线。从那一刻开始，Lint 将只报告新问题。如果应用存在许多旧的 Lint 问题，但您只想集中精力解决新问题，此功能会很有帮助。</p><p><a href="developer.android.google.cn/studio/write/lint.html#snapshot">了解详情</a></p><h3 id="2-应用链接助手"><a href="#2-应用链接助手" class="headerlink" title="2. 应用链接助手"></a>2. 应用链接助手</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/lyqZFbrup2YQSFdBBEAk.jpg" alt="img"></p><p>应用链接助手    </p><p>Android Studio 现在进一步简化了应用内 Android 应用链接支持。您可以通过新增的应用链接助手轻松创建新的网址 Intent 过滤器，通过数字资源链接文件声明应用的网站关联，以及进行 Android 应用链接支持测试。要访问应用链接助手，请转到以下菜单位置：Tools → App Link Assistant。</p><p><a href="developer.android.google.cn/studio/write/app-link-indexing.html">了解详情</a></p><h3 id="3-模板更新"><a href="#3-模板更新" class="headerlink" title="3. 模板更新"></a>3. 模板更新</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/cJz4HsqwR4EfVhxJFAyG.jpg" alt="img"></p><p>新增的项目向导模板    </p><p>默认情况下，Android Studio 2.3 中所有过去包含 RelativeLayout 的模板现在均使用 ConstraintLayout。了解有关模板和约束布局的更多信息。我们还新增了一个 Bottom Navigation Activity 模板，它实现的是底部导航 Material Design 规范。</p><h3 id="4-IntelliJ-平台更新"><a href="#4-IntelliJ-平台更新" class="headerlink" title="4. IntelliJ 平台更新"></a>4. IntelliJ 平台更新</h3><p>Android Studio 2.3 加入了 IntelliJ 2016.2 版，其中包含更新版检查窗口和通知系统等增强功能。</p><p><a href="www.jetbrains.com/idea/whatsnew/#v2016-2">了解详情</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1-Android-Emulator-复制与粘贴"><a href="#1-Android-Emulator-复制与粘贴" class="headerlink" title="1. Android Emulator 复制与粘贴"></a>1. Android Emulator 复制与粘贴</h3><p><img src="https://dn-sdkcnssl.qbox.me/editor/FNljRl5nEY6Wt6FFfQXq.gif" alt="img"></p><p>Android Emulator 中的复制与粘贴支持   </p><p>应普遍要求，我们在最新版 Emulator (v25.3.1) 中恢复了复制与粘贴功能。我们在 Android Emulator 与主机操作系统之间建立了一个共享剪贴板，以便您在两个环境之间复制文本。复制与粘贴兼容 x86 Google API Emulator 系统映像 API 级别 19 (Android 4.4 - Kitkat) 及更高版本。</p><h3 id="2-Android-Emulator-命令行工具"><a href="#2-Android-Emulator-命令行工具" class="headerlink" title="2. Android Emulator 命令行工具"></a>2. Android Emulator 命令行工具</h3><p>从 Android SDK Tools 25.3 开始，我们将 emulator 从 SDK Tools 文件夹移至一个单独的 emulator 目录，还弃用了“android avd”命令，并将其替换为独立的 avdmanager 命令。emulator和“android avd”之前的命令行参数仍兼容更新后的工具。我们还为 emulator 命令添加了位置重定向。</p><p>不过，如果您直接通过命令行创建 Android Virtual Device (AVD)，则应更新所有相应脚本。如果您通过 Android Studio 2.3 使用 Android Emulator，这些变动将不会影响您的工作流。</p><p><a href="developer.android.google.cn/studio/releases/sdk-tools.html">了解详情</a></p><h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><p>扼要重述一下，Android Studio 2.3 包含下列以及其他新功能：</p><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><ul><li>Lint 基线</li><li>更新版 Lint 检查与注解</li><li>应用链接助手</li><li>模板中默认情况下使用约束布局</li><li>Intellij 平台更新 2016.2</li></ul><h3 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h3><ul><li>Instant Run UI 变化</li><li>构建缓存</li></ul><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><ul><li>约束布局链接与比例</li><li>布局编辑器中的小部件选项板</li><li>属性检查器中的收藏夹</li><li>WebP 支持</li><li>查找材料图标向导</li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ul><li>Emulator 复制与粘贴</li><li>Emulator 命令行工具</li></ul><p><a href="developer.android.google.cn/studio/index.html">有关 Android Studio 2.3 的详情，请参阅版本说明</a></p><h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>如果您使用的是早期版本的 Android Studio，可以在导航菜单中检查有无稳定版更新（Help → Check for Update [适用于 Windows/Linux]，或者 Android Studio → Check for Updates [适用于 OS X]）。</p><p><a href="developer.android.google.cn/studio/index.html">您还可以从官方下载页面下载 Android Studio 2.3</a></p><p>要充分利用 Android Studio 中所有新增的功能和改进，还应将您当前应用项目中的 Android Gradle 插件版本更新到 2.3.0</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://developer.android.google.cn/images/develop/hero_image_studio5.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android Studio 2.3 已提供下载了，下面让我们来看看官方的描述：&lt;/p&gt;
&lt;p&gt;Android Studio 2.3 中最令人激动的是质量上的改进，但此版本也加入了少量新功能，它们集成到了开发流程的每一个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计应用时，请充分利用面向应用图像的更新版 WebP 支持，也请了解一下更新版ConstraintLayout 内容库支持以及布局编辑器中的小部件选项板。&lt;/li&gt;
&lt;li&gt;在开发过程中，Android Studio 新增了一个应用链接助手，它可以帮助您构建一个应用 URI 合并视图，方便您统一查看应用内的 URI。&lt;/li&gt;
&lt;li&gt;在构建和部署应用时，使用更新版运行按钮可获得更加直观而又可靠的 Instant Run 体验。&lt;/li&gt;
&lt;li&gt;最后，在使用 Android Emulator 测试应用时，您现在可以获得充分的文本复制与粘贴支持。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio 2.3" scheme="https://goghtsui.github.io/tags/Android-Studio-2-3/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》6-3之服务器</title>
    <link href="https://goghtsui.github.io/2017/03/13/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-3%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/13/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-3%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/undefined/</id>
    <published>2017-03-13T11:54:42.000Z</published>
    <updated>2021-01-26T02:34:57.590Z</updated>
    
    <content type="html"><![CDATA[<p>工程规约 - 服务器规约</p><ol><li><p>【推荐】高并发服务器建议调小 TCP 协议的 time _ wait 超时时间。<br>说明：操作系统默认 240 秒后，才会关闭处于 time _ wait 状态的连接，在高并发访问下，服<br>务器端会因为处于 time _ wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上<br>调小此等待值。<br>正例：在 linux 服务器上请通过变更/ etc / sysctl . conf 文件去修改该缺省值 （ 秒 ） ：</p><pre><code class="shell">net . ipv 4. tcp _ fin _ timeout = 30</code></pre></li><li><p>【推荐】调大服务器所支持的最大文件句柄数 （File Descriptor ，简写为 fd） 。<br>说明：主流操作系统的设计是将 TCP / UDP 连接采用与文件一样的方式去管理，即一个连接对<br>应于一个 fd 。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很<br>容易因为 fd 不足而出现“ open too many files ”错误，导致新的连接无法建立。 建议将 linux<br>服务器所支持的最大句柄数调高数倍 （ 与服务器的内存数量相关 ） 。</p></li><li><p>【推荐】给 JVM 设置- XX :+ HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出<br>dump 信息。<br>说明： OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错<br>非常有价值。</p></li><li><p>【推荐】在线上生产环境， JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC 后调整堆<br>大小带来的压力。</p></li><li><p>【参考】服务器内部重定向使用 forward； 外部重定向地址使用 URL 拼装工具类来生成，否则<br>会带来 URL 维护不一致的问题和潜在的安全风险。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工程规约 - 服务器规约&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【推荐】高并发服务器建议调小 TCP 协议的 time _ wait 超时时间。&lt;br&gt;说明：操作系统默认 240 秒后，才会关闭处于 time _ wait 状态的连接，在高并发访问下，服&lt;br&gt;务器端会因为处于 </summary>
      
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="服务器规约" scheme="https://goghtsui.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》6-2之二方库规约</title>
    <link href="https://goghtsui.github.io/2017/03/08/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-2%E4%B9%8B%E4%BA%8C%E6%96%B9%E5%BA%93%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/08/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-2%E4%B9%8B%E4%BA%8C%E6%96%B9%E5%BA%93%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-03-08T06:24:34.000Z</published>
    <updated>2021-01-26T02:34:57.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工程规约-二方库规约"><a href="#工程规约-二方库规约" class="headerlink" title="工程规约 - 二方库规约"></a>工程规约 - 二方库规约</h2><ol><li><p>【强制】定义 GAV 遵从以下规则：<br>1 ） G GroupID 格式： com .{公司/ BU }.业务线. [ 子业务线 ] ，最多 4 级。<br>说明：{公司/ BU } 例如： alibaba / taobao / tmall / aliexpress 等 BU 一级 ； 子业务线可选。<br>正例： com . taobao . jstorm 或  com.alibaba.dubbo.register<br>2 ） A ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。<br>正例： dubbo - client /  fastjson - api /  jstorm - tool<br>3 ） V Version ：详细规定参考下方。</p></li><li><p>【强制】二方库版本号命名方式：主版本号.次版本号.修订号</p><p>1 ） 主版本号 主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。<br>2 ） 次版本号 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。<br>3 ） 修订号 修订号：保持完全兼容性，修复 BUG 、新增次要功能特性等</p><p>说明：注意起始版本号必须为： 1.0.0 ，而不是 0.0.1 正式发布的类库必须先去中央仓库进<br>行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：1.3.3，那么下一个<br>合理的版本号：1.3.4 或 1.4.0 或 2.0.0</p></li><li><p>【强制】线上应用不要依赖 SNAPSHOT 版本 （ 安全包除外 ）。<br>说明：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p><a id="more"></a></li><li><p>【强制】二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，<br>必须明确评估和验证，建议进行 dependency : resolve 前后信息比对，如果仲裁结果完全不一<br>致，那么通过 dependency : tree 命令，找出差异点，进行&lt; excludes &gt;排除 jar 包。</p></li><li><p>【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚<br>举类型或者包含枚举类型的 POJO 对象。</p></li><li><p>【强制】依赖于一个二方库群时，必须定义一个统一版本变量，避免版本号不一致。<br>说明：依赖 springframework - core ,- context ,- beans ，它们都是同一个版本，可以定义一<br>个变量来保存版本：${ spring . version }，定义依赖的时候，引用该版本。</p></li><li><p>【强制】禁止在子项目的 pom 依赖中出现相同的 GroupId ，相同的 ArtifactId ，但是不同的<br>Version 。</p><p>说明：在本地调试时会使用各子项目指定的版本号，但是合并成一个 war ，只能有一个版本号<br>出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。</p></li><li><p>【推荐】所有 pom 文件中的依赖声明放在&lt; dependencies &gt;语句块中，所有版本仲裁放在<br>&lt; dependencyManagement &gt;语句块中。<br>说明：&lt; dependencyManagement &gt;里只是声明版本，并不实现引入，因此子项目需要显式的声<br>明依赖， version 和 scope 都读取自父 pom 。而&lt; dependencies &gt;所有声明在主 pom 的<br>&lt; dependencies &gt;里的依赖都会自动引入，并默认被所有的子项目继承。</p></li><li><p>【推荐】二方库尽量不要有配置项，最低限度不要再增加配置项。</p></li><li><p>【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：<br>1 ） 精简可控原则。移除一切不必要的 API 和依赖，只包含  Service API 、必要的领域模型对<br>象、 Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用<br>者去依赖具体版本号 ； 无 log 具体实现，只依赖日志框架。<br>2 ） 稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能<br>方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;工程规约-二方库规约&quot;&gt;&lt;a href=&quot;#工程规约-二方库规约&quot; class=&quot;headerlink&quot; title=&quot;工程规约 - 二方库规约&quot;&gt;&lt;/a&gt;工程规约 - 二方库规约&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】定义 GAV 遵从以下规则：&lt;br&gt;1 ） G GroupID 格式： com .{公司/ BU }.业务线. [ 子业务线 ] ，最多 4 级。&lt;br&gt;说明：{公司/ BU } 例如： alibaba / taobao / tmall / aliexpress 等 BU 一级 ； 子业务线可选。&lt;br&gt;正例： com . taobao . jstorm 或  com.alibaba.dubbo.register&lt;br&gt;2 ） A ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。&lt;br&gt;正例： dubbo - client /  fastjson - api /  jstorm - tool&lt;br&gt;3 ） V Version ：详细规定参考下方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】二方库版本号命名方式：主版本号.次版本号.修订号&lt;/p&gt;
&lt;p&gt;1 ） 主版本号 主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。&lt;br&gt;2 ） 次版本号 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。&lt;br&gt;3 ） 修订号 修订号：保持完全兼容性，修复 BUG 、新增次要功能特性等&lt;/p&gt;
&lt;p&gt;说明：注意起始版本号必须为： 1.0.0 ，而不是 0.0.1 正式发布的类库必须先去中央仓库进&lt;br&gt;行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：1.3.3，那么下一个&lt;br&gt;合理的版本号：1.3.4 或 1.4.0 或 2.0.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】线上应用不要依赖 SNAPSHOT 版本 （ 安全包除外 ）。&lt;br&gt;说明：不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="二方库规约" scheme="https://goghtsui.github.io/tags/%E4%BA%8C%E6%96%B9%E5%BA%93%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》6-1之应用分层</title>
    <link href="https://goghtsui.github.io/2017/03/08/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-1%E4%B9%8B%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/08/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B6-1%E4%B9%8B%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82/undefined/</id>
    <published>2017-03-08T06:22:48.000Z</published>
    <updated>2021-01-26T02:34:57.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工程规约-应用分层"><a href="#工程规约-应用分层" class="headerlink" title="工程规约 - 应用分层"></a>工程规约 - 应用分层</h2><blockquote><p>修改项：第 1、3 项</p></blockquote><ol><li><p>【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于<br>Web 层，也可以直接依赖于 Service 层，依此类推：</p><ul><li>开放接口层：可直接封装 Service 方法暴露成 RPC 接口 ； 通过 Web 封装成 http 接口 ；进行<br>网关安全控制、流量控制等</li></ul></li></ol><ul><li>各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染， JS 渲染，<br>JSP 渲染，移动端展示等。</li></ul><ul><li><p>Web 层 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p></li><li><p>Service 层 层：相对具体的业务逻辑服务层。</p></li><li><p>Manager 层 层：通用业务处理层，它有如下特征：</p><p>1） 对第三方平台封装的层，预处理返回结果及转化异常信息 ；</p><p>2）对 Service 层通用能力的下沉，如缓存方案、中间件通用处理 ；</p><p>3）与 DAO 层交互，对 DAO 的业务通用能力的封装。</p></li><li><p>DAO 层：数据访问层，与底层 MySQL 、 Oracle 、 Hbase 进行数据交互。</p></li><li><p>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</p></li></ul><ol start="2"><li><p>【参考】  （ 分层异常处理规约 ） 在 DAO 层，产生的异常类型有很多，无法用细粒度异常进行<br>catch ，使用 catch(Exception e) 方式，并 throw new DAOException(e) ，不需要打印日志，<br>因为日志在 Manager / Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日<br>志，浪费性能和存储。在 Service 层出现异常时，必须记录日志信息到磁盘，尽可能带上参数<br>信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO 层处理<br>一致，如果是单独部署，则采用与 Service 一致的处理方式。 Web 层绝不应该继续往上抛异常，<br>因为已经处于顶层，无继续处理异常的方式，如果意识到这个异常将导致页面无法正常渲染，<br>那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处<br>理成错误码和错误信息方式返回。</p></li><li><p>【参考】分层领域模型规约：</p><ul><li>DO（Data Object） ：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li>DTO（Data Transfer Object） ：数据传输对象， Service 和 Manager 向外传输的对象。</li><li>BO（Business Object） ：业务对象。可以由 Service 层输出的封装业务逻辑的对象。</li><li>AO（Application Object） ：应用对象。在 Web 层与 Service 层之间抽象的复用对象模型，<br>极为贴近展示层，复用度不高。</li><li>QUERY ：数据查询对象，各层接收上层的查询请求。注：超过 2 个参数的查询封装，禁止<br>使用 Map 类来传输。</li><li>VO（View Object） ：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li></ul></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;工程规约-应用分层&quot;&gt;&lt;a href=&quot;#工程规约-应用分层&quot; class=&quot;headerlink&quot; title=&quot;工程规约 - 应用分层&quot;&gt;&lt;/a&gt;工程规约 - 应用分层&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 1、3 项&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="应用分层" scheme="https://goghtsui.github.io/tags/%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》5-4之ORM映射</title>
    <link href="https://goghtsui.github.io/2017/03/03/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-4%E4%B9%8BORM%E6%98%A0%E5%B0%84/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/03/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-4%E4%B9%8BORM%E6%98%A0%E5%B0%84/undefined/</id>
    <published>2017-03-03T07:18:09.000Z</published>
    <updated>2021-01-26T02:34:57.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ORM-规约"><a href="#ORM-规约" class="headerlink" title="ORM  规约"></a>ORM  规约</h2><blockquote><p>修改项：第 3 项、第 4 项、第 5 项、第 6 项</p></blockquote><ol><li><p>【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。<br>说明：1 ） 增加查询分析器解析成本。2 ） 增减字段容易与 resultMap 配置不一致。</p></li><li><p>【强制】 POJO 类的 boolean 属性不能加 is ，而数据库字段必须加 is _，要求在 resultMap 中<br>进行字段与属性之间的映射。</p><p>说明：参见定义 POJO 类以及数据库字段定义规定，在 <resultMap>中 增加映射，是必须的。<br>在 MyBatis Generator 生成的代码中，需要进行对应的修改。</p></li><li><p>【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需<br>要定义 ； 反过来，每一个表也必然有一个与之对应。<br>说明：配置映射关系，使字段与 DO 类解耦，方便维护。</p></li><li><p>【强制】sql. xml 配置参数使用：#{}，# param # 不要使用${} 此种方式容易出现 SQL 注入。</p></li></ol><a id="more"></a><ol start="5"><li><p>【强制】 iBATIS 自带的 queryForList(String statementName , int start , int size) 不推<br>荐使用。</p><p>说明：其实现方式是在数据库取到 statementName 对应的 SQL 语句的所有记录，再通过 subList<br>取 start , size 的子集合。<br>正例：</p><pre><code class="java">Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();map.put(&quot;start&quot;, start);map.put(&quot;size&quot;, size);</code></pre></li><li><p>【强制】不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。</p><p>说明： resultClass=”Hashtable” ，会置入字段名和属性值，但是值的类型不可控。</p></li><li><p>【强制】更新数据表记录时，必须同时更新记录对应的 gmt _ modified 字段值为当前时间。</p></li><li><p>【推荐】不要写一个大而全的数据更新接口，传入为 POJO 类，不管是不是自己的目标更新字<br>段，都进行 update table set c1=value1,c2=value2,c3=value3;  这是不对的。执行 SQL<br>时，尽量不要更新无改动的字段，一是易出错 ； 二是效率低 ； 三是 binlog 增加存储。</p></li><li><p>【参考】@ Transactional 事务不要滥用。事务会影响数据库的 QPS ，另外使用事务的地方需<br>要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></li><li><p>【参考】&lt; isEqual &gt;中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带<br>上此条件 ； &lt; isNotEmpty &gt;表示不为空且不为 null 时执行 ； &lt; isNotNull &gt;表示不为 null 值时<br>执行。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ORM-规约&quot;&gt;&lt;a href=&quot;#ORM-规约&quot; class=&quot;headerlink&quot; title=&quot;ORM  规约&quot;&gt;&lt;/a&gt;ORM  规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 3 项、第 4 项、第 5 项、第 6 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。&lt;br&gt;说明：1 ） 增加查询分析器解析成本。2 ） 增减字段容易与 resultMap 配置不一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】 POJO 类的 boolean 属性不能加 is ，而数据库字段必须加 is _，要求在 resultMap 中&lt;br&gt;进行字段与属性之间的映射。&lt;/p&gt;
&lt;p&gt;说明：参见定义 POJO 类以及数据库字段定义规定，在 &lt;resultMap&gt;中 增加映射，是必须的。&lt;br&gt;在 MyBatis Generator 生成的代码中，需要进行对应的修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需&lt;br&gt;要定义 ； 反过来，每一个表也必然有一个与之对应。&lt;br&gt;说明：配置映射关系，使字段与 DO 类解耦，方便维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】sql. xml 配置参数使用：#{}，# param # 不要使用${} 此种方式容易出现 SQL 注入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="ORM映射" scheme="https://goghtsui.github.io/tags/ORM%E6%98%A0%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》5-3之SQL语句</title>
    <link href="https://goghtsui.github.io/2017/03/03/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-3%E4%B9%8BSQL%E8%AF%AD%E5%8F%A5/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/03/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-3%E4%B9%8BSQL%E8%AF%AD%E5%8F%A5/undefined/</id>
    <published>2017-03-03T07:17:46.000Z</published>
    <updated>2021-01-26T02:34:57.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-规约"><a href="#SQL-规约" class="headerlink" title="SQL  规约"></a>SQL  规约</h2><blockquote><p>修改项：第 4 项</p></blockquote><ol><li>【强制】不要使用 count( 列名 ) 或 count( 常量 ) 来替代 count( * ) ， count( * ) 就是 SQL 92 定义<br>的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br>说明： count( * ) 会统计值为 NULL 的行，而 count( 列名 ) 不会统计此列为 NULL 值的行。</li><li>【强制】 count(distinct col) 计算该列除 NULL 之外的不重复数量。注意  count(distinct<br>col 1,  col 2 ) 如果其中一列全为 NULL ，那么即使另一列有不同的值，也返回为 0。</li><li>【强制】当某一列的值全是 NULL 时， count(col) 的返回结果为 0，但 sum(col) 的返回结果为<br>NULL ，因此使用 sum() 时需注意 NPE 问题。<br>正例：可以使用如下方式来避免 sum 的 NPE 问题： SELECT IF(ISNULL(SUM(g)) ,0, SUM(g))<br>FROM table;</li></ol><a id="more"></a><ol start="4"><li>【强制】使用 ISNULL() 来判断是否为 NULL 值。<br>说明： NULL 与任何值的直接比较都为 NULL。<br>1 ） NULL&lt;&gt;NULL 的返回结果是 NULL ，而不是 false 。<br>2 ） NULL=NULL 的返回结果是 NULL ，而不是 true 。<br>3 ） NULL&lt;&gt;1 的返回结果是 NULL ，而不是 true </li><li>【强制】 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</li><li>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。<br>说明： （ 概念解释 ） 学生表中的 student _ id 是主键，那么成绩表中的 student _ id 则为外键。<br>如果更新学生表中的 student _ id ，同时触发成绩表中的 student _ id 更新，则为级联更新。<br>外键与级联更新适用于单机低并发，不适合分布式、高并发集群 ； 级联更新是强阻塞，存在数<br>据库更新风暴的风险 ； 外键影响数据库的插入速度。</li><li>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</li><li>【强制】数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执<br>行更新语句。</li><li>【推荐】 in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控<br>制在 1000 个之内。</li><li>【参考】如果有全球化需要，所有的字符存储与表示，均以 utf -8 编码，那么字符计数方法<br>注意：<br>说明：<br>SELECT LENGTH( “轻松工作” )； 返回为 12<br>SELECT CHARACTER _ LENGTH( “轻松工作” )； 返回为 4<br>如果要使用表情，那么使用 utfmb 4 来进行存储，注意它与 utf -8 编码的区别。</li><li>【参考】  TRUNCATE TABLE 比  DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE<br>无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。<br>说明： TRUNCATE TABLE 在功能上与不带  WHERE 子句的  DELETE 语句相同。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SQL-规约&quot;&gt;&lt;a href=&quot;#SQL-规约&quot; class=&quot;headerlink&quot; title=&quot;SQL  规约&quot;&gt;&lt;/a&gt;SQL  规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 4 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;【强制】不要使用 count( 列名 ) 或 count( 常量 ) 来替代 count( * ) ， count( * ) 就是 SQL 92 定义&lt;br&gt;的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。&lt;br&gt;说明： count( * ) 会统计值为 NULL 的行，而 count( 列名 ) 不会统计此列为 NULL 值的行。&lt;/li&gt;
&lt;li&gt;【强制】 count(distinct col) 计算该列除 NULL 之外的不重复数量。注意  count(distinct&lt;br&gt;col 1,  col 2 ) 如果其中一列全为 NULL ，那么即使另一列有不同的值，也返回为 0。&lt;/li&gt;
&lt;li&gt;【强制】当某一列的值全是 NULL 时， count(col) 的返回结果为 0，但 sum(col) 的返回结果为&lt;br&gt;NULL ，因此使用 sum() 时需注意 NPE 问题。&lt;br&gt;正例：可以使用如下方式来避免 sum 的 NPE 问题： SELECT IF(ISNULL(SUM(g)) ,0, SUM(g))&lt;br&gt;FROM table;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="SQL语句" scheme="https://goghtsui.github.io/tags/SQL%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》5-2之索引规约</title>
    <link href="https://goghtsui.github.io/2017/03/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-2%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89%E3%80%8B5-2%E4%B9%8B%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-03-01T06:52:21.000Z</published>
    <updated>2021-01-26T02:34:57.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-索引规约"><a href="#MySQL-索引规约" class="headerlink" title="MySQL - 索引规约"></a>MySQL - 索引规约</h2><blockquote><p>修改项：第 1 项、 第 11 项</p><p>新增项：第10 项</p></blockquote><ol><li>【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。<br>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明<br>显的 ； 另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必<br>然有脏数据产生。</li><li>【强制】 超过三个表禁止 join 。需要 join 的字段，数据类型保持绝对一致 ； 多表关联查询<br>时，保证被关联的字段需要有索引。<br>说明：即使双表 join 也要注意表索引、 SQL 性能。</li></ol><a id="more"></a><ol start="3"><li><p>【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据<br>实际文本区分度决定索引长度。<br>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分<br>度会高达 90%以上，可以使用 count(distinct left( 列名, 索引长度 )) / count( * ) 的区分度<br>来确定。</p></li><li><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>说明：索引文件具有 B - Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索<br>引。</p></li><li><p>【推荐】如果有 order by 的场景，请注意利用索引的有序性。 order by 最后的字段是组合<br>索引的一部分，并且放在索引组合顺序的最后，避免出现 file _ sort 的情况，影响查询性能。<br>正例： where a =?  and b =?  order by c; 索引： a _ b _ c<br>反例：索引中有范围查找，那么索引有序性无法利用，如： WHERE a &gt;10  ORDER BY b; 索引<br>a _ b 无法排序。</p></li><li><p>【推荐】利用覆盖索引来进行查询操作，来避免回表操作。<br>说明：如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览<br>一下就好，这个目录就是起到覆盖索引的作用。<br>正例：能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种<br>效果，用 explain 的结果， extra 列会出现： using index 。</p></li><li><p>【推荐】利用延迟关联或者子查询优化超多分页场景。<br>说明： MySQL 并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回<br>N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过<br>特定阈值的页数进行 SQL 改写。<br>正例：先快速定位需要获取的 id 段，然后再关联：</p><pre><code class="mysql">SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</code></pre></li><li><p>【推荐】  SQL 性能优化的目标：至少要达到  range 级别，要求是 ref 级别，如果可以是 consts<br>最好。<br>说明：<br>1 ）consts 单表中最多只有一个匹配行 （ 主键或者唯一索引 ） ，在优化阶段即可读取到数据。<br>2 ）ref 指的是使用普通的索引 （normal index） 。<br>3 ）range 对索引进行范围检索。<br>反例： explain 表的结果， type = index ，索引物理文件全扫描，速度非常慢，这个 index 级<br>别比较 range 还低，与全表扫描是小巫见大巫。</p></li><li><p>【推荐】建组合索引的时候，区分度最高的在最左边。<br>正例：如果 where a =?  and b =? ， a 列的几乎接近于唯一值，那么只需要单建 idx _ a 索引即<br>可。<br>说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如： where a &gt;?<br>and b =? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p></li><li><p>【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。</p></li><li><p>【参考】创建索引时避免有如下极端误解：<br>1 ） 宁滥勿缺。认为一个查询就需要建一个索引。<br>2 ） 宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。<br>3 ） 抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终结版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MySQL-索引规约&quot;&gt;&lt;a href=&quot;#MySQL-索引规约&quot; class=&quot;headerlink&quot; title=&quot;MySQL - 索引规约&quot;&gt;&lt;/a&gt;MySQL - 索引规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 1 项、 第 11 项&lt;/p&gt;
&lt;p&gt;新增项：第10 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;【强制】业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。&lt;br&gt;说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明&lt;br&gt;显的 ； 另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必&lt;br&gt;然有脏数据产生。&lt;/li&gt;
&lt;li&gt;【强制】 超过三个表禁止 join 。需要 join 的字段，数据类型保持绝对一致 ； 多表关联查询&lt;br&gt;时，保证被关联的字段需要有索引。&lt;br&gt;说明：即使双表 join 也要注意表索引、 SQL 性能。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="索引规约" scheme="https://goghtsui.github.io/tags/%E7%B4%A2%E5%BC%95%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终结版）》5-1之建表规约</title>
    <link href="https://goghtsui.github.io/2017/03/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B5-1%E4%B9%8B%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/03/01/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B5-1%E4%B9%8B%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-03-01T06:51:25.000Z</published>
    <updated>2021-01-26T02:34:57.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-建表规约"><a href="#MySQL-建表规约" class="headerlink" title="MySQL - 建表规约"></a>MySQL - 建表规约</h2><blockquote><p>修改项：第 1 项、 第 9 项、第 15 项</p></blockquote><ol><li>【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 unsigned tinyint<br>（ 1 表示是，0 表示否 ） 。<br>说明：任何字段如果为非负数，必须是 unsigned 。<br>正例：表达逻辑删除的字段名 is_deleted ，1 表示删除，0 表示未删除。</li><li>【强制】表名、字段名必须使用小写字母或数字 ， 禁止出现数字开头，禁止两个下划线中间只<br>出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br>说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库<br>名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br>正例： aliyun _ admin ， rdc _ config ， level 3_ name<br>反例： AliyunAdmin ， rdcConfig ， level <em>3</em> name</li><li>【强制】表名不使用复数名词。<br>说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数<br>形式，符合表达习惯。</li><li>【强制】禁用保留字，如 desc 、 range 、 match 、 delayed 等，请参考 MySQL 官方保留字。</li></ol><a id="more"></a><ol start="5"><li><p>【强制】唯一索引名为 uk _字段名 ； 普通索引名则为 idx _字段名。<br>说明： uk _ 即  unique key；idx _ 即 index 的简称。</p></li><li><p>【强制】小数类型为 decimal ，禁止使用 float 和 double 。<br>说明： float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不<br>正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p></li><li><p>【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p></li><li><p>【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长<br>度大于此值，定义字段类型为 text ，独立出来一张表，用主键来对应，避免影响其它字段索<br>引效率。</p></li><li><p>【强制】表必备三字段： id ,  gmt _ create ,  gmt _ modified 。<br>说明：其中 id 必为主键，类型为 unsigned bigint 、单表时自增、步长为 1。 gmt_create,<br>gmt_modified 的类型均为 date_time 类型，前者现在时表示主动创建，后者过去分词表示被<br>动更新。</p></li><li><p>【推荐】表的命名最好是加上“业务名称_表的作用”。<br>正例： alipay _ task /  force _ project /  trade _ config</p></li><li><p>【推荐】库名与应用名称尽量一致。</p></li><li><p>【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p></li><li><p>【推荐】字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：<br>1 ） 不是频繁修改的字段。<br>2 ） 不是 varchar 超长字段，更不能是 text 字段。<br>正例：商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存<br>储类目名称，避免关联查询。</p></li><li><p>【推荐】单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。<br>说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p></li><li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检<br>索速度。<br>正例：如下表，其中无符号值可以避免误存负数，且扩大了表示范围</p><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150之内</td><td>unsigned tinyint</td><td>1</td><td>无符号值：0 - 255</td></tr><tr><td>龟</td><td>数百岁</td><td>unsigned smallint</td><td>2</td><td>无符号值：0 - 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>unsigned int</td><td>4</td><td>无符号值：0 - 约 42.9 亿</td></tr><tr><td>太阳</td><td>约50亿年</td><td>unsigned bigint</td><td>8</td><td>无符号值：0 到约 10 的 19 次方</td></tr></tbody></table></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MySQL-建表规约&quot;&gt;&lt;a href=&quot;#MySQL-建表规约&quot; class=&quot;headerlink&quot; title=&quot;MySQL - 建表规约&quot;&gt;&lt;/a&gt;MySQL - 建表规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 1 项、 第 9 项、第 15 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;【强制】表达是与否概念的字段，必须使用 is _ xxx 的方式命名，数据类型是 unsigned tinyint&lt;br&gt;（ 1 表示是，0 表示否 ） 。&lt;br&gt;说明：任何字段如果为非负数，必须是 unsigned 。&lt;br&gt;正例：表达逻辑删除的字段名 is_deleted ，1 表示删除，0 表示未删除。&lt;/li&gt;
&lt;li&gt;【强制】表名、字段名必须使用小写字母或数字 ， 禁止出现数字开头，禁止两个下划线中间只&lt;br&gt;出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。&lt;br&gt;说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库&lt;br&gt;名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。&lt;br&gt;正例： aliyun _ admin ， rdc _ config ， level 3_ name&lt;br&gt;反例： AliyunAdmin ， rdcConfig ， level &lt;em&gt;3&lt;/em&gt; name&lt;/li&gt;
&lt;li&gt;【强制】表名不使用复数名词。&lt;br&gt;说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数&lt;br&gt;形式，符合表达习惯。&lt;/li&gt;
&lt;li&gt;【强制】禁用保留字，如 desc 、 range 、 match 、 delayed 等，请参考 MySQL 官方保留字。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终结版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E7%BB%93%E7%89%88%EF%BC%89/"/>
    
    <category term="建表规约" scheme="https://goghtsui.github.io/tags/%E5%BB%BA%E8%A1%A8%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》2-2之日志规约</title>
    <link href="https://goghtsui.github.io/2017/02/27/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B2-2%E4%B9%8B%E6%97%A5%E5%BF%97%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/27/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B2-2%E4%B9%8B%E6%97%A5%E5%BF%97%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-02-27T03:09:27.000Z</published>
    <updated>2021-01-26T02:34:57.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常日志-日志规约"><a href="#异常日志-日志规约" class="headerlink" title="异常日志 - 日志规约"></a>异常日志 - 日志规约</h2><ol><li><p>【强制】应用中不可直接使用日志系统 （Log 4 j 、 Logback） 中的 API ，而应依赖使用日志框架<br>SLF 4 J 中的 API ，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p><pre><code class="java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;private static final Logger logger = LoggerFactory.getLogger(Abc.class);</code></pre></li><li><p>【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p></li></ol><a id="more"></a><ol start="3"><li><p>【强制】应用中的扩展日志 （ 如打点、临时监控、访问日志等 ） 命名方式：<br>appName _ logType _ logName . log 。 logType :日志类型，推荐分类有<br>stats / desc / monitor / visit 等 ；logName :日志描述。这种命名的好处：通过文件名就可知<br>道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。<br>正例： mppserver 应用中单独监控时区转换异常，如：<br>mppserver _ monitor _ timeZoneConvert . log<br>说明：推荐对日志进行分类，错误日志和业务日志尽量分开存放，便于开发人员查看，也便于<br>通过日志对系统进行及时监控。</p></li><li><p>【强制】对 trace / debug / info 级别的日志输出，必须使用条件输出形式或者使用占位符的方<br>式。<br>说明： logger . debug( “ Processing trade with id : “ +  id + “  symbol : “ +  symbol);<br>如果日志级别是 warn ，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，<br>会执行 toString() 方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。<br>正例： （ 条件 ）</p><pre><code class="java">if (logger.isDebugEnabled()) &#123;    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);&#125;</code></pre><p>正例： （ 占位符 ）</p><pre><code class="java">logger.debug(&quot;Processing trade with id: &#123;&#125; symbol : &#123;&#125; &quot;, id, symbol);</code></pre></li><li><p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log 4 j . xml 中设置 additivity = false 。<br>正例： </p><pre><code class="xml">&lt;logger name=&quot;com.taobao.dubbo.config&quot; additivity=&quot;false&quot;&gt; </code></pre></li><li><p>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上<br>抛。<br>正例：</p><pre><code class="java">logger.error(各类参数或者对象 toString + &quot;_&quot; + e.getMessage(), e);</code></pre></li><li><p>【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志 ； 有选择地输出 info 日志 ； 如果使<br>用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘<br>撑爆，并记得及时删除这些观察日志。<br>说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请<br>思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p></li><li><p>【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适<br>从。注意日志输出的级别， error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必<br>要，请不要在此场景打出 error 级别。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常日志-日志规约&quot;&gt;&lt;a href=&quot;#异常日志-日志规约&quot; class=&quot;headerlink&quot; title=&quot;异常日志 - 日志规约&quot;&gt;&lt;/a&gt;异常日志 - 日志规约&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】应用中不可直接使用日志系统 （Log 4 j 、 Logback） 中的 API ，而应依赖使用日志框架&lt;br&gt;SLF 4 J 中的 API ，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
private static final Logger logger = LoggerFactory.getLogger(Abc.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="日志规约" scheme="https://goghtsui.github.io/tags/%E6%97%A5%E5%BF%97%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》2-1之异常处理</title>
    <link href="https://goghtsui.github.io/2017/02/27/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B2-1%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/27/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B2-1%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/undefined/</id>
    <published>2017-02-27T03:08:57.000Z</published>
    <updated>2021-01-26T02:34:57.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常日志-异常处理"><a href="#异常日志-异常处理" class="headerlink" title="异常日志 - 异常处理"></a>异常日志 - 异常处理</h2><blockquote><p>第 1 项、第 9 项、 第 10 项、第 12 项</p></blockquote><ol><li><p>【强制】 Java 类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该<br>通过 catch 来处理，比如： IndexOutOfBoundsException ， NullPointerException 等等。<br>说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch<br>NumberFormatException 来实现。</p><p>正例：</p><pre><code class="java"> if(obj != null) &#123;...&#125;</code></pre><p>反例：</p><pre><code class="java"> try &#123; obj.method() &#125; catch(NullPointerException e)&#123;...&#125;</code></pre></li><li><p>【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</p></li></ol><a id="more"></a><ol start="3"><li><p>【强制】对大段代码进行 try - catch ，这是不负责任的表现。 catch 时请分清稳定代码和非稳<br>定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分<br>异常类型，再做对应的异常处理。</p></li><li><p>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请<br>将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的<br>内容。</p></li><li><p>【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回<br>滚事务。</p></li><li><p>【强制】 finally 块必须对资源对象、流对象进行关闭，有异常也要做 try - catch 。<br>说明：如果 JDK 7，可以使用 try - with - resources 方式。</p></li><li><p>【强制】不能在 finally 块中使用 return ， finally 块中的 return 返回后方法结束执行，不<br>会再执行 try 块中的 return 语句。</p></li><li><p>【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<br>说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></li><li><p>【推荐】方法的返回值可以为 null ，不强制返回空集合，或者空对象等，必须添加注释充分<br>说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。<br>说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用<br>者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回<br>null 的情况。</p></li><li><p>【推荐】防止 NPE ，是程序员的基本修养，注意 NPE 产生的场景：<br>1 ） 返回类型为包装数据类型，有可能是 null ，返回 int 值时注意判空。<br>反例： public int f() {  return Integer 对象}; 如果为 null ，自动解箱抛 NPE 。<br>2 ） 数据库的查询结果可能为 null 。<br>3 ） 集合里的元素即使 isNotEmpty ，取出的数据元素也可能为 null 。<br>4 ） 远程调用返回对象，一律要求进行 NPE 判断。<br>5 ） 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。<br>6 ） 级联调用 obj . getA() . getB() . getC()； 一连串调用，易产生 NPE 。</p><p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题。</p></li><li><p>【推荐】定义时区分 unchecked /  checked 异常，避免直接使用 RuntimeException 抛出，<br>更不允许抛出 Exception 或者 Throwable ，应使用有业务含义的自定义异常。推荐业界已定义<br>过的自定义异常，如： DAOException /  ServiceException 等。</p></li><li><p>【参考】在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http / api 开放接口必须<br>使用“错误码” ； 而应用内部推荐异常抛出 ； 跨应用间 RPC 调用优先考虑使用 Result 方式，封<br>装 isSuccess()方法 、“错误码”、“错误简短信息”。<br>说明：关于 RPC 方法返回方式使用 Result 方式的理由：<br>1 ） 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。<br>2 ） 如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message ，对于调用<br>端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输<br>的性能损耗也是问题。</p></li><li><p>【参考】避免出现重复的代码 （Don ’ t Repeat Yourself） ，即 DRY 原则。<br>说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副<br>本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是共用模块。<br>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：</p></li></ol><pre><code class="java">   private boolean checkParam(DTO dto)&#123;...&#125;</code></pre><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异常日志-异常处理&quot;&gt;&lt;a href=&quot;#异常日志-异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常日志 - 异常处理&quot;&gt;&lt;/a&gt;异常日志 - 异常处理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;第 1 项、第 9 项、 第 10 项、第 12 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】 Java 类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该&lt;br&gt;通过 catch 来处理，比如： IndexOutOfBoundsException ， NullPointerException 等等。&lt;br&gt;说明：无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch&lt;br&gt;NumberFormatException 来实现。&lt;/p&gt;
&lt;p&gt;正例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; if(obj != null) &amp;#123;...&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;反例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; try &amp;#123; obj.method() &amp;#125; catch(NullPointerException e)&amp;#123;...&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="异常处理" scheme="https://goghtsui.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-9之其它</title>
    <link href="https://goghtsui.github.io/2017/02/24/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-9%E4%B9%8B%E5%85%B6%E5%AE%83/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/24/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-9%E4%B9%8B%E5%85%B6%E5%AE%83/undefined/</id>
    <published>2017-02-24T02:16:27.000Z</published>
    <updated>2021-01-26T02:34:57.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-其它"><a href="#编程规约-其它" class="headerlink" title="编程规约 - 其它"></a>编程规约 - 其它</h2><ol><li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<br>说明：不要在方法体内定义： Pattern pattern =  Pattern . compile( 规则 );</li><li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按<br>规范调用 POJO 的 getXxx() ，如果是 boolean 基本数据类型变量 （boolean 命名不需要加 is<br>前缀 ） ，会自动调用 isXxx() 方法。<br>说明：注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。</li><li>【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。<br>说明：如果 var = null 或者不存在，那么 ${var} 会直接显示在页面上。</li><li>【强制】注意  Math . random() 这个方法返回是 double 类型，注意取值的范围 0≤ x &lt;1 （ 能够<br>取到零值，注意除零异常 ） ，如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后<br>取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</li></ol><a id="more"></a><ol start="5"><li>【强制】获取当前毫秒数 System . currentTimeMillis(); 而不是 new Date() . getTime();<br>说明：如果想获取更加精确的纳秒级时间值，用 System . nanoTime() 。在 JDK 8 中，针对统计<br>时间等场景，推荐使用 Instant 类。</li><li>【推荐】不要在视图模板中加入任何复杂的逻辑。<br>说明：根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li><li>【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li><li>【推荐】及时清理不再使用的代码段或配置信息。<br>说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。<br>正例：对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三<br>个斜杠(///)来说明注释掉代码的理由。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-其它&quot;&gt;&lt;a href=&quot;#编程规约-其它&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 其它&quot;&gt;&lt;/a&gt;编程规约 - 其它&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。&lt;br&gt;说明：不要在方法体内定义： Pattern pattern =  Pattern . compile( 规则 );&lt;/li&gt;
&lt;li&gt;【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按&lt;br&gt;规范调用 POJO 的 getXxx() ，如果是 boolean 基本数据类型变量 （boolean 命名不需要加 is&lt;br&gt;前缀 ） ，会自动调用 isXxx() 方法。&lt;br&gt;说明：注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。&lt;/li&gt;
&lt;li&gt;【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。&lt;br&gt;说明：如果 var = null 或者不存在，那么 ${var} 会直接显示在页面上。&lt;/li&gt;
&lt;li&gt;【强制】注意  Math . random() 这个方法返回是 double 类型，注意取值的范围 0≤ x &amp;lt;1 （ 能够&lt;br&gt;取到零值，注意除零异常 ） ，如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后&lt;br&gt;取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-8之注释规约</title>
    <link href="https://goghtsui.github.io/2017/02/24/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-8%E4%B9%8B%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/24/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-8%E4%B9%8B%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-02-24T02:15:51.000Z</published>
    <updated>2021-01-26T02:34:57.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-注释规约"><a href="#编程规约-注释规约" class="headerlink" title="编程规约 - 注释规约"></a>编程规约 - 注释规约</h2><ol><li><p>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用<br>// xxx 方式。<br>说明：在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注<br>释 ； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高<br>阅读效率。</p></li><li><p>【强制】所有的抽象方法 （ 包括接口中的方法 ） 必须要用 Javadoc 注释、除了返回值、参数、<br>异常说明外，还必须指出该方法做什么事情，实现什么功能。<br>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p></li><li><p>【强制】所有的类都必须添加创建者信息。</p></li></ol><a id="more"></a><ol start="4"><li><p>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释<br>使用/* */注释，注意与代码对齐。</p></li><li><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p></li><li><p>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持<br>英文原文即可。<br>反例：“ TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></li><li><p>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑<br>等的修改。<br>说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，<br>就失去了导航的意义。</p></li><li><p>【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。<br>说明：代码被注释掉有两种可能性：1 ） 后续会恢复此段代码逻辑。2 ） 永久不用。前者如果没<br>有备注信息，难以知晓注释动机。后者建议直接删掉 （ 代码仓库保存了历史代码 ） 。</p></li><li><p>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑 ； 第二、能够描述业务含<br>义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同<br>天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路 ； 注释也是给继任者看<br>的，使其能够快速接替自己的工作。</p></li><li><p>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的<br>一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<br>反例：</p></li></ol><pre><code class="java">   // put elephant into fridge   put(elephant, fridge);</code></pre><p>   方法名 put ，加上两个有意义的变量名 elephant 和 fridge ，已经说明了这是在干什么，语<br>   义清晰的代码不需要额外的注释。</p><ol start="11"><li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，<br>经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<br>1 ） 待办事宜 （TODO） : （ 标记人，标记时间， [ 预计处理时间 ]）<br>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc<br>还没有实现，但已经被广泛使用。只能应用于类，接口和方法 （ 因为它是一个 Javadoc 标签 ） 。<br>2 ） 错误，不能工作 （FIXME） : （ 标记人，标记时间， [ 预计处理时间 ]）<br>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-注释规约&quot;&gt;&lt;a href=&quot;#编程规约-注释规约&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 注释规约&quot;&gt;&lt;/a&gt;编程规约 - 注释规约&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*&lt;em&gt;内容&lt;/em&gt;/格式，不得使用&lt;br&gt;// xxx 方式。&lt;br&gt;说明：在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注&lt;br&gt;释 ； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高&lt;br&gt;阅读效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】所有的抽象方法 （ 包括接口中的方法 ） 必须要用 Javadoc 注释、除了返回值、参数、&lt;br&gt;异常说明外，还必须指出该方法做什么事情，实现什么功能。&lt;br&gt;说明：对子类的实现要求，或者调用注意事项，请一并说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】所有的类都必须添加创建者信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="注释规约" scheme="https://goghtsui.github.io/tags/%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-7之控制语句</title>
    <link href="https://goghtsui.github.io/2017/02/23/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-7%E4%B9%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/23/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-7%E4%B9%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/undefined/</id>
    <published>2017-02-23T06:25:19.000Z</published>
    <updated>2021-01-26T02:34:57.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-控制语句"><a href="#编程规约-控制语句" class="headerlink" title="编程规约 - 控制语句"></a>编程规约 - 控制语句</h2><blockquote><p>修改项：第 3 项</p></blockquote><ol><li><p>【强制】在一个 switch 块内，每个 case 要么通过 break / return 等来终止，要么注释说明程<br>序将继续执行到哪一个 case 为止 ； 在一个 switch 块内，都必须包含一个 default 语句并且<br>放在最后，即使它什么代码也没有。</p></li><li><p>【强制】在 if / else / for / while / do 语句中必须使用大括号，即使只有一行代码，避免使用<br>下面的形式： if (condition) statements;</p></li><li><p>【推荐】推荐尽量少用 else ，  if - else 的方式可以改写成：</p><pre><code class="java">if(condition)&#123;    ...    return obj;&#125;</code></pre><p>// 接着写 else 的业务逻辑代码;</p><p>说明：如果非得使用 if()…else if()…else… 方式表达逻辑，【强制】避免后续代码维<br>护困难，请勿超过 3 层。<br>正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</p><pre><code class="java">public void today() &#123;    if (isBusy()) &#123;        System.out.println(“change time.”);        return;    &#125;    if (isFree()) &#123;        System.out.println(“go to travel.”);         return;    &#125;    System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);    return;&#125;</code></pre></li></ol><a id="more"></a><ol start="4"><li><p>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复<br>杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。<br>说明：很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么<br>样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？<br>正例：</p><pre><code class="java">//伪代码如下boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...);if (existed) &#123;    ...&#125;</code></pre><p>反例：</p><pre><code class="java">if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) &#123;    ...&#125;</code></pre></li><li><p>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、<br>获取数据库连接，进行不必要的 try - catch 操作 （ 这个 try - catch 是否可以移至循环体外 ） 。</p></li><li><p>【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。</p></li><li><p>【参考】方法中需要进行参数校验的场景：<br>1 ） 调用频次低的方法。<br>2 ） 执行时间开销很大的方法，参数校验时间几乎可以忽略不计，但如果因为参数错误导致<br>中间执行回退，或者错误，那得不偿失。<br>3 ） 需要极高稳定性和可用性的方法。<br>4 ） 对外提供的开放接口，不管是 RPC / API / HTTP 接口。<br>5） 敏感权限入口。</p></li><li><p>【参考】方法中不需要参数校验的场景：<br>1 ） 极有可能被循环调用的方法，不建议对参数进行校验。但在方法说明里必须注明外部参<br>数检查。<br>2 ） 底层的方法调用频度都比较高，一般不校验。毕竟是像纯净水过滤的最后一道，参数错<br>误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一<br>台服务器中，所以 DAO 的参数校验，可以省略。<br>3 ） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参<br>数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><p>​</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-控制语句&quot;&gt;&lt;a href=&quot;#编程规约-控制语句&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 控制语句&quot;&gt;&lt;/a&gt;编程规约 - 控制语句&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 3 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】在一个 switch 块内，每个 case 要么通过 break / return 等来终止，要么注释说明程&lt;br&gt;序将继续执行到哪一个 case 为止 ； 在一个 switch 块内，都必须包含一个 default 语句并且&lt;br&gt;放在最后，即使它什么代码也没有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】在 if / else / for / while / do 语句中必须使用大括号，即使只有一行代码，避免使用&lt;br&gt;下面的形式： if (condition) statements;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【推荐】推荐尽量少用 else ，  if - else 的方式可以改写成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;if(condition)&amp;#123;
    ...
    return obj;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;// 接着写 else 的业务逻辑代码;&lt;/p&gt;
&lt;p&gt;说明：如果非得使用 if()…else if()…else… 方式表达逻辑，【强制】避免后续代码维&lt;br&gt;护困难，请勿超过 3 层。&lt;br&gt;正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void today() &amp;#123;
    if (isBusy()) &amp;#123;
        System.out.println(“change time.”);
        return;
    &amp;#125;
    if (isFree()) &amp;#123;
        System.out.println(“go to travel.”); 
        return;
    &amp;#125;
    System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);
    return;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="控制语句" scheme="https://goghtsui.github.io/tags/%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-6之并发处理</title>
    <link href="https://goghtsui.github.io/2017/02/23/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-6%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/23/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-6%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/undefined/</id>
    <published>2017-02-23T06:24:56.000Z</published>
    <updated>2021-01-26T02:34:57.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-并发处理"><a href="#编程规约-并发处理" class="headerlink" title="编程规约 - 并发处理"></a>编程规约 - 并发处理</h2><blockquote><p>修改项：第 6 项</p></blockquote><ol><li><p>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<br>说明：资源驱动类、工具类、单例工厂类都需要注意。</p></li><li><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。<br>正例：</p><pre><code class="java">public class TimerTaskThread extends Thread &#123;public TimerTaskThread()&#123;    super.setName(&quot;TimerTaskThread&quot;); ...&#125;</code></pre></li></ol><a id="more"></a><ol start="3"><li><p>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br>说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资<br>源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者<br>“过度切换”的问题。</p></li><li><p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样<br>的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明： Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool :<br>允许的请求队列长度为 Integer.MAX_VALUE ，可能会堆积大量的请求，从而导致 OOM 。<br>2） CachedThreadPool 和 ScheduledThreadPool :<br>允许的创建线程数量为 Integer.MAX_VALUE ，可能会创建大量的线程，从而导致 OOM 。</p></li><li><p>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为<br>static ，必须加锁，或者使用 DateUtils 工具类。<br>正例：注意线程安全，使用 DateUtils 。亦推荐如下处理：</p><pre><code class="java">private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;() &#123;    @ Override    protected DateFormat initialValue() &#123;        return new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);    &#125;&#125;;</code></pre><p>说明：如果是 JDK 8 的应用，可以使用 Instant 代替 Date ， LocalDateTime 代替 Calendar ，<br>DateTimeFormatter 代替 Simpledateformatter ，官方给出的解释： simple beautiful strong<br>immutable thread - safe 。</p></li><li><p>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁 ； 能<br>锁区块，就不要锁整个方法体 ； 能用对象锁，就不要用类锁。<br>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p></li><li><p>【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造<br>成死锁。<br>说明：线程一需要对表 A 、 B 、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序<br>也必须是 A 、 B 、 C ，否则可能出现死锁。</p></li><li><p>【强制】并发修改同一记录时，避免更新丢失，要么在应用层加锁，要么在缓存加锁，要么在<br>数据库层使用乐观锁，使用 version 作为更新依据。<br>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次<br>数不得小于 3 次。</p></li><li><p>【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获<br>抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p></li><li><p>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown<br>方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行<br>至 countDown 方法，直到超时才返回结果。<br>说明：注意，子线程抛出异常堆栈，不能在主线程 try - catch 到。</p></li><li><p>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一<br>seed 导致的性能下降。<br>说明： Random 实例包括 java . util . Random 的实例或者  Math . random() 实例。<br>正例：在 JDK 7 之后，可以直接使用 API ThreadLocalRandom ，在  JDK 7 之前，可以做到每个<br>线程一个实例。</p></li><li><p>【推荐】通过双重检查锁 （double - checked locking）（ 在并发场景 ） 实现延迟初始化的优<br>化问题隐患 ( 可参考  The “ Double - Checked Locking is Broken “  Declaration) ,推荐问题<br>解决方案中较为简单一种 （ 适用于 JDK 5 及以上版本 ） ，将目标属性声明为  volatile 型 。<br>反例：</p></li></ol><pre><code class="java">   class Foo &#123;       private Helper helper = null;       public Helper getHelper() &#123;       if (helper == null) synchronized(this) &#123;           if (helper == null)           helper = new Helper();           &#125;           return helper;       &#125;       // other functions and members...   &#125;</code></pre><ol start="13"><li>【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，<br>但是如果多写，同样无法解决线程安全问题。如果是 count ++操作，使用如下类实现：<br>AtomicInteger count =  new AtomicInteger(); count . addAndGet( 1 );  如果是 JDK 8，推<br>荐使用 LongAdder 对象，比 AtomicLong 性能更好 （ 减少乐观锁的重试次数 ） 。</li><li>【参考】  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在<br>开发过程中注意规避此风险。</li><li>【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static<br>修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享<br>此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象 ( 只<br>要是这个线程内定义的 ) 都可以操控这个变量。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-并发处理&quot;&gt;&lt;a href=&quot;#编程规约-并发处理&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 并发处理&quot;&gt;&lt;/a&gt;编程规约 - 并发处理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 6 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。&lt;br&gt;说明：资源驱动类、工具类、单例工厂类都需要注意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。&lt;br&gt;正例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class TimerTaskThread extends Thread &amp;#123;
public TimerTaskThread()&amp;#123;
    super.setName(&amp;quot;TimerTaskThread&amp;quot;); ...
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="并发处理" scheme="https://goghtsui.github.io/tags/%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-5之集合处理</title>
    <link href="https://goghtsui.github.io/2017/02/21/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-5%E4%B9%8B%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/21/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-5%E4%B9%8B%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/undefined/</id>
    <published>2017-02-21T07:16:28.000Z</published>
    <updated>2021-01-26T02:34:57.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-集合处理"><a href="#编程规约-集合处理" class="headerlink" title="编程规约 - 集合处理"></a>编程规约 - 集合处理</h2><blockquote><p>修改项：第 9 项</p></blockquote><ol><li><p>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：<br>1） 只要重写 equals ，就必须重写 hashCode 。<br>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的<br>对象必须重写这两个方法。<br>3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals 。<br>说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象<br>作为 key 来使用。</p></li><li><p>【强制】  ArrayList 的 subList 结果不可强转成 ArrayList ，否则会抛出 ClassCastException<br>异常： java . util . RandomAccessSubList cannot be cast to java . util . ArrayList ;<br>说明： subList 返回的是  ArrayList 的内部类  SubList ，并不是  ArrayList ，而是<br>ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p></li><li><p>【强制】 在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增<br>加、删除均产生 ConcurrentModificationException 异常。</p></li></ol><a id="more"></a><ol start="4"><li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array) ，传入的是类型完全<br>一样的数组，大小就是 list . size() 。</p><p>说明：使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配<br>内存空间，并返回新数组地址 ； 如果数组元素大于实际所需，下标为 [ list . size() ] 的数组<br>元素将被置为 null ，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素<br>个数一致。</p><p>正例：</p><pre><code class="java">List&lt;String&gt; list = new ArrayList&lt;String&gt;(2);list.add(&quot;guan&quot;);list.add(&quot;bao&quot;);String[] array = new String[list.size()];array = list.toArray(array);</code></pre><p>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[] 类，若强转其它<br>类型数组将出现 ClassCastException 错误。</p></li><li><p>【强制】使用工具类 Arrays . asList() 把数组转换成集合时，不能使用其修改集合相关的方<br>法，它的 add / remove / clear 方法会抛出 UnsupportedOperationException 异常。<br>说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays . asList<br>体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><pre><code class="java">String[] str = new String[] &#123; &quot;a&quot;, &quot;b&quot; &#125;;List list = Arrays.asList(str);</code></pre><p>第一种情况： list.add(“c”);  运行时异常。<br>第二种情况： str[0]= “gujin”; 那么 list.get(0) 也会随之修改。</p></li><li><p>【强制】泛型通配符&lt;?  extends T &gt;来接收返回的数据，此写法的泛型集合不能使用 add 方<br>法，而 &lt;? super T&gt; 不能使用 get 方法，做为接口调用赋值时易出错。<br>说明：扩展说一下 PECS(Producer Extends Consumer Super) 原则：第一、频繁往外读取内<br>容的，适合用&lt;?  extends T &gt;。第二、经常往里插入的，适合用 &lt;? super T&gt; 。</p></li><li><p>【强制】不要在 foreach 循环里进行元素的 remove / add 操作。 remove 元素请使用 Iterator<br>方式，如果并发操作，需要对 Iterator 对象加锁。<br>反例：</p><pre><code class="java">List&lt;String&gt; a = new ArrayList&lt;String&gt;();a.add(&quot;1&quot;);a.add(&quot;2&quot;);for (String temp : a) &#123;    if(&quot;1&quot;.equals(temp))&#123;        a.remove(temp);    &#125;&#125;</code></pre><p>正例：</p><pre><code class="java">Iterator&lt;String&gt; it = a.iterator();while(it.hasNext())&#123;String temp = it.next();    if(删除元素的条件)&#123;        it.remove();    &#125;&#125;</code></pre><p>说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的<br>结果吗？</p></li><li><p>【强制】 在 JDK 7 版本以上， Comparator 要满足自反性，传递性，对称性，不然 Arrays . sort ，<br>Collections . sort 会报 IllegalArgumentException 异常。<br>说明：<br>1 ） 自反性： x ， y 的比较结果和 y ， x 的比较结果相反。<br>2 ） 传递性： x &gt; y , y &gt; z ,则 x &gt; z 。<br>3 ） 对称性： x = y ,则 x , z 比较结果和 y ， z 比较结果相同。<br>反例：下例中没有处理相等的情况，实际使用中可能会出现异常：</p><pre><code class="java">new Comparator&lt;Student&gt;() &#123;    @Override    public int compare(Student o1, Student o2) &#123;        return o1.getId() &gt; o2.getId() ? 1 : -1;    &#125;&#125;</code></pre></li><li><p>【推荐】集合初始化时，指定集合初始值大小。<br>说明： HashMap 使用 HashMap(int initialCapacity) 初始化，<br>正例： initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即loader<br>factor）默认为 0.75， 如果暂时无法确定初始值大小，请设置为 16（即默认值）。<br>反例： HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容<br>量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</p></li><li><p>【推荐】使用 entrySet 遍历 Map 类集合 KV ，而不是 keySet 方式进行遍历。<br>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出<br>key 所对应的 value 。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效<br>率更高。如果是 JDK 8，使用 Map . foreach 方法。<br>正例： values() 返回的是 V 值集合，是一个 list 集合对象 ；keySet() 返回的是 K 值集合，是<br>一个 Set 集合对象 ；entrySet() 返回的是 K - V 值组合集合。</p></li><li><p>【推荐】高度注意 Map 类集合 K / V 能不能存储 null 值的情况，如下表格：</p></li></ol><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td>不允许为 null</td><td>不允许为 null</td><td>Dictionary</td><td>线程安全</td></tr><tr><td>ConcurrentHashMap</td><td>不允许为 null</td><td>不允许为 null</td><td>AbstractMap</td><td>分段锁技术</td></tr><tr><td>TreeMap</td><td>不允许为 null</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>HashMap</td><td>允许为 null</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr></tbody></table><p>   反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，注意存储<br>   null 值时会抛出 NPE 异常。</p><ol><li>【参考】合理利用好集合的有序性 (sort) 和稳定性 (order) ，避免集合的无序性 (unsort) 和<br>不稳定性 (unorder) 带来的负面影响。<br>说明：稳定性指集合每次遍历的元素次序是一定的。有序性是指遍历的结果是按某种比较规则<br>依次排列的。如： ArrayList 是 order / unsort；HashMap 是 unorder / unsort；TreeSet 是<br>order / sort 。</li><li>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的<br>contains 方法进行遍历、对比、去重操作。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-集合处理&quot;&gt;&lt;a href=&quot;#编程规约-集合处理&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 集合处理&quot;&gt;&lt;/a&gt;编程规约 - 集合处理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 9 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】关于 hashCode 和 equals 的处理，遵循如下规则：&lt;br&gt;1） 只要重写 equals ，就必须重写 hashCode 。&lt;br&gt;2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的&lt;br&gt;对象必须重写这两个方法。&lt;br&gt;3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals 。&lt;br&gt;说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象&lt;br&gt;作为 key 来使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】  ArrayList 的 subList 结果不可强转成 ArrayList ，否则会抛出 ClassCastException&lt;br&gt;异常： java . util . RandomAccessSubList cannot be cast to java . util . ArrayList ;&lt;br&gt;说明： subList 返回的是  ArrayList 的内部类  SubList ，并不是  ArrayList ，而是&lt;br&gt;ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】 在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增&lt;br&gt;加、删除均产生 ConcurrentModificationException 异常。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="集合处理" scheme="https://goghtsui.github.io/tags/%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-4之OOP规约</title>
    <link href="https://goghtsui.github.io/2017/02/20/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-4%E4%B9%8BOOP%E8%A7%84%E7%BA%A6/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/20/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-4%E4%B9%8BOOP%E8%A7%84%E7%BA%A6/undefined/</id>
    <published>2017-02-20T03:17:33.000Z</published>
    <updated>2021-01-26T02:34:57.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-OOP规约"><a href="#编程规约-OOP规约" class="headerlink" title="编程规约 - OOP规约"></a>编程规约 - OOP规约</h2><blockquote><p>修改项：第 17 项、第 18 项</p></blockquote><ol><li><p>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成<br>本，直接用类名来访问即可。</p></li><li><p>【强制】所有的覆写方法，必须加@ Override 注解。<br>反例： <code>getObject()</code> 与 <code>get 0 bject()</code> 的问题。一个是字母的 O ，一个是数字的 0，加<code>@ Override</code><br>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编<br>译报错。</p></li><li><p>【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object 。<br>说明：可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程 ）<br>正例： </p><pre><code class="java">public User getUsers(String type, Integer... ids)</code></pre></li></ol><a id="more"></a><ol start="4"><li><p>【强制】对外暴露的接口签名，原则上不允许修改方法签名，避免对接口调用方产生影响。接<br>口过时必须加<code>@ Deprecated</code> 注解，并清晰地说明采用的新接口或者新服务是什么。</p></li><li><p>【强制】不能使用过时的类或方法。<br>说明：<code>java . net . URLDecoder</code> 中的方法 <code>decode(String encodeStr)</code> 这个方法已经过时，应<br>该使用双参数 <code>decode(String source, String encode)</code> 。接口提供方既然明确是过时接口，<br>那么有义务同时提供新的接口 ； 作为调用方来说，有义务去考证过时方法的新实现是什么。</p></li><li><p>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用<br>equals 。<br>正例： </p><pre><code class="java">&quot; test &quot; .equals(object);</code></pre><p>反例： </p><pre><code class="java">object.equals( &quot; test &quot; );</code></pre><p>说明：推荐使用 <code>java . util . Objects # equals</code> （JDK 7 引入的工具类 ）</p></li><li><p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。<br>说明：对于 <code>Integer var =?</code> 在-128 至 127 之间的赋值， Integer 对象是在<br><code>IntegerCache . cache</code> 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行<br>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，<br>推荐使用 equals 方法进行判断。</p></li><li><p>【强制】关于基本数据类型与包装数据类型的使用标准如下：<br>1 ） 所有的 POJO 类属性必须使用包装数据类型。<br>2 ） RPC 方法的返回值和参数必须使用包装数据类型。<br>3 ） 所有的局部变量【推荐】使用基本数据类型。<br>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<br>NPE 问题，或者入库检查，都由使用者来保证。<br>正例：数据库的查询结果可能是 null ，因为自动拆箱，用基本数据类型接收有 NPE 风险。<br>反例：比如显示成交总额涨跌情况，即正负 x %， x 为基本数据类型，调用的 RPC 服务，调用<br>不成功时，返回的是默认值，页面显示：0%，这是不合理的，应该显示成中划线-。所以包装<br>数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p></li><li><p>【强制】定义 DO / DTO / VO 等 POJO 类时，不要设定任何属性默认值。<br>反例： POJO 类的 gmtCreate 默认值为 new Date(); 但是这个属性在数据提取时并没有置入具<br>体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p></li><li><p>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败 ； 如<br>果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。<br>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p></li><li><p>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p></li><li><p>【强制】 POJO 类必须写 toString 方法。使用 IDE 的中工具： source &gt;  generate toString<br>时，如果继承了另一个 POJO 类，注意在前面加一下 super . toString 。<br>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString() 方法打印其属性值，便于排<br>查问题。</p></li><li><p>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无<br>内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。<br>说明：</p></li></ol><pre><code class="java">   String str = &quot;a,b,c,,&quot;;   String[] ary = str.split(&quot;,&quot;);   //预期大于 3，结果是 3   System.out.println(ary.length);</code></pre><ol start="14"><li><p>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，<br>便于阅读。</p></li><li><p>【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt;  getter / setter<br>方法。<br>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好 ； 保护方法虽然只是子类<br>关心，也可能是“模板设计模式”下的核心方法 ； 而私有方法外部一般不需要特别关心，是一个<br>黑盒实现 ； 因为方法信息价值较低，所有 Service 和 DAO 的 getter / setter 方法放在类体最<br>后。</p></li><li><p>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this .成员名=参数名。在<br>getter / setter 方法中，尽量不要增加业务逻辑，增加排查问题的难度。<br>反例：</p></li></ol><pre><code class="java">   public Integer getData()&#123;       if(true) &#123;           return data + 100;       &#125; else &#123;           return data - 100;       &#125;   &#125;</code></pre><ol start="17"><li><p>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。<br>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行<br>append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p><p>反例：</p></li></ol><pre><code class="java">   String str = &quot;start&quot;;   for(int i=0; i&lt;100; i++)&#123;       str = str + &quot;hello&quot;;   &#125;</code></pre><p>   说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行<br>   append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。</p><ol start="18"><li>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：<br>1） 不允许被继承的类，如： String 类。<br>2） 不允许修改引用的域对象，如： POJO 类的域变量。<br>3） 不允许被重写的方法，如： POJO 类的 setter 方法。<br>4） 不允许运行过程中重新赋值的局部变量。<br>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好<br>地进行重构。</li><li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<br>说明：对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象<br>的拷贝。</li><li>【推荐】类成员与方法访问控制从严：<br>1 ） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private 。<br>2 ） 工具类不允许有 public 或 default 构造方法。<br>3 ） 类非 static 成员变量并且与子类共享，必须是 protected 。<br>4 ） 类非 static 成员变量并且仅在本类使用，必须是 private 。<br>5 ） 类 static 成员变量如果仅在本类使用，必须是 private 。<br>6 ） 若是 static 成员变量，必须考虑是否为 final 。<br>7 ） 类成员方法只供类内部调用，必须是 private 。<br>8 ） 类成员方法只对继承类公开，那么限制为 protected 。<br>说明：任何类、方法、参数、变量，严控访问范围。过宽泛的访问范围，不利于模块解耦。思<br>考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 Service 方法，或者一<br>个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视<br>线内，变量作用域太大，如果无限制的到处跑，那么你会担心的。</li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-OOP规约&quot;&gt;&lt;a href=&quot;#编程规约-OOP规约&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - OOP规约&quot;&gt;&lt;/a&gt;编程规约 - OOP规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 17 项、第 18 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成&lt;br&gt;本，直接用类名来访问即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】所有的覆写方法，必须加@ Override 注解。&lt;br&gt;反例： &lt;code&gt;getObject()&lt;/code&gt; 与 &lt;code&gt;get 0 bject()&lt;/code&gt; 的问题。一个是字母的 O ，一个是数字的 0，加&lt;code&gt;@ Override&lt;/code&gt;&lt;br&gt;可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编&lt;br&gt;译报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object 。&lt;br&gt;说明：可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程 ）&lt;br&gt;正例： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public User getUsers(String type, Integer... ids)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="OOP规约" scheme="https://goghtsui.github.io/tags/OOP%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-3之格式规约</title>
    <link href="https://goghtsui.github.io/2017/02/16/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-3%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/16/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-3%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/undefined/</id>
    <published>2017-02-16T02:04:17.000Z</published>
    <updated>2021-01-26T02:34:57.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-代码格式"><a href="#编程规约-代码格式" class="headerlink" title="编程规约 - 代码格式"></a>编程规约 - 代码格式</h2><blockquote><p>修改项：第 2 项、第 4 项</p><p>新增项：第 6 项</p></blockquote><ol><li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行 ； 如果<br>是非空代码块则：<br>1 ） 左大括号前不换行。<br>2 ） 左大括号后换行。<br>3 ） 右大括号前换行。<br>4 ） 右大括号后还有 else 等代码则不换行 ； 表示终止右大括号后必须换行。</li><li>【强制】 左小括号和字符之间不出现空格 ； 同样，右小括号和字符之间也不出现空格。详见<br>第 5 条下方正例提示。<br>反例： if (空格 a == b 空格)</li><li>【强制】 if / for / while / switch / do 等保留字与左右括号之间都必须加空格。</li></ol><a id="more"></a><ol start="4"><li><p>【强制】任何二目、三目运算符的左右两边都需要加一个空格。<br>说明：运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</p></li><li><p>【强制】缩进采用 4 个空格，禁止使用 tab 字符。<br>说明：如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，<br>请勿勾选 Use tab character ；而在 eclipse 中，必须勾选 insert spaces for tabs 。<br>正例：  （ 涉及 1-5 点 ）</p><pre><code class="java">public static void main(String args[]) &#123;    // 缩进 4 个空格    String say = &quot;hello&quot;;    // 运算符的左右必须有一个空格    int flag = 0;    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格    if (flag == 0) &#123;        System.out.println(say);    &#125;    // 左大括号前加空格且不换行；左大括号后换行    if (flag == 1) &#123;        System.out.println(&quot;world&quot;);    // 右大括号前换行，右大括号后有 else，不用换行    &#125; else &#123;        System.out.println(&quot;ok&quot;);    // 在右大括号后直接结束，则必须换行    &#125;&#125;</code></pre><p>​</p></li><li><p>【强制】注释的双斜线与注释内容之间有且仅有一个空格。<br>正例： // 注释内容，注意在 // 和注释内容之间有一个空格。</p></li><li><p>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<br>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。<br>2 ） 运算符与下文一起换行。<br>3 ） 方法调用的点符号与下文一起换行。<br>4 ） 在多个参数超长，逗号后进行换行。<br>5 ） 在括号前不要换行，见反例。<br>正例：</p><pre><code class="java">StringBuffer sb = new StringBuffer();//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...    .append(&quot;huang&quot;)...    .append(&quot;huang&quot;)...    .append(&quot;huang&quot;);</code></pre><p>反例：</p><pre><code class="java">StringBuffer sb = new StringBuffer();//超过 120 个字符的情况下，不要在括号前换行sb.append(&quot;zi&quot;).append(&quot;xin&quot;)...append(&quot;huang&quot;);//参数很多的方法调用可能超过 120 个字符，不要在逗号前换行method(args1, args2, args3, ..., argsX);</code></pre></li><li><p>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。<br>正例：下例中实参的” a “,后边必须要有一个空格。</p><pre><code class="java">method(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</code></pre></li><li><p>【强制】 IDE 的 text file encoding 设置为 UTF -8 ; IDE 中文件的换行符使用 Unix 格式，<br>不要使用 windows 格式。</p></li><li><p>【推荐】没有必要增加若干空格来使某一行的字符与上一行的相应字符对齐。<br>正例：</p><pre><code class="java">int a = 3;long b = 4L;float c = 5F;StringBuffer sb = new StringBuffer();</code></pre><p>说明：增加 sb 这个变量，如果需要对齐，则给 a 、 b 、 c 都要增加几个空格，在变量比较多的<br>情况下，是一种累赘的事情。</p></li><li><p>【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义<br>之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。<br>说明：没有必要插入多行空格进行隔开。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-代码格式&quot;&gt;&lt;a href=&quot;#编程规约-代码格式&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 代码格式&quot;&gt;&lt;/a&gt;编程规约 - 代码格式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 2 项、第 4 项&lt;/p&gt;
&lt;p&gt;新增项：第 6 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行 ； 如果&lt;br&gt;是非空代码块则：&lt;br&gt;1 ） 左大括号前不换行。&lt;br&gt;2 ） 左大括号后换行。&lt;br&gt;3 ） 右大括号前换行。&lt;br&gt;4 ） 右大括号后还有 else 等代码则不换行 ； 表示终止右大括号后必须换行。&lt;/li&gt;
&lt;li&gt;【强制】 左小括号和字符之间不出现空格 ； 同样，右小括号和字符之间也不出现空格。详见&lt;br&gt;第 5 条下方正例提示。&lt;br&gt;反例： if (空格 a == b 空格)&lt;/li&gt;
&lt;li&gt;【强制】 if / for / while / switch / do 等保留字与左右括号之间都必须加空格。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="代码格式" scheme="https://goghtsui.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-2之常量定义</title>
    <link href="https://goghtsui.github.io/2017/02/15/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-2%E4%B9%8B%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/15/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-2%E4%B9%8B%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89/undefined/</id>
    <published>2017-02-15T06:22:17.000Z</published>
    <updated>2021-01-26T02:34:57.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-常量定义"><a href="#编程规约-常量定义" class="headerlink" title="编程规约 - 常量定义"></a>编程规约 - 常量定义</h2><blockquote><p>修改：第 3 项、第 5 项</p></blockquote><ol><li><p>【强制】不允许出现任何魔法值 （ 即未经定义的常量 ） 直接出现在代码中。<br>反例：  </p><pre><code class="java">String key =&quot; Id # taobao _&quot;+ tradeId；cache . put(key ,  value);</code></pre></li><li><p>【强制】 long 或者 Long 初始赋值时，必须使用大写的 L ，不能是小写的 l ，小写容易跟数字<br>1 混淆，造成误解。<br>说明： </p><pre><code class="java">Long a = 2 l; </code></pre><p>写的是数字的 21，还是 Long 型的 2?</p></li></ol><a id="more"></a><ol start="3"><li><p>【推荐】不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。<br>说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。<br>正例：缓存相关常量放在类 CacheConsts 下 ； 系统配置相关常量放在类 ConfigConsts 下。</p></li><li><p>【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包<br>内共享常量、类内共享常量。<br>1 ） 跨应用共享常量：放置在二方库中，通常是 client . jar 中的 constant 目录下。<br>2 ） 应用内共享常量：放置在一方库的 modules 中的 constant 目录下。<br>反例：易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义 了<br>表示“是”的变量：<br>类 A 中： </p><pre><code class="java">public static final String YES = &quot; yes &quot; ;</code></pre><p>类 B 中： </p><pre><code class="java">public static final String YES = &quot; y &quot; ;</code></pre><p>A . </p><pre><code class="java">YES . equals(B . YES)</code></pre><p>预期是 true ，但实际返回为 false ，导致产生线上问题。<br>3 ） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4 ） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5 ） 类内共享常量：直接在类内部 private static final 定义。</p></li><li><p>【推荐】如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面<br>正例中的数字就是延伸信息，表示星期几。</p><p>正例： </p><pre><code class="java">public Enum &#123;  MONDAY( 1 ) ,  TUESDAY( 2 ) ,  WEDNESDAY( 3 ) ,  THURSDAY( 4 ) ,  FRIDAY( 5 ) ,SATURDAY( 6 ) ,  SUNDAY( 7 ); &#125;</code></pre></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册》</strong></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-常量定义&quot;&gt;&lt;a href=&quot;#编程规约-常量定义&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 常量定义&quot;&gt;&lt;/a&gt;编程规约 - 常量定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改：第 3 项、第 5 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】不允许出现任何魔法值 （ 即未经定义的常量 ） 直接出现在代码中。&lt;br&gt;反例：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;String key =&amp;quot; Id # taobao _&amp;quot;+ tradeId；
cache . put(key ,  value);&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】 long 或者 Long 初始赋值时，必须使用大写的 L ，不能是小写的 l ，小写容易跟数字&lt;br&gt;1 混淆，造成误解。&lt;br&gt;说明： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Long a = 2 l; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写的是数字的 21，还是 Long 型的 2?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
    <category term="常量定义" scheme="https://goghtsui.github.io/tags/%E5%B8%B8%E9%87%8F%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>《阿里巴巴Java开发手册（终极版）》1-1之命名规范</title>
    <link href="https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-1%E4%B9%8B%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89%E3%80%8B1-1%E4%B9%8B%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/undefined/</id>
    <published>2017-02-10T07:31:56.000Z</published>
    <updated>2021-01-26T02:34:57.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程规约-命名规约"><a href="#编程规约-命名规约" class="headerlink" title="编程规约 - 命名规约"></a>编程规约 - 命名规约</h2><blockquote><p>修改项：第 3 项</p><p>添加项：第 11 项</p></blockquote><ol><li><p>【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p>反例：</p><pre><code class="java">_name / __name / $Object / name_ / name$ / Object$</code></pre></li><li><p>【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式<br>也要避免采用。<br>反例：  </p><pre><code class="java"> DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3</code></pre><p>正例：</p><pre><code class="java"> alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。</code></pre></li></ol><a id="more"></a><ol start="3"><li><p>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：<font color=#d32f2f>DO /  BO  /  DTO /  VO / AO</font></p><p>正例： </p><pre><code class="java"> MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion</code></pre><p>​<br>反例： </p><pre><code class="java">macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion</code></pre></li><li><p>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>驼峰形式。<br>正例： </p><pre><code class="java"> localValue /  getHttpMessage() /  inputUserId</code></pre></li><li><p>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>正例：  </p><pre><code class="java"> MAX _ STOCK _ COUNT</code></pre><p>反例： </p><pre><code class="java"> MAX _ COUNT</code></pre></li><li><p>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类<br>命名以它要测试的类的名称开始，以 Test 结尾。</p></li><li><p>【强制】中括号是数组类型的一部分，数组定义如下： String[] args;<br>反例：请勿使用 String args[] 的方式来定义。</p></li><li><p>【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。<br>反例：定义为基本数据类型 boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC<br>框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异<br>常。</p></li><li><p>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<br>单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考<br>spring 的框架结构 ）</p></li><li><p>【强制】杜绝完全不规范的缩写，避免望文不知义。<br>反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类<br>随意缩写严重降低了代码的可阅读性。</p></li><li><p>【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词<br>组合来表达其意。</p><p>正例：从远程仓库拉取代码的类命名为：PullCodeFromRemoteRepository<br>反例：变量 int a; 的随意命名方式</p></li><li><p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。<br>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br>正例：</p><pre><code class="java">public class OrderFactory;public class LoginProxy;public class ResourceObserver;</code></pre></li></ol><ol start="12"><li>【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁<br>性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>与接口方法相关，并且是整个应用的基础常量。<br>正例：</li></ol><ul><li>接口方法签名：</li></ul><pre><code class="java">   void f();</code></pre><ul><li>接口基础常量表示：</li></ul><pre><code class="java">   String COMPANY = &quot; alibaba &quot; ;</code></pre><p>   反例：</p><ul><li><p> 接口方法定义： </p><pre><code class="java">public abstract void f();</code></pre></li><li><p> 说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默</p><p>   认实现。</p></li></ul><ol start="13"><li><p>接口和实现类的命名有两套规则：<br>1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>的实现类用 Impl 的后缀与接口区别。<br>正例： CacheServiceImpl 实现 CacheService 接口。<br>2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。<br>正例： AbstractTranslator 实现  Translatable 。</p></li><li><p>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。</p></li><li><p>【参考】各层命名规约：<br>A) Service / DAO 层方法命名规约<br>1 ） 获取单个对象的方法用 get 做前缀。<br>2 ） 获取多个对象的方法用 list 做前缀。<br>3 ） 获取统计值的方法用 count 做前缀。<br>4 ） 插入的方法用 save/insert 做前缀。<br>5 ） 删除的方法用 remove/delete 做前缀。<br>6 ） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1 ） 数据对象： xxxDO ， xxx 即为数据表名。<br>2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。<br>3 ） 展示对象： xxxVO ， xxx 一般为网页名称。<br>4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</p></li></ol><p><strong>以上内容均整理自《阿里巴巴Java开发手册（终极版）》</strong> </p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;编程规约-命名规约&quot;&gt;&lt;a href=&quot;#编程规约-命名规约&quot; class=&quot;headerlink&quot; title=&quot;编程规约 - 命名规约&quot;&gt;&lt;/a&gt;编程规约 - 命名规约&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改项：第 3 项&lt;/p&gt;
&lt;p&gt;添加项：第 11 项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。&lt;/p&gt;
&lt;p&gt;反例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;_name / __name / $Object / name_ / name$ / Object$&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。&lt;br&gt;说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式&lt;br&gt;也要避免采用。&lt;br&gt;反例：  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册终极版" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E7%BB%88%E6%9E%81%E7%89%88/"/>
    
    <category term="命名规约" scheme="https://goghtsui.github.io/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%E4%B9%8B%E7%BB%88%E6%9E%81%E7%89%88%E4%BF%AE%E8%AE%A2%EF%BC%81/undefined/"/>
    <id>https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%E4%B9%8B%E7%BB%88%E6%9E%81%E7%89%88%E4%BF%AE%E8%AE%A2%EF%BC%81/undefined/</id>
    <published>2017-02-10T06:48:31.000Z</published>
    <updated>2021-01-26T03:15:32.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经同步最终版</p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>首先，这肯定是一个非常重大的消息。绝对是Java程序员的福利啊，终于结束了一个公司一套规范的编程生涯。这对业界规范来说也起到了很好的推动作用。俗话说：无规矩不方圆，生活中各种法律道德的约束，出门还有交规的限制。相信小伙伴们一定经历过 坑，有了这本规范手册，你是不是该好好学习一下呢？</p><h2 id="目录章节"><a href="#目录章节" class="headerlink" title="目录章节"></a>目录章节</h2><p>内容分五大类，总共19章节：</p><table><thead><tr><th>索引</th><th>一级目录</th><th>二级目录</th></tr></thead><tbody><tr><td>一</td><td>编程规约</td><td><a href="https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%E4%B9%8B%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/undefined/">命名规约</a>、常量定义、代码格式、OOP规约、集合处理、并发处理、控制语句、注释规约、其它</td></tr><tr><td>二</td><td>异常日志</td><td>异常处理、日志规约</td></tr><tr><td>三</td><td>单元测试</td><td>无</td></tr><tr><td>四</td><td>安全规约</td><td>无</td></tr><tr><td>五</td><td>MySQL数据库</td><td>建表规约、索引规约、SQL语句、ORM映射</td></tr><tr><td>六</td><td>工程结构</td><td>应用分层、二方库依赖、服务器</td></tr></tbody></table><a id="more"></a><h2 id="手册专有名词（新增）"><a href="#手册专有名词（新增）" class="headerlink" title="手册专有名词（新增）"></a>手册专有名词（新增）</h2><ol><li><p>POJO（ Plain Ordinary Java Object ）: 在本手册中，POJO 专指只有 setter / getter</p><p>/ toString 的简单类，包括 DO/DTO/BO/VO 等。</p></li><li><p> GAV（ GroupId、ArtifactctId、Version ）: Maven 坐标，是用来唯一标识 jar 包。</p></li><li><p> OOP（ Object Oriented Programming ）: 本手册泛指类、对象的编程处理方式。</p></li><li><p>ORM（ Object Relation Mapping ）: 对象关系映射，对象领域模型与底层数据之间的转换，<br>本文泛指 iBATIS, mybatis 等框架。</p></li><li><p> NPE（ java.lang.NullPointerException ）: 空指针异常。</p></li><li><p>SOA（ Service-Oriented Architecture ）: 面向服务架构，它可以根据需求通过网络对松散<br>耦合的粗粒度应用组件进行分布式部署、组合和使用，有利于提升组件可重用性，可维护性。</p></li><li><p> 一方库: 本工程内部子项目模块依赖的库（jar 包）。</p></li><li><p> 二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</p></li><li><p> 三方库: 公司之外的开源库（jar 包）。</p></li><li><p>IDE（ Integrated Development Environment ）: 用于提供程序开发环境的应用程序，一<br>般包括代码编辑器、编译器、调试器和图形用户界面等工具，本《手册》泛指 IntelliJ IDEA<br>和 eclipse。</p><p>​</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>阿里Java技术团队一手打造出Dubbo、JStorm、Fastjson等诸多流行开源框架，部分已成为Apache基金会孵化项目；</p><p>此次首度公开的Java开发手册正是出自这样的团队，近万名阿里Java技术精英的经验总结，并经历了多次大规模一线实战检验及完善，铸就了这本高含金量的阿里Java开发手册。该手册以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。此套规范不仅能让代码一目了然， 更有助于加强团队分工与合作、真正提升效率。 </p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>提供Gitbook在线阅读和pdf下载：<a href="https://www.gitbook.com/book/goghtsui/-java/details">查看福利</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;已经同步最终版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;首先，这肯定是一个非常重大的消息。绝对是Java程序员的福利啊，终于结束了一个公司一套规范的编程生涯。这对业界规范来说也起到了很好的推动作用。俗话说：无规矩不方圆，生活中各种法律道德的约束，出门还有交规的限制。相信小伙伴们一定经历过 坑，有了这本规范手册，你是不是该好好学习一下呢？&lt;/p&gt;
&lt;h2 id=&quot;目录章节&quot;&gt;&lt;a href=&quot;#目录章节&quot; class=&quot;headerlink&quot; title=&quot;目录章节&quot;&gt;&lt;/a&gt;目录章节&lt;/h2&gt;&lt;p&gt;内容分五大类，总共19章节：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;索引&lt;/th&gt;
&lt;th&gt;一级目录&lt;/th&gt;
&lt;th&gt;二级目录&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;一&lt;/td&gt;
&lt;td&gt;编程规约&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://goghtsui.github.io/2017/02/10/%E3%80%8A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E3%80%8B%E4%B9%8B%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/undefined/&quot;&gt;命名规约&lt;/a&gt;、常量定义、代码格式、OOP规约、集合处理、并发处理、控制语句、注释规约、其它&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二&lt;/td&gt;
&lt;td&gt;异常日志&lt;/td&gt;
&lt;td&gt;异常处理、日志规约&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三&lt;/td&gt;
&lt;td&gt;单元测试&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;四&lt;/td&gt;
&lt;td&gt;安全规约&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;五&lt;/td&gt;
&lt;td&gt;MySQL数据库&lt;/td&gt;
&lt;td&gt;建表规约、索引规约、SQL语句、ORM映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;六&lt;/td&gt;
&lt;td&gt;工程结构&lt;/td&gt;
&lt;td&gt;应用分层、二方库依赖、服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="阿里巴巴Java开发手册（终极版）" scheme="https://goghtsui.github.io/tags/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BB%88%E6%9E%81%E7%89%88%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Java对象内存占用分析</title>
    <link href="https://goghtsui.github.io/2017/01/19/Java%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/undefined/"/>
    <id>https://goghtsui.github.io/2017/01/19/Java%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/undefined/</id>
    <published>2017-01-19T08:15:48.000Z</published>
    <updated>2021-01-26T02:34:57.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://segmentfault.com/a/1190000006933272">查看原文</a></p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>之前说过在Android中关于enum的使用，对内存的占用比较大，所以就了解了一下内存占用方面，基本上大同小异，下面是我觉得比较全面的描述，重新排版、整理，如果有时间，希望你能好好了解一下。</p><p>下面的内容深入分析并验证了不同Java对象占用内存空间大小的情况。对于不同的jvm实现，Java对象占用的内存空间大小可能不尽相同，本文主要分析HotSpot jvm中的情况，实验环境为64位window10系统、JDK1.8，使用JProfiler进行结论验证。</p><h2 id="Java对象内存布局"><a href="#Java对象内存布局" class="headerlink" title="Java对象内存布局"></a>Java对象内存布局</h2><p>Java对象的内存布局包括</p><ul><li>对象头(Header)</li><li>实例数据(Instance Data)</li><li>补齐填充(Padding)</li></ul><h3 id="对象头："><a href="#对象头：" class="headerlink" title="对象头："></a>对象头：</h3><p>在64位机器上，默认不开启指针压缩（-XX:-UseCompressedOops）的情况下，对象头占用12bytes，开启指针压缩（-XX:+UseCompressedOops）则占用16bytes。</p><h3 id="实例数据："><a href="#实例数据：" class="headerlink" title="实例数据："></a>实例数据：</h3><p>原生类型（primitive type）的内存占用如下：</p><table><thead><tr><th>Primitive Type</th><th>Memory Required(bytes)</th></tr></thead><tbody><tr><td>byte, boolean</td><td>1 byte</td></tr><tr><td>short, char</td><td>2 bytes</td></tr><tr><td>int, float</td><td>4 bytes</td></tr><tr><td>long, double</td><td>8 bytes</td></tr></tbody></table><p><strong>注：对象引用（reference）类型在64位机器上，关闭指针压缩时占用4bytes， 开启时占用8bytes</strong></p><a id="more"></a><h3 id="对齐填充："><a href="#对齐填充：" class="headerlink" title="对齐填充："></a>对齐填充：</h3><p>Java对象占用空间是8字节对齐的，即所有Java对象占用bytes数必须是8的倍数。例如，一个包含两个属性的对象：int和byte，并不是占用17bytes(12+4+1)，而是占用24bytes（对17bytes进行8字节对齐）</p><h2 id="Java对象内存占用"><a href="#Java对象内存占用" class="headerlink" title="Java对象内存占用"></a>Java对象内存占用</h2><p>首先根据以上的计算规则，进行一个简单的验证。使用下面的程序进行验证：</p><pre><code>public class Test &#123;    public static void main(String[] args) throws InterruptedException &#123;        TestObject testObject = new TestObject();        Thread.sleep(600 * 1000);        System.out.println(testObject);    &#125;&#125;class TestObject &#123;    private int i;    private double d;    private char[] c;    public TestObject() &#123;        this.i = 1;        this.d = 1.0;        this.c = new char[]&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;;    &#125;&#125;</code></pre><p>TestObject对象有四个属性，分别为int, double, Byte, char[]类型。在打开指针压缩(-XX:+UseCompressedOops)的情况下，在64位机器上，TestObject占用的内存大小应为：</p><blockquote><p>12(Header) + 4(int) + 8(double) + 4(reference) = 28 (bytes)，加上8字节对齐，最终的大小应为32 bytes。</p></blockquote><p>JProfiler中的结果为：</p><p><img src="https://segmentfault.com/img/bVDf3h?w=746&h=191" alt="img"></p><p>可以看到,TestObject占用的内存空间大小（Shallow Size）为32 bytes。</p><p>关于Retained Size和Shallow Size的区别，可以参看：<br><a href="http://blog.csdn.net/e5945/article/details/7708253"><a href="http://blog.csdn.net/e5945/article/details/7708253">Shallow Size和 Retained Size的区别</a></a></p><p>当指针压缩关闭时(-XX:-UseCompressedOops)，在64位机器上，TestObject占用的内存大小应为：</p><blockquote><p>16(Header) + 4(int) + 8(double) + 8(reference) = 36 (bytes), 8字节对齐后为 40 bytes。</p></blockquote><p>JProfile的结果为：</p><p><img src="https://segmentfault.com/img/bVDf5q?w=735&h=183" alt="img"></p><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a><strong>包装类型</strong></h3><p>包装类（Boolean/Byte/Short/Character/Integer/Long/Double/Float）占用内存的大小等于对象头大小加上底层基础数据类型的大小。</p><p>包装类型的对象内存占用情况如下：</p><table><thead><tr><th>Numberic Wrappers</th><th>+useCompressedOops</th><th>-useCompressedOops</th></tr></thead><tbody><tr><td>Byte, Boolean</td><td>16 bytes</td><td>24 bytes</td></tr><tr><td>Short, Character</td><td>16 bytes</td><td>24 bytes</td></tr><tr><td>Integer, Float</td><td>16 bytes</td><td>24 bytes</td></tr><tr><td>Long, Double</td><td>24 bytes</td><td>24 bytes</td></tr></tbody></table><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h3><p>64位机器上，数组对象的对象头占用24 bytes，启用压缩后占用16字节。比普通对象占用内存多是因为需要额外的空间存储数组的长度。基础数据类型数组占用的空间包括数组对象头以及基础数据类型数据占用的内存空间。由于对象数组中存放的是对象的引用，所以对象数组本身的大小=数组对象头+length * 引用指针大小，总大小为对象数组本身大小+存放的数据的大小之和。</p><p>举两个例子：</p><ul><li>int[10]: 开启压缩：16 + 10 * 4 = 56 bytes；</li></ul><p><img src="https://segmentfault.com/img/bVDgBP?w=717&h=318" alt="img"></p><p>关闭压缩：24 + 10 * 4 = 64bytes。</p><p><img src="https://segmentfault.com/img/bVDgCA?w=724&h=344" alt="img"></p><ul><li>new Integer[3]:</li></ul><pre><code>    关闭压缩：    Integer数组本身：24(header) + 3 * 8(Integer reference) = 48 bytes;    总共：48 + 3 * 24(Integer) = 120 bytes。</code></pre><p><img src="https://segmentfault.com/img/bVDgFT?w=729&h=263" alt="img"></p><pre><code>    开启压缩：    Integer数组本身：16(header) + 3 * 4(Integer reference) = 28(padding) -&gt; 32 (bytes)    总共：32 + 3 * 16(Integer) = 80 (bytes)</code></pre><p><img src="https://segmentfault.com/img/bVDgGC?w=732&h=267" alt="img"></p><h3 id="String"><a href="#String" class="headerlink" title="String"></a><strong>String</strong></h3><p>在JDK1.7及以上版本中，String包含2个属性，一个用于存放字符串数据的char[], 一个int类型的hashcode, 部分源代码如下：</p><pre><code>public final class String    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;    /** The value is used for character storage. */    private final char value[];    /** Cache the hash code for the string */    private int hash; // Default to 0&#125;</code></pre><p>因此，在关闭指针压缩时，一个String本身需要 16(Header) + 8(char[] reference) + 4(int) = 32 bytes。除此之外，一个char[]占用24 + length * 2 bytes(8字节对齐), 即一个String占用的内存空间大小为：</p><blockquote><p>56 + length * 2 bytes (8字节对齐)。举几个例子。</p></blockquote><ul><li>一个空字符串(“”)的大小应为：56 + 0 * 2 bytes = 56 bytes。JProfiler结果：</li></ul><p><img src="https://segmentfault.com/img/bVDgeh?w=714&h=175" alt="img"></p><ul><li>字符串”abc”的大小应为：56 + 3 * 2 = 62(8字节对齐)-&gt;64 (bytes)</li></ul><p><img src="https://segmentfault.com/img/bVDgem?w=724&h=178" alt="img"></p><ul><li>字符串”abcde”的大小应为：56 + 5 * 2 = 66-&gt;72 (bytes)</li></ul><p><img src="https://segmentfault.com/img/bVDgeq?w=721&h=172" alt="img"></p><ul><li>字符串”abcde”在开启指针压缩时的大小为：</li></ul><pre><code>   String本身：12(Header) + 4(char[] reference) + 4(int hash) = 20(padding) -&gt; 24 (bytes);      存储数据：16(char[] header) + 5*2 = 26(padding) -&gt; 32 (bytes)            总共：24 + 32 = 56 (bytes)  </code></pre><p><img src="https://segmentfault.com/img/bVDgff?w=718&h=200" alt="img"></p><h2 id="常用数据结构内存占用"><a href="#常用数据结构内存占用" class="headerlink" title="常用数据结构内存占用"></a>常用数据结构内存占用</h2><p>根据上面的内存占用计算规则，可以计算出一个对象在内存中的占用空间大小情况，下面举例分析下Java中的Enum, ArrayList及HashMap的内存占用情况，读者可以仿照分析计算过程来计算其他数据结构的内存占用情况。</p><p><strong>注：</strong> 下面的分析计算基于HotSpot Jvm, JDK1.8, 64位机器，开启指针压缩。</p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>创建enum时，编译器会生成一个相关的类，这个类继承自java.lang.Enum。Enum类拥有两个属性变量，分别为int的ordinal和String的name, 相关源码如下：</p><pre><code>public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt;        implements Comparable&lt;E&gt;, Serializable &#123;    /**     * The name of this enum constant, as declared in the enum declaration.     * Most programmers should use the &#123;@link #toString&#125; method rather than     * accessing this field.     */    private final String name;    /**     * The ordinal of this enumeration constant (its position     * in the enum declaration, where the initial constant is assigned     * an ordinal of zero).     *     * Most programmers will have no use for this field.  It is designed     * for use by sophisticated enum-based data structures, such as     * &#123;@link java.util.EnumSet&#125; and &#123;@link java.util.EnumMap&#125;.     */    private final int ordinal;&#125;</code></pre><p>以下面的TestEnum为例进行枚举类的内存占用分析</p><pre><code>public enum TestEnum &#123;        ONE(1, &quot;one&quot;),        TWO(2, &quot;two&quot;);        private int code;        private String desc;        TestEnum(int code, String desc) &#123;            this.code = code;            this.desc = desc;        &#125;        public int getCode() &#123;            return code;        &#125;        public String getDesc() &#123;            return desc;        &#125;&#125;</code></pre><p>这里TestEnum的每个实例除了父类的两个属性外，还拥有一个int的code及String的desc属性，所以一个TestEnum的实例本身所占用的内存大小为：</p><blockquote><p>12(header) + 4(ordinal) + 4(name reference) + 4(code) + 4(desc reference) = 28(padding) -&gt; 32 bytes.</p></blockquote><p>总共占用的内存大小为：<br>按照上面对字符串类型的分析，desc和name都占用：48 bytes。<br>所以TestEnum.ONE占用总内存大小为：</p><blockquote><p>12(header) + 4(ordinal) + 4(code) + 48 * 2(desc, name) + 4(desc reference) + 4(name reference) = 128 (bytes)</p></blockquote><p>JProfiler中的结果可以验证上述分析：<br><img src="https://segmentfault.com/img/bVDjFp?w=743&h=259" alt="img"></p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>在分析ArrayList的内存之前，有必须先了解下ArrayList的实现原理。ArrayList实现List接口，底层使用数组保存所有元素。其操作基本上是对数组的操作。下面分析下源代码：</p><h5 id="1-底层使用数组保存数据："><a href="#1-底层使用数组保存数据：" class="headerlink" title="1. 底层使用数组保存数据："></a>1. 底层使用数组保存数据：</h5><pre><code>    /**     * The array buffer into which the elements of the ArrayList are stored.     * The capacity of the ArrayList is the length of this array buffer. Any     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA     * will be expanded to DEFAULT_CAPACITY when the first element is added.     */    transient Object[] elementData; // non-private to simplify nested class access</code></pre><h5 id="2-构造方法："><a href="#2-构造方法：" class="headerlink" title="2. 构造方法："></a>2. 构造方法：</h5><p>ArrayList提供了三种方式的构造器，可以构造一个默认的空列表、构造一个指定初始容量的空列表及构造一个包含指定collection元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列。</p><pre><code>    /**     * Shared empty array instance used for default sized empty instances. We     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when     * first element is added.     */    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;    /**     * Constructs an empty list with the specified initial capacity.     *     * @param  initialCapacity  the initial capacity of the list     * @throws IllegalArgumentException if the specified initial capacity     *         is negative     */    public ArrayList(int initialCapacity) &#123;        if (initialCapacity &gt; 0) &#123;            this.elementData = new Object[initialCapacity];        &#125; else if (initialCapacity == 0) &#123;            this.elementData = EMPTY_ELEMENTDATA;        &#125; else &#123;            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+                                               initialCapacity);        &#125;    &#125;    /**     * Constructs an empty list with an initial capacity of ten.     */    public ArrayList() &#123;        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;    &#125;    /**     * Constructs a list containing the elements of the specified     * collection, in the order they are returned by the collection&#39;s     * iterator.     *     * @param c the collection whose elements are to be placed into this list     * @throws NullPointerException if the specified collection is null     */    public ArrayList(Collection&lt;? extends E&gt; c) &#123;        elementData = c.toArray();        if ((size = elementData.length) != 0) &#123;            // c.toArray might (incorrectly) not return Object[] (see 6260652)            if (elementData.getClass() != Object[].class)                elementData = Arrays.copyOf(elementData, size, Object[].class);        &#125; else &#123;            // replace with empty array.            this.elementData = EMPTY_ELEMENTDATA;        &#125;    &#125;</code></pre><h5 id="3-存储："><a href="#3-存储：" class="headerlink" title="3. 存储："></a>3. 存储：</h5><p>ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection&lt;? extends E&gt; c)等，这里着重介绍一下add(E e)方法。</p><pre><code>    /**     * Appends the specified element to the end of this list.     *     * @param e element to be appended to this list     * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;@link Collection#add&#125;)     */    public boolean add(E e) &#123;        ensureCapacityInternal(size + 1);  // Increments modCount!!        elementData[size++] = e;        return true;    &#125;</code></pre><p>add方法将指定的元素添加到此列表的尾部。这里注意下ensureCapacityInternal方法，这个方法会检查添加后元素的个数是否会超过当前数组的长度，如果超出，数组将会进行扩容。</p><pre><code>    /**     * Default initial capacity.     */    private static final int DEFAULT_CAPACITY = 10;    /**     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if     * necessary, to ensure that it can hold at least the number of elements     * specified by the minimum capacity argument.     *     * @param   minCapacity   the desired minimum capacity     */    public void ensureCapacity(int minCapacity) &#123;        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)            // any size if not default element table            ? 0            // larger than default for default empty table. It&#39;s already            // supposed to be at default size.            : DEFAULT_CAPACITY;        if (minCapacity &gt; minExpand) &#123;            ensureExplicitCapacity(minCapacity);        &#125;    &#125;    private void ensureCapacityInternal(int minCapacity) &#123;        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);        &#125;        ensureExplicitCapacity(minCapacity);    &#125;    private void ensureExplicitCapacity(int minCapacity) &#123;        modCount++;        // overflow-conscious code        if (minCapacity - elementData.length &gt; 0)            grow(minCapacity);    &#125;</code></pre><p>如果初始时没有指定ArrayList大小，在第一次调用add方法时，会初始化数组默认最小容量为10。看下grow方法的源码：</p><pre><code>    /**     * Increases the capacity to ensure that it can hold at least the     * number of elements specified by the minimum capacity argument.     *     * @param minCapacity the desired minimum capacity     */    private void grow(int minCapacity) &#123;        // overflow-conscious code        int oldCapacity = elementData.length;        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);        if (newCapacity - minCapacity &lt; 0)            newCapacity = minCapacity;        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)            newCapacity = hugeCapacity(minCapacity);        // minCapacity is usually close to size, so this is a win:        elementData = Arrays.copyOf(elementData, newCapacity);    &#125;</code></pre><p>从上述代码可以看出，数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组扩容的增长是原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，应该尽量避免数组容量的扩张。当可预知要保存的元素的数量时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p><p>ArrayList其他操作读取删除等原理这里不作介绍了。</p><h5 id="4-内存占用"><a href="#4-内存占用" class="headerlink" title="4. 内存占用"></a>4. 内存占用</h5><p>下面开始分析ArrayList的内存占用情况。ArrayList继承AbstractList类，AbstractList拥有一个int类型的modCount属性，ArrayList本身拥有一个int类型的size属性和一个数组属性。所以一个ArrayList实例本身的的大小为：</p><blockquote><p>12(header) + 4(modCount) + 4(size) + 4(elementData reference) = 24 (bytes)</p></blockquote><p>下面分析一个只有一个Integer(1)元素的ArrayList<Integer>实例占用的内存大小。</p><pre><code>   ArrayList&lt;Integer&gt; testList = Lists.newArrayList();   testList.add(1);</code></pre><p>根据上面对ArrayList原理的介绍，当调用add方法时，ArrayList会初始化一个默认大小为10的数组，而数组中保存的Integer(1)实例大小为16 bytes。则testList占用的内存大小为：</p><blockquote><p>24(ArrayList itselft) + 16(elementData array header) + 10 * 4(elemetData reference) + 16(Integer) = 96 (bytes)</p></blockquote><p>JProfiler中的结果验证了上述分析：</p><p><img src="https://segmentfault.com/img/bVDkk7?w=734&h=269" alt="img"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>要分析HashMap的内存占用，同样需要先了解HashMap的实现原理。</p><h5 id="1-HashMap的数据结构"><a href="#1-HashMap的数据结构" class="headerlink" title="1. HashMap的数据结构"></a>1. HashMap的数据结构</h5><p>HashMap是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p><img src="https://segmentfault.com/img/bVDlSq?w=600&h=357" alt="img"></p><p>从图上可以看出，HashMap底层是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，初始化一个数组，源码如下：</p><pre><code>    /**     * The table, initialized on first use, and resized as     * necessary. When allocated, length is always a power of two.     * (We also tolerate length zero in some operations to allow     * bootstrapping mechanics that are currently not needed.)     */    transient Node&lt;K,V&gt;[] table;</code></pre><p>Node是链表中一个结点，一个Node对象保存了一对HashMap的Key,Value以及指向下一个节点的指针，源码如下：</p><pre><code>     /**     * Basic hash bin node, used for most entries.  (See below for     * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)     */    static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;        final int hash;        final K key;        V value;        Node&lt;K,V&gt; next;        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;            this.hash = hash;            this.key = key;            this.value = value;            this.next = next;        &#125;     &#125;</code></pre><h5 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2. 构造方法"></a>2. 构造方法</h5><p>HashMap提供了四种方式的构造器，分别为指定初始容量及负载因子构造器，指定初始容量构造器，不指定初始容量及负载因子构造器，以及根据已有Map生成新Map的构造器。</p><pre><code>    /**     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial     * capacity and load factor.     *     * @param  initialCapacity the initial capacity     * @param  loadFactor      the load factor     * @throws IllegalArgumentException if the initial capacity is negative     *         or the load factor is nonpositive     */    public HashMap(int initialCapacity, float loadFactor) &#123;        if (initialCapacity &lt; 0)            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +                                               initialCapacity);        if (initialCapacity &gt; MAXIMUM_CAPACITY)            initialCapacity = MAXIMUM_CAPACITY;        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +                                               loadFactor);        this.loadFactor = loadFactor;        this.threshold = tableSizeFor(initialCapacity);    &#125;    /**     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial     * capacity and the default load factor (0.75).     *     * @param  initialCapacity the initial capacity.     * @throws IllegalArgumentException if the initial capacity is negative.     */    public HashMap(int initialCapacity) &#123;        this(initialCapacity, DEFAULT_LOAD_FACTOR);    &#125;    /**     * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity     * (16) and the default load factor (0.75).     */    public HashMap() &#123;        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted    &#125;    /**     * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the     * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with     * default load factor (0.75) and an initial capacity sufficient to     * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.     *     * @param   m the map whose mappings are to be placed in this map     * @throws  NullPointerException if the specified map is null     */    public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;        this.loadFactor = DEFAULT_LOAD_FACTOR;        putMapEntries(m, false);    &#125;</code></pre><p>如果不指定初始容量及负载因子，默认的初始容量为16， 负载因子为0.75。</p><p>负载因子衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。</p><p>HashMap有一个容量阈值属性threshold，是根据初始容量和负载因子计算得出threshold=capacity*loadfactor， 如果HashMap中数组元素的个数超过这个阈值，则HashMap会进行扩容。HashMap底层的数组长度总是2的n次方，每次扩容容量为原来的2倍。扩容的目的是为了减少hash冲突，提高查询效率。而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</p><h5 id="3-数据的存储"><a href="#3-数据的存储" class="headerlink" title="3. 数据的存储"></a>3. 数据的存储</h5><pre><code>    public V put(K key, V value) &#123;        return putVal(hash(key), key, value, false, true);    &#125;    /**     * Implements Map.put and related methods     *     * @param hash hash for key     * @param key the key     * @param value the value to put     * @param onlyIfAbsent if true, don&#39;t change existing value     * @param evict if false, the table is in creation mode.     * @return previous value, or null if none     */    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,                   boolean evict) &#123;        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;        //初始化数组的大小为16，容量阈值为16*0.75=12        if ((tab = table) == null || (n = tab.length) == 0)            n = (tab = resize()).length;        //如果key的hash值对应的数组位置没有元素，则新建Node放入此位置        if ((p = tab[i = (n - 1) &amp; hash]) == null)            tab[i] = newNode(hash, key, value, null);        else &#123;            Node&lt;K,V&gt; e; K k;            if (p.hash == hash &amp;&amp;                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))                e = p;            else if (p instanceof TreeNode)                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);            else &#123;                for (int binCount = 0; ; ++binCount) &#123;                    if ((e = p.next) == null) &#123;                        p.next = newNode(hash, key, value, null);                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st                            treeifyBin(tab, hash);                        break;                    &#125;                    if (e.hash == hash &amp;&amp;                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))                        break;                    p = e;                &#125;            &#125;            if (e != null) &#123; // existing mapping for key                V oldValue = e.value;                if (!onlyIfAbsent || oldValue == null)                    e.value = value;                afterNodeAccess(e);                return oldValue;            &#125;        &#125;        ++modCount;        if (++size &gt; threshold)            resize();        afterNodeInsertion(evict);        return null;    &#125;</code></pre><p>从上面的源代码中可以看出：当我们往HashMap中put元素的时候，先根据key的hashCode重新计算hash值，根据hash值得到这个元素在数组中的位置（即下标），如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。</p><p>关于HashMap数据的读取这里就不作介绍了。</p><h5 id="4-HashMap内存占用"><a href="#4-HashMap内存占用" class="headerlink" title="4. HashMap内存占用"></a>4. HashMap内存占用</h5><p>这里分析一个只有一组键值对的HashMap, 结构如下：</p><pre><code>    Map&lt;Integer, Integer&gt; testMap = Maps.newHashMap();    testMap.put(1, 2);</code></pre><p>首先分析HashMap本身的大小。HashMap对象拥有的属性包括：</p><pre><code>    /**     * The table, initialized on first use, and resized as     * necessary. When allocated, length is always a power of two.     * (We also tolerate length zero in some operations to allow     * bootstrapping mechanics that are currently not needed.)     */    transient Node&lt;K,V&gt;[] table;    /**     * Holds cached entrySet(). Note that AbstractMap fields are used     * for keySet() and values().     */    transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;    /**     * The number of key-value mappings contained in this map.     */    transient int size;    /**     * The number of times this HashMap has been structurally modified     * Structural modifications are those that change the number of mappings in     * the HashMap or otherwise modify its internal structure (e.g.,     * rehash).  This field is used to make iterators on Collection-views of     * the HashMap fail-fast.  (See ConcurrentModificationException).     */    transient int modCount;    /**     * The next size value at which to resize (capacity * load factor).     *     * @serial     */    // (The javadoc description is true upon serialization.    // Additionally, if the table array has not been allocated, this    // field holds the initial array capacity, or zero signifying    // DEFAULT_INITIAL_CAPACITY.)    int threshold;    /**     * The load factor for the hash table.     *     * @serial     */    final float loadFactor;</code></pre><p>HashMap继承了AbstractMap&lt;K,V&gt;, AbstractMap有两个属性：</p><pre><code>     transient Set&lt;K&gt;        keySet;     transient Collection&lt;V&gt; values;</code></pre><p>所以一个HashMap对象本身的大小为：</p><blockquote><p>12(header) + 4(table reference) + 4(entrySet reference) + 4(size) + 4(modCount) + 4(threshold) + 8(loadFactor) + 4(keySet reference) + 4(values reference) = 48(bytes)</p></blockquote><p>接着分析testMap实例在总共占用的内存大小。根据上面对HashMap原理的介绍，可知每对键值对对应一个Node对象。根据上面的Node的数据结构，一个Node对象的大小为：</p><blockquote><p>12(header) + 4(hash reference) + 4(key reference) + 4(value reference) + 4(next pointer reference) = 28 (padding) -&gt; 32(bytes)</p></blockquote><p>加上Key和Value两个Integer对象，一个Node占用内存总大小为：32 + 2 * 16 = 64(bytes)</p><p>JProfiler中结果：</p><p><img src="https://segmentfault.com/img/bVDmzg?w=706&h=249" alt="img"></p><p>下面分析HashMap的Node数组的大小。根据上面HashMap的原理可知，在不指定容量大小的情况下，HashMap初始容量为16，所以testMap的Node[]占用的内存大小为：</p><blockquote><p>16(header) + 16 * 4(Node reference) + 64(Node) = 144(bytes)</p></blockquote><p>JProfile结果：</p><p><img src="https://segmentfault.com/img/bVDmAh?w=734&h=268" alt="img"></p><p>所以，testMap占用的内存总大小为：</p><blockquote><p>48(map itself) + 144(Node[]) = 192(bytes)</p></blockquote><p>JProfile结果：</p><p><img src="https://segmentfault.com/img/bVDmAG?w=730&h=345" alt="img"></p><p>这里只用一个例子说明如何对HashMap进行占用内存大小的计算，根据HashMap初始化容量的大小，以及扩容的影响，HashMap占用内存大小要进行具体分析，不过思路都是一致的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上对计算Java对象占用内存的基本规则及方法进行了介绍，并通过分析枚举类，ArrayList, HashMap的内存占用情况介绍了分析复杂对象内存占用的基本方法，实际工作中需要精确计算Java对象内存占用情况的场景不多，不过保持一个良好的开发规范和约束是有必要的，而且对内存敏感的手机及用户来说，这是一个值得关注的问题，了解这方面内容还是必不可少的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://segmentfault.com/a/1190000006933272&quot;&gt;查看原文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;之前说过在Android中关于enum的使用，对内存的占用比较大，所以就了解了一下内存占用方面，基本上大同小异，下面是我觉得比较全面的描述，重新排版、整理，如果有时间，希望你能好好了解一下。&lt;/p&gt;
&lt;p&gt;下面的内容深入分析并验证了不同Java对象占用内存空间大小的情况。对于不同的jvm实现，Java对象占用的内存空间大小可能不尽相同，本文主要分析HotSpot jvm中的情况，实验环境为64位window10系统、JDK1.8，使用JProfiler进行结论验证。&lt;/p&gt;
&lt;h2 id=&quot;Java对象内存布局&quot;&gt;&lt;a href=&quot;#Java对象内存布局&quot; class=&quot;headerlink&quot; title=&quot;Java对象内存布局&quot;&gt;&lt;/a&gt;Java对象内存布局&lt;/h2&gt;&lt;p&gt;Java对象的内存布局包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象头(Header)&lt;/li&gt;
&lt;li&gt;实例数据(Instance Data)&lt;/li&gt;
&lt;li&gt;补齐填充(Padding)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对象头：&quot;&gt;&lt;a href=&quot;#对象头：&quot; class=&quot;headerlink&quot; title=&quot;对象头：&quot;&gt;&lt;/a&gt;对象头：&lt;/h3&gt;&lt;p&gt;在64位机器上，默认不开启指针压缩（-XX:-UseCompressedOops）的情况下，对象头占用12bytes，开启指针压缩（-XX:+UseCompressedOops）则占用16bytes。&lt;/p&gt;
&lt;h3 id=&quot;实例数据：&quot;&gt;&lt;a href=&quot;#实例数据：&quot; class=&quot;headerlink&quot; title=&quot;实例数据：&quot;&gt;&lt;/a&gt;实例数据：&lt;/h3&gt;&lt;p&gt;原生类型（primitive type）的内存占用如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Primitive Type&lt;/th&gt;
&lt;th&gt;Memory Required(bytes)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;byte, boolean&lt;/td&gt;
&lt;td&gt;1 byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short, char&lt;/td&gt;
&lt;td&gt;2 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int, float&lt;/td&gt;
&lt;td&gt;4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long, double&lt;/td&gt;
&lt;td&gt;8 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注：对象引用（reference）类型在64位机器上，关闭指针压缩时占用4bytes， 开启时占用8bytes&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="内存" scheme="https://goghtsui.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="JVM" scheme="https://goghtsui.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Android知识点之enum</title>
    <link href="https://goghtsui.github.io/2017/01/19/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Benum/undefined/"/>
    <id>https://goghtsui.github.io/2017/01/19/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8Benum/undefined/</id>
    <published>2017-01-19T07:18:15.000Z</published>
    <updated>2021-01-26T02:34:57.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>enum在Android应不应该使用？</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>关于enum，Android Developers中这样一句话：</p><blockquote><p> enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android</p></blockquote><p>就是说enum比静态常量两倍多的内存占用，应该尽量减少使用。当然了，这里说的是减少并不是禁止，要知道，enum的产生，注定其必定有适合的应用场景，而且它带来的代码简洁性和可读性，都是不可小觑的。</p><p>所以，如果在不使用enum的情况下是有替代方案的：</p><ul><li>使用静态常量的形式替代</li><li>使用Typedef Annotations替代</li></ul><p>第一种没什么说的，下面就重点说一说第二种，就是通过注解的形式来代替，注解是由 support 包提供的功能，如果使用，需要添加 support 包到module。</p><a id="more"></a><p>直接上代码吧：</p><pre><code class="java">// 定义申请常量列表，声明NavigationMode形式的注解（三个注解是固定形式）@IntDef(&#123;NAVIGATION_MODE_STANDARD, NAVIGATION_MODE_LIST, NAVIGATION_MODE_TABS&#125;)@Retention(RetentionPolicy.SOURCE)public @interface NavigationMode &#123;&#125;// 声明静态常量public static final int NAVIGATION_MODE_STANDARD = 0;public static final int NAVIGATION_MODE_LIST = 1;public static final int NAVIGATION_MODE_TABS = 2;</code></pre><p>如果它被当作参数或者返回值时你可以这样写：</p><pre><code class="java">// 使用注解装饰目标方法@NavigationModepublic abstract int getNavigationMode();// 添加注解public abstract void setNavigationMode(@NavigationMode int mode);</code></pre><p>相信看到这些代码，就不需要什么说明了吧，就按照这样的形式使用就行。通过注解的方式去实现，你可以通过@IntDef和@StringDef来声明不同的数据类型。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果你还不太确定你应不应该使用enum，你可以看看这篇文章：</p><p><a href="http://stackoverflow.com/questions/29183904/should-i-strictly-avoid-using-enums-on-android">在Android中到底该不该使用enum</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;enum在Android应不应该使用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;关于enum，Android Developers中这样一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是说enum比静态常量两倍多的内存占用，应该尽量减少使用。当然了，这里说的是减少并不是禁止，要知道，enum的产生，注定其必定有适合的应用场景，而且它带来的代码简洁性和可读性，都是不可小觑的。&lt;/p&gt;
&lt;p&gt;所以，如果在不使用enum的情况下是有替代方案的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用静态常量的形式替代&lt;/li&gt;
&lt;li&gt;使用Typedef Annotations替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种没什么说的，下面就重点说一说第二种，就是通过注解的形式来代替，注解是由 support 包提供的功能，如果使用，需要添加 support 包到module。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="enum" scheme="https://goghtsui.github.io/tags/enum/"/>
    
    <category term="Annotations" scheme="https://goghtsui.github.io/tags/Annotations/"/>
    
    <category term="IntDef" scheme="https://goghtsui.github.io/tags/IntDef/"/>
    
    <category term="StringDef" scheme="https://goghtsui.github.io/tags/StringDef/"/>
    
  </entry>
  
  <entry>
    <title>Android知识点之Tanlayout</title>
    <link href="https://goghtsui.github.io/2017/01/19/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8BTablayout/undefined/"/>
    <id>https://goghtsui.github.io/2017/01/19/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%8BTablayout/undefined/</id>
    <published>2017-01-19T01:56:58.000Z</published>
    <updated>2021-01-26T02:34:57.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>开发过程中多多少少会遇到一些坑，也会留下一些坑，还有一些小的容易忽略的细节，或者从其他大牛那里了解到的知识点，发现了就整理下来，做个备注，如果恰好有人遇到了，拿走别客气。</p><h2 id="Tablayout"><a href="#Tablayout" class="headerlink" title="Tablayout"></a>Tablayout</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>为什么tablayout的英文（字母）标签名称默认全是大写？</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>tablayout + viewpager + fragment的分页模式很常见了（这只是其中一种），这个不是重点，重点是tablayout的文字属性。</p><p>可能你使用tablayout的显示分类都是中文的， 比如：新闻、数码、设计、前端…   </p><p>不知道你有没有使用过<strong>英文</strong>或者说<strong>字母</strong>的标签名称，你可以直接使用Android Studio 创建一个默认的分页的module，默认标题是英文的，所以你可以看到显示出来全部都是大写的，如果正好使用了这样的名称，那么恭喜你，你可以不用往下看了。但是由于我所使用的是首字母大写的形式，所以最后发现是一个属性的问题：<strong>textAllCaps</strong></p><p>最终的解决方案是，你可以为tablayout自定义一个style，设置textAllCaps属性为false：</p><a id="more"></a><pre><code class="xml"> &lt;style name=&quot;TabLayout.LowerCase&quot; parent=&quot;Widget.Design.TabLayout&quot;&gt;      &lt;item name=&quot;tabTextAppearance&quot;&gt;@style/TabTextAppearance&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;TabTextAppearance&quot; parent=&quot;TextAppearance.Design.Tab&quot;&gt;      &lt;item name=&quot;textAllCaps&quot;&gt;false&lt;/item&gt; &lt;/style&gt;</code></pre><pre><code class="xml">&lt;android.support.design.widget.TabLayout            android:id=&quot;@+id/tabs&quot;            style=&quot;@style/TabLayout.LowerCase&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            app:tabMode=&quot;scrollable&quot;/&gt;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;开发过程中多多少少会遇到一些坑，也会留下一些坑，还有一些小的容易忽略的细节，或者从其他大牛那里了解到的知识点，发现了就整理下来，做个备注，如果恰好有人遇到了，拿走别客气。&lt;/p&gt;
&lt;h2 id=&quot;Tablayout&quot;&gt;&lt;a href=&quot;#Tablayout&quot; class=&quot;headerlink&quot; title=&quot;Tablayout&quot;&gt;&lt;/a&gt;Tablayout&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;为什么tablayout的英文（字母）标签名称默认全是大写？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;tablayout + viewpager + fragment的分页模式很常见了（这只是其中一种），这个不是重点，重点是tablayout的文字属性。&lt;/p&gt;
&lt;p&gt;可能你使用tablayout的显示分类都是中文的， 比如：新闻、数码、设计、前端…   &lt;/p&gt;
&lt;p&gt;不知道你有没有使用过&lt;strong&gt;英文&lt;/strong&gt;或者说&lt;strong&gt;字母&lt;/strong&gt;的标签名称，你可以直接使用Android Studio 创建一个默认的分页的module，默认标题是英文的，所以你可以看到显示出来全部都是大写的，如果正好使用了这样的名称，那么恭喜你，你可以不用往下看了。但是由于我所使用的是首字母大写的形式，所以最后发现是一个属性的问题：&lt;strong&gt;textAllCaps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最终的解决方案是，你可以为tablayout自定义一个style，设置textAllCaps属性为false：&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="TabLayout" scheme="https://goghtsui.github.io/tags/TabLayout/"/>
    
    <category term="enum" scheme="https://goghtsui.github.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>Android之应用是否有启动页面(具有CATEGORY_LAUNCHER属性)</title>
    <link href="https://goghtsui.github.io/2016/12/14/Android%E4%B9%8B%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E6%9C%89%E5%90%AF%E5%8A%A8%E9%A1%B5%E9%9D%A2-%E5%85%B7%E6%9C%89CATEGORY-LAUNCHER%E5%B1%9E%E6%80%A7/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/14/Android%E4%B9%8B%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E6%9C%89%E5%90%AF%E5%8A%A8%E9%A1%B5%E9%9D%A2-%E5%85%B7%E6%9C%89CATEGORY-LAUNCHER%E5%B1%9E%E6%80%A7/undefined/</id>
    <published>2016-12-14T11:24:34.000Z</published>
    <updated>2021-01-26T02:34:57.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>最近遇到一个问题，就是判断这个应用是否具有启动页面，即是不是插件或者服务类应用，不需要展示页面的应用。相信开发过Launcher应用的小伙伴肯定知道这个问题怎么解决。很简单，都是细节问题，稍加注意即可，大牛还请绕路。</p><h2 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h2><p>获取所有安装的应用使用这个方法：</p><pre><code class="java">public void getInstalledApps(Context context) &#123;        PackageManager packageManager = context.getPackageManager();        List&lt;PackageInfo&gt; list = packageManager.getInstalledPackages(packageManager.GET_ACTIVITIES);        for (PackageInfo p : list) &#123;            AppInfoEntity infoEntity = new AppInfoEntity();            infoEntity.setAppName(packageManager.getApplicationLabel(p.applicationInfo).toString());            infoEntity.setAppIcon(p.applicationInfo.loadIcon(packageManager));            infoEntity.setAppPkgName(p.applicationInfo.packageName);            infoEntity.setApkPath(p.applicationInfo.sourceDir);            File file = new File(p.applicationInfo.sourceDir);            infoEntity.setAppSize((int) file.length());            int flags = p.applicationInfo.flags;            if ((flags &amp; ApplicationInfo.FLAG_SYSTEM) &gt; 0) &#123;                // 系统应用            &#125; else &#123;                // 安装应用            &#125;        &#125;    &#125;</code></pre><a id="more"></a><p>没错你获取到是所有系统中存在的应用，包括系统和用户安装的，但是恶心的是，所有的插件类，或者系统的服务应用等都一起返回了，但是我们并不需要将这些应用展示给用户，因为他们不是用来与用户交互的，那我们需要自己过滤吗？答案肯定不是的，只是我们获取的方式不对，继续往下看，换个姿势试试：</p><pre><code class="java">public List&lt;AppInfoEntity&gt; getInstalledApps(Context context) &#123;        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);        PackageManager packageManager = context.getPackageManager();        List&lt;ResolveInfo&gt; allApps = packageManager.queryIntentActivities(mainIntent, 0);        for (int i = 0; i &lt; allApps.size(); i++) &#123;            AppInfoEntity infoEntity = new AppInfoEntity();            ResolveInfo info = allApps.get(i);            infoEntity.setAppIcon(info.activityInfo.loadIcon(packageManager));            infoEntity.setAppName(packageManager.getApplicationLabel(info.activityInfo.applicationInfo).toString());            ENTITYLIST.add(infoEntity);        &#125;        return ENTITYLIST;&#125;</code></pre><p>很明显可以看出，这种方式是由针对性的，通过构建一个具有 <strong>Intent.CATEGORY_LAUNCHER</strong> 属性的intent，即有启动页面的应用，所以以这种方式筛选出来的应用就是我们可以展示给用户的应用了，包括系统的和用户安装的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小功能点，平时不太注意，没有什么多说的，其实多看看api就都明白了，没有做不到的，只有想不到的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;最近遇到一个问题，就是判断这个应用是否具有启动页面，即是不是插件或者服务类应用，不需要展示页面的应用。相信开发过Launcher应用的小伙伴肯定知道这个问题怎么解决。很简单，都是细节问题，稍加注意即可，大牛还请绕路。&lt;/p&gt;
&lt;h2 id=&quot;实战篇&quot;&gt;&lt;a href=&quot;#实战篇&quot; class=&quot;headerlink&quot; title=&quot;实战篇&quot;&gt;&lt;/a&gt;实战篇&lt;/h2&gt;&lt;p&gt;获取所有安装的应用使用这个方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void getInstalledApps(Context context) &amp;#123;
        PackageManager packageManager = context.getPackageManager();
        List&amp;lt;PackageInfo&amp;gt; list = packageManager.getInstalledPackages(packageManager.GET_ACTIVITIES);
        for (PackageInfo p : list) &amp;#123;

            AppInfoEntity infoEntity = new AppInfoEntity();
            infoEntity.setAppName(packageManager.getApplicationLabel(p.applicationInfo).toString());
            infoEntity.setAppIcon(p.applicationInfo.loadIcon(packageManager));
            infoEntity.setAppPkgName(p.applicationInfo.packageName);
            infoEntity.setApkPath(p.applicationInfo.sourceDir);
            File file = new File(p.applicationInfo.sourceDir);
            infoEntity.setAppSize((int) file.length());
            int flags = p.applicationInfo.flags;

            if ((flags &amp;amp; ApplicationInfo.FLAG_SYSTEM) &amp;gt; 0) &amp;#123;
                // 系统应用
            &amp;#125; else &amp;#123;
                // 安装应用
            &amp;#125;
        &amp;#125;
    &amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="CATEGORY_LAUNCHER" scheme="https://goghtsui.github.io/tags/CATEGORY-LAUNCHER/"/>
    
  </entry>
  
  <entry>
    <title>Android判断某个应用是否安装</title>
    <link href="https://goghtsui.github.io/2016/12/14/Android%E5%88%A4%E6%96%AD%E6%9F%90%E4%B8%AA%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/14/Android%E5%88%A4%E6%96%AD%E6%9F%90%E4%B8%AA%E5%BA%94%E7%94%A8%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85/undefined/</id>
    <published>2016-12-14T10:36:40.000Z</published>
    <updated>2021-01-26T02:34:57.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在应用开过过程中有这样一个场景：判断某个应用是否已经安装了。你一定会说这个有什么难的，是的，这个问题很简单，不为别的，就为记个笔记，大牛勿喷</p><h2 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h2><h3 id="包名检查"><a href="#包名检查" class="headerlink" title="包名检查"></a>包名检查</h3><pre><code class="java">public static boolean isInstalled(Context context, String packageName) &#123;        try &#123;            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(packageName.trim()                    , PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);            if (packageInfo != null) &#123;                // 说明某个应用使用了该包名                return true;            &#125;        &#125; catch (PackageManager.NameNotFoundException e) &#123;            e.printStackTrace();            return false;        &#125;        return false;&#125;</code></pre><a id="more"></a><h3 id="ACTION检查"><a href="#ACTION检查" class="headerlink" title="ACTION检查"></a>ACTION检查</h3><ul><li>方案一</li></ul><pre><code class="java"> public static boolean isInstalledByAction(Context context, String action) &#123;        final PackageManager packageManager = context.getPackageManager();        final Intent intent = new Intent(action);        List&lt;ResolveInfo&gt; list = packageManager.queryIntentActivities(intent,                PackageManager.MATCH_DEFAULT_ONLY);        if(list.size() &gt; 0)&#123;            // 说明某个应用的activty使用了该action            return true;        &#125;        return false;    &#125;</code></pre><ul><li>方案二</li></ul><pre><code class="java">  public static boolean isInstallByAction(Context context, String action) &#123;          PackageManager packageManager = context.getPackageManager();          Intent intent = new Intent(action);          List&lt;ResolveInfo&gt; resolveInfo = packageManager                  .queryIntentActivities(intent, PackageManager.GET_INTENT_FILTERS);// AS这里报错，但是不影响编译          if (resolveInfo.size() == 0) &#123;              // 说明没有任何应用使用该action              return false;          &#125;          // 说明有某个的某个应用的activity使用了该action          return true;   &#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这三种方案，话说我使用的最多的就是包名，action的从来没注意过，但是开发过程中遇到了，还是记个笔记吧。</p><p>我们都知道action是配置在AndroidManifest.xml中组件的IntentFilter属性里的，所以这些方法最终校验的都是该属性。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在应用开过过程中有这样一个场景：判断某个应用是否已经安装了。你一定会说这个有什么难的，是的，这个问题很简单，不为别的，就为记个笔记，大牛勿喷&lt;/p&gt;
&lt;h2 id=&quot;代码篇&quot;&gt;&lt;a href=&quot;#代码篇&quot; class=&quot;headerlink&quot; title=&quot;代码篇&quot;&gt;&lt;/a&gt;代码篇&lt;/h2&gt;&lt;h3 id=&quot;包名检查&quot;&gt;&lt;a href=&quot;#包名检查&quot; class=&quot;headerlink&quot; title=&quot;包名检查&quot;&gt;&lt;/a&gt;包名检查&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static boolean isInstalled(Context context, String packageName) &amp;#123;
        try &amp;#123;
            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(packageName.trim()
                    , PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);
            if (packageInfo != null) &amp;#123;
                // 说明某个应用使用了该包名
                return true;
            &amp;#125;
        &amp;#125; catch (PackageManager.NameNotFoundException e) &amp;#123;
            e.printStackTrace();
            return false;
        &amp;#125;

        return false;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="GET_INTENT_FILTERS" scheme="https://goghtsui.github.io/tags/GET-INTENT-FILTERS/"/>
    
    <category term="MATCH_DEFAULT_ONLY" scheme="https://goghtsui.github.io/tags/MATCH-DEFAULT-ONLY/"/>
    
  </entry>
  
  <entry>
    <title>ARGB_8888-ALPHA_8-ARGB_4444-RGB_565的区别</title>
    <link href="https://goghtsui.github.io/2016/12/12/ARGB-8888-ALPHA-8-ARGB-4444-RGB-565%E7%9A%84%E5%8C%BA%E5%88%AB/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/12/ARGB-8888-ALPHA-8-ARGB-4444-RGB-565%E7%9A%84%E5%8C%BA%E5%88%AB/undefined/</id>
    <published>2016-12-12T07:45:45.000Z</published>
    <updated>2021-01-26T02:34:57.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>作为Android开发程序猿，OOM的异常相比都遇到过吧，对内存及性能的优化，一直以来都是一个很头疼的问题。Bitmap就是其中的一大杀手，一般使用都是需要经过压缩或者取缩略图的，可能会影响其尺寸大小，然而除了尺寸大小，我们还应该关注一下其色彩相关的细节。</p><h2 id="Bitmap-Config"><a href="#Bitmap-Config" class="headerlink" title="Bitmap.Config"></a>Bitmap.Config</h2><p>在Bitmap类中，有一个内部类Config，是枚举类型，在构造Bitmap的时候会最为参数使用到：createBitmap(int width, int height, Bitmap.Config config)，这里面有什么需要注意的地方呢？</p><p>就是下面这几个枚举值：</p><h3 id="ALPHA-8"><a href="#ALPHA-8" class="headerlink" title="ALPHA_8"></a>ALPHA_8</h3><ul><li>每个像素存储一个单一的透明度（alpha）通道</li><li>没有颜色信息存储（没有RGB通道）</li><li>每像素占用1字节（8位）</li></ul><a id="more"></a><h3 id="GRB-565"><a href="#GRB-565" class="headerlink" title="GRB_565"></a>GRB_565</h3><ul><li>每像素存储2个字节（16位），只有RGB通道<ul><li>R-红色存储5位的精度</li><li>G-绿色存储6位的精度</li><li>B-蓝色存储5位的精度</li></ul></li><li>此配置可以用在使用不透明的位图，不需要色彩保真度高的地方</li></ul><h3 id="ARGB-4444"><a href="#ARGB-4444" class="headerlink" title="ARGB_4444"></a>ARGB_4444</h3><ul><li>每像素存储2个字节（16位）</li><li>R、G、B颜色通道和透明(alpha)通道，每个通道占用4位</li><li>有alpha通道的图片可以使用该属性</li><li>已废弃，因为该属性下图片质量差</li><li>在SDK版本为KITKAT，使用这个属性创建bitmap默认会被ARGB_8888代替</li></ul><h3 id="ARGB-8888"><a href="#ARGB-8888" class="headerlink" title="ARGB_8888"></a>ARGB_8888</h3><ul><li>每像素存储4个字节（32位）</li><li>RGB和alpha通道存储8位的精度</li><li>这个属性很灵活，创建的高质量的bitmap，建议使用</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，我们来计算一下bitmap的大小：</p><ul><li><p>bitmap大小 = 像素数 * 每个像素的内存大小 = bitmap的长 * bitmap的宽 * 每像素占用内存位数</p></li><li><p>计算一张480 * 800的bitmap的大小（以ARGB_8888为例）：</p><p>480 * 800 * 4（ARGB_8888每像素占用字节） = 1 536 000 byte =&gt; 1 536 000 / 1024 = 1500 kb（1.5M）</p></li></ul><p>这样我们就可以精确计算bitmap的大小了，是不是说ARGB_8888占用内存比较大，就不去使用了呢？并不是这样的，分析如下：</p><ul><li><strong>ALPHA_8</strong> 只有alpha通道，使用场景单一，不推荐</li><li><strong>ARGB_4444</strong> 已经废弃，且创建的位图质量差，不推荐</li><li><strong>ARGB_565</strong> 能够在保证图片质量的情况下减少内存开销，唯一缺点就是没有alpha通道</li><li><strong>ARGB_8888</strong> 能够创建高质量的图片，但是内存开销比较大</li></ul><p>所以，并没有哪个属性更好，只有更合适，依据场景和需求使用不同的属性</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;作为Android开发程序猿，OOM的异常相比都遇到过吧，对内存及性能的优化，一直以来都是一个很头疼的问题。Bitmap就是其中的一大杀手，一般使用都是需要经过压缩或者取缩略图的，可能会影响其尺寸大小，然而除了尺寸大小，我们还应该关注一下其色彩相关的细节。&lt;/p&gt;
&lt;h2 id=&quot;Bitmap-Config&quot;&gt;&lt;a href=&quot;#Bitmap-Config&quot; class=&quot;headerlink&quot; title=&quot;Bitmap.Config&quot;&gt;&lt;/a&gt;Bitmap.Config&lt;/h2&gt;&lt;p&gt;在Bitmap类中，有一个内部类Config，是枚举类型，在构造Bitmap的时候会最为参数使用到：createBitmap(int width, int height, Bitmap.Config config)，这里面有什么需要注意的地方呢？&lt;/p&gt;
&lt;p&gt;就是下面这几个枚举值：&lt;/p&gt;
&lt;h3 id=&quot;ALPHA-8&quot;&gt;&lt;a href=&quot;#ALPHA-8&quot; class=&quot;headerlink&quot; title=&quot;ALPHA_8&quot;&gt;&lt;/a&gt;ALPHA_8&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个像素存储一个单一的透明度（alpha）通道&lt;/li&gt;
&lt;li&gt;没有颜色信息存储（没有RGB通道）&lt;/li&gt;
&lt;li&gt;每像素占用1字节（8位）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="ARGB" scheme="https://goghtsui.github.io/tags/ARGB/"/>
    
    <category term="Bitmap.Config" scheme="https://goghtsui.github.io/tags/Bitmap-Config/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 1 之 log得请求与响应</title>
    <link href="https://goghtsui.github.io/2016/12/08/Retrofit-1-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/08/Retrofit-1-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/</id>
    <published>2016-12-08T09:38:25.000Z</published>
    <updated>2021-01-26T03:15:32.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在Retrofit使用中，或者说在项目开发过程中，调试是必须的一中技能和方式，其中就包括日志的形式，那么在Retrofit的使用中，应该以怎样的姿态使用日志功能呢？接下来就让我们一起去看看吧。</p><h2 id="Retrofit-1"><a href="#Retrofit-1" class="headerlink" title="Retrofit 1"></a>Retrofit 1</h2><p>默认情况下Retrofit 1是没有启用日志功能的，但是日志功能的开启和使用非常容易，请看代码：</p><pre><code class="java">RestAdapter.Builder builder = new RestAdapter.Builder()      .setEndpoint(API_LOCATION)    .setLogLevel(RestAdapter.LogLevel.FULL) // this is the important line    .setClient(new OkClient(new OkHttpClient()));</code></pre><a id="more"></a><p>如您所见，日志包括整个请求和响应正文。虽然这可能是有用的和必要的，但信息可能太多，反而影响了日志的可读性及应用的性能。</p><h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><ul><li><p>NONE</p><p>没有任何日志，而且会提升你的应用性能。</p></li><li><p>BASIC</p><p>仅记录请求方法和URL以及响应状态代码和执行时间。</p><p><img src="https://futurestud.io/blog/content/images/2015/02/Screen-Shot-2015-02-08-at-4-58-32-PM.png" alt="basic"></p></li><li><p>HEADERS</p><p>记录基本信息以及请求和响应头</p><p><img src="https://futurestud.io/blog/content/images/2015/02/Screen-Shot-2015-02-08-at-4-59-50-PM.png" alt="headers"></p></li><li><p>HEADERS_AND_ARGS</p><p>记录基本信息以及请求和响应对象的toString()信息。</p><p><img src="https://futurestud.io/blog/content/images/2015/02/Screen-Shot-2015-02-08-at-5-02-29-PM.png" alt="headers_and_args"></p></li><li><p>FULL</p><p>记录请求和响应的头，主体和元数据。</p></li></ul><h2 id="Retrofit-2"><a href="#Retrofit-2" class="headerlink" title="Retrofit 2"></a>Retrofit 2</h2><p>请看另外一篇博客：<a href="https://goghtsui.github.io/2016/12/08/Retrofit-2-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/">Retrofit 2 之 log得请求与响应</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在没有必要的情况下，还是不要开启日志功能，因为这本身是一个消耗性能的事情，当然，合理的使用日志功能，是完善应用的一个很好的途径。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在Retrofit使用中，或者说在项目开发过程中，调试是必须的一中技能和方式，其中就包括日志的形式，那么在Retrofit的使用中，应该以怎样的姿态使用日志功能呢？接下来就让我们一起去看看吧。&lt;/p&gt;
&lt;h2 id=&quot;Retrofit-1&quot;&gt;&lt;a href=&quot;#Retrofit-1&quot; class=&quot;headerlink&quot; title=&quot;Retrofit 1&quot;&gt;&lt;/a&gt;Retrofit 1&lt;/h2&gt;&lt;p&gt;默认情况下Retrofit 1是没有启用日志功能的，但是日志功能的开启和使用非常容易，请看代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;RestAdapter.Builder builder = new RestAdapter.Builder()  
    .setEndpoint(API_LOCATION)
    .setLogLevel(RestAdapter.LogLevel.FULL) // this is the important line
    .setClient(new OkClient(new OkHttpClient()));&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Retrofit" scheme="https://goghtsui.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 2 之 log得请求与响应</title>
    <link href="https://goghtsui.github.io/2016/12/08/Retrofit-2-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/08/Retrofit-2-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/</id>
    <published>2016-12-08T09:09:37.000Z</published>
    <updated>2021-01-26T03:15:32.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Retrofit 1集成了用于基本请求和响应调试的日志功能，但是在Retrofit 2中被移除了，因为所需的HTTP层现在完全基于OkHttp。由于许多开发人员要求在Retrofit 2中提供日志记录功能，OkHttp的开发人员在2.6.0版本中添加了一个日志拦截器，接下来，你将看到怎样添加和使用日志拦截器。</p><h2 id="Retrofit-1"><a href="#Retrofit-1" class="headerlink" title="Retrofit 1"></a>Retrofit 1</h2><p>请看另外一篇博客：<a href="https://goghtsui.github.io/2016/12/08/Retrofit-1-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/">Retrofit 1 之 log得请求与响应</a></p><h2 id="Retrofit-2"><a href="#Retrofit-2" class="headerlink" title="Retrofit 2"></a>Retrofit 2</h2><p>Retrofit 2完全依赖于OkHttp进行任何网络操作。OkHttp的开发者已经发布了一个日志拦截器集成的版本，你可以通过以下方式添加依赖：</p><a id="more"></a><pre><code class="xml">compile &#39;com.squareup.okhttp3:logging-interceptor:3.3.1&#39;  </code></pre><p>在OkHttp中，默认是没有拦截日志的，我们需要添加日志拦截器给OkHttp，并且已经提供了日志拦截器，我们只需要激活它给OkHttpClient：</p><pre><code class="java">HttpLoggingInterceptor logging = new HttpLoggingInterceptor();  // set your desired log levellogging.setLevel(Level.BODY);OkHttpClient.Builder httpClient = new OkHttpClient.Builder();  // add your other interceptors …// add logging as last interceptorhttpClient.addInterceptor(logging);  // &lt;-- this is the important line!Retrofit retrofit = new Retrofit.Builder()     .baseUrl(API_BASE_URL)   .addConverterFactory(GsonConverterFactory.create())   .client(httpClient.build())   .build();</code></pre><h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><p>日志太多会影响Android显示，OkHttp日志拦截器提供了四个等级的日志：<strong>NONE</strong> 、<strong>BASIC</strong> 、 <strong>HEADERS</strong> 、<strong>BODY</strong> 。它们分别包含哪些信息？接下来让我们一起去看看：</p><ul><li><p>None</p><p>没有任何日志，而且会提升你的应用性能。</p></li><li><p>Basic</p><p>日志请求类型、url、请求正文的大小、响应状态和响应正文的大小。</p><pre><code class="xml">D/HttpLoggingInterceptor$Logger: --&gt; POST /upload HTTP/1.1 (277-byte body)  D/HttpLoggingInterceptor$Logger: &lt;-- HTTP/1.1 200 OK (543ms, -1-byte body)  </code></pre></li><li><p>Headers</p><p>日志请求和响应头、请求类型、url、响应状态。</p><pre><code class="xml">D/HttpLoggingInterceptor$Logger: --&gt; POST /upload HTTP/1.1  D/HttpLoggingInterceptor$Logger: Accept: application/json  D/HttpLoggingInterceptor$Logger: Content-Type: application/json  D/HttpLoggingInterceptor$Logger: --&gt; END POST  D/HttpLoggingInterceptor$Logger: &lt;-- HTTP/1.1 200 OK (1039ms)  D/HttpLoggingInterceptor$Logger: content-type: text/html; charset=utf-8  D/HttpLoggingInterceptor$Logger: cache-control: no-cache  D/HttpLoggingInterceptor$Logger: vary: accept-encoding  D/HttpLoggingInterceptor$Logger: Date: Wed, 28 Oct 2015 08:24:20 GMT  D/HttpLoggingInterceptor$Logger: Connection: keep-alive  D/HttpLoggingInterceptor$Logger: Transfer-Encoding: chunked  D/HttpLoggingInterceptor$Logger: OkHttp-Selected-Protocol: http/1.1  D/HttpLoggingInterceptor$Logger: OkHttp-Sent-Millis: 1446020610352  D/HttpLoggingInterceptor$Logger: OkHttp-Received-Millis: 1446020610369  D/HttpLoggingInterceptor$Logger: &lt;-- END HTTP  </code></pre></li><li><p>Body</p><p>日志请求和响应标头和正文。</p><pre><code class="xml">D/HttpLoggingInterceptor$Logger: --&gt; POST /upload HTTP/1.1  D/HttpLoggingInterceptor$Logger: --9df820bb-bc7e-4a93-bb67-5f28f4140795  D/HttpLoggingInterceptor$Logger: Content-Disposition: form-data; name=&quot;description&quot;  D/HttpLoggingInterceptor$Logger: Content-Transfer-Encoding: binary  D/HttpLoggingInterceptor$Logger: Content-Type: application/json; charset=UTF-8  D/HttpLoggingInterceptor$Logger: Content-Length: 37  D/HttpLoggingInterceptor$Logger:  D/HttpLoggingInterceptor$Logger: &quot;hello, this is description speaking&quot;  D/HttpLoggingInterceptor$Logger: --9df820bb-bc7e-4a93-bb67-5f28f4140795--  D/HttpLoggingInterceptor$Logger: --&gt; END POST (277-byte body)  D/HttpLoggingInterceptor$Logger: &lt;-- HTTP/1.1 200 OK (1099ms)  D/HttpLoggingInterceptor$Logger: content-type: text/html; charset=utf-8  D/HttpLoggingInterceptor$Logger: cache-control: no-cache  D/HttpLoggingInterceptor$Logger: vary: accept-encoding  D/HttpLoggingInterceptor$Logger: Date: Wed, 28 Oct 2015 08:33:40 GMT  D/HttpLoggingInterceptor$Logger: Connection: keep-alive  D/HttpLoggingInterceptor$Logger: Transfer-Encoding: chunked  D/HttpLoggingInterceptor$Logger: OkHttp-Selected-Protocol: http/1.1  D/HttpLoggingInterceptor$Logger: OkHttp-Sent-Millis: 1446021170095  D/HttpLoggingInterceptor$Logger: OkHttp-Received-Millis: 1446021170107  D/HttpLoggingInterceptor$Logger: Perfect!  D/HttpLoggingInterceptor$Logger: &lt;-- END HTTP (8-byte body) </code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>请根据相应的log等级正确的使用日志管理，这样可以避免不必要的性能消耗。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;Retrofit 1集成了用于基本请求和响应调试的日志功能，但是在Retrofit 2中被移除了，因为所需的HTTP层现在完全基于OkHttp。由于许多开发人员要求在Retrofit 2中提供日志记录功能，OkHttp的开发人员在2.6.0版本中添加了一个日志拦截器，接下来，你将看到怎样添加和使用日志拦截器。&lt;/p&gt;
&lt;h2 id=&quot;Retrofit-1&quot;&gt;&lt;a href=&quot;#Retrofit-1&quot; class=&quot;headerlink&quot; title=&quot;Retrofit 1&quot;&gt;&lt;/a&gt;Retrofit 1&lt;/h2&gt;&lt;p&gt;请看另外一篇博客：&lt;a href=&quot;https://goghtsui.github.io/2016/12/08/Retrofit-1-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/&quot;&gt;Retrofit 1 之 log得请求与响应&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Retrofit-2&quot;&gt;&lt;a href=&quot;#Retrofit-2&quot; class=&quot;headerlink&quot; title=&quot;Retrofit 2&quot;&gt;&lt;/a&gt;Retrofit 2&lt;/h2&gt;&lt;p&gt;Retrofit 2完全依赖于OkHttp进行任何网络操作。OkHttp的开发者已经发布了一个日志拦截器集成的版本，你可以通过以下方式添加依赖：&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Retrofit" scheme="https://goghtsui.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 1.x和Retrofit 2.x的不同</title>
    <link href="https://goghtsui.github.io/2016/12/07/Retrofit-1-x%E5%92%8CRetrofit-2-x%E7%9A%84%E4%B8%8D%E5%90%8C/undefined/"/>
    <id>https://goghtsui.github.io/2016/12/07/Retrofit-1-x%E5%92%8CRetrofit-2-x%E7%9A%84%E4%B8%8D%E5%90%8C/undefined/</id>
    <published>2016-12-07T03:11:28.000Z</published>
    <updated>2021-01-26T03:15:32.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Retrofit库已经发布很久了，已经是主流的Http client库之一，使用简单、高效，但是随着版本的升级，也出现了一些疑难杂症，下面就详细给大家讲解一下，给大家填填坑：</p><blockquote><p>官方描述：Type-safe HTTP client for Android and Java by Square.<br>官网地址：<a href="http://square.github.io/retrofit/">Square-Retrofit</a>.<br>Github地址：<a href="https://github.com/square/retrofit/">Github-Retrofit</a>.</p></blockquote><a id="more"></a><p>到现在已经经历了1.x到2.x的过程，这自然是一个越来越完善、越强大的趋势，但是Square还是坑了我们一把。在1.x到2.x的迭代过程中，并不是平滑升级的，而是发生了很大的转变，为了防止更多的人遇到这些坑，我就把我了解的一些不同给大家说一所，当然，哪里描述有问题，表述不正确的随时回复。</p><h2 id="Retrofit-1-x-gt-Retrofit-2-x"><a href="#Retrofit-1-x-gt-Retrofit-2-x" class="headerlink" title="Retrofit 1.x -&gt; Retrofit 2.x"></a>Retrofit 1.x -&gt; Retrofit 2.x</h2><p>Retrifit 1系列最高是1.9.0，Retrofit 2 系列目前最高 2.1.0。</p><h3 id="Maven-amp-Gradle-依赖"><a href="#Maven-amp-Gradle-依赖" class="headerlink" title="Maven &amp; Gradle 依赖"></a>Maven &amp; Gradle 依赖</h3><ol><li>在Retrofit 1中，你需要导入底层的HTTP客户端。默认情况下，Retrofit 2将OkHttp最为默认的底层库，它已经作为Retrofit 2本身的依赖。</li></ol><pre><code class="xml">compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;  </code></pre><p>假如你想要使用指定版本的OkHttp，那么你可以这样写：</p><pre><code class="xml">compile (&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;) &#123;    // 移除 Retrofit 的 OkHttp   exclude module: &#39;okhttp&#39;&#125;// 添加自定义的依赖库compile &#39;com.squareup.okhttp3:okhttp:3.3.1&#39;  </code></pre><ol start="2"><li>Maven: Retrofit &amp; OkHttp</li></ol><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.squareup.retrofit2&lt;/groupId&gt;  &lt;artifactId&gt;retrofit&lt;/artifactId&gt;  &lt;version&gt;2.1.0&lt;/version&gt;&lt;/dependency&gt;  &lt;dependency&gt;    &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;  &lt;artifactId&gt;okhttp&lt;/artifactId&gt;  &lt;version&gt;3.3.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><ol start="3"><li>Retrofit 2默认不集成Gson和RxJava的。之前，你不需要担心任何集成转换器，现在你需要导入转换器，当然RxJava也需要手动导入，下文还会详细描述：</li></ol><ul><li>Converter</li></ul><pre><code class="xml">compile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;  </code></pre><ul><li>RxJava</li></ul><pre><code class="xml">compile &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;  compile &#39;io.reactivex:rxandroid:1.0.1&#39;  </code></pre><h3 id="RestAdapter-—-gt-Retrofit"><a href="#RestAdapter-—-gt-Retrofit" class="headerlink" title="RestAdapter —&gt; Retrofit"></a>RestAdapter —&gt; Retrofit</h3><ul><li>Retrofit 1.9</li></ul><pre><code class="java">RestAdapter.Builder builder = new RestAdapter.Builder(); </code></pre><ul><li>Retrofit 2.x</li></ul><pre><code class="java">Retrofit.Builder builder = new Retrofit.Builder();  </code></pre><h3 id="setEndpoint-—-gt-baseUrl"><a href="#setEndpoint-—-gt-baseUrl" class="headerlink" title="setEndpoint —&gt; baseUrl"></a>setEndpoint —&gt; baseUrl</h3><ul><li>Retrofit 1.9</li></ul><pre><code class="java">RestAdapter adapter = new RestAdapter.Builder()      .setEndpoint(API_BASE_URL);    .build();YourService service = adapter.create(YourService.class);  </code></pre><p>注: 在你调用Retrofit.Builder的build()方法之前, 你至少需要定义API_BASE_URL.</p><ul><li>Retrofit 2.x</li></ul><pre><code class="java">Retrofit retrofit = new Retrofit.Builder()      .baseUrl(API_BASE_URL);    .build();YourService service = retrofit.create(YourService.class); </code></pre><h3 id="Base-Url处理"><a href="#Base-Url处理" class="headerlink" title="Base Url处理"></a>Base Url处理</h3><ul><li>Retrofit 1.x</li></ul><pre><code class="java">public interface UserService &#123;      @POST(&quot;me&quot;)    User me();&#125;RestAdapter adapter = RestAdapter.Builder()      .setEndpoint(&quot;https://your.api.url/v2/&quot;);    .build();UserService service = adapter.create(UserService.class);// the request url for service.me() is: // https://your.api.url/v2/me</code></pre><ul><li>Retrofit 2.x</li></ul><p>Retrofit 2.x 使用了全新的url处理方式，内部是通过<strong>HttpUrl.resolve()**方式创建的URL，类似于</strong><a href...>**的链接，这一点非常重要。我学习的时候看到有三种展示方式：</p><ol><li>url：<a href="https://your.api.url/me">https://your.api.url/me</a></li></ol><pre><code class="java">public interface UserService &#123;      @POST(&quot;/me&quot;)    Call&lt;User&gt; me();&#125;Retrofit retrofit = new Retrofit.Builder()      .baseUrl(&quot;https://your.api.url/v2&quot;);    .build();UserService service = retrofit.create(UserService.class);// the request url for service.me() is: // https://your.api.url/me</code></pre><ol start="2"><li>url：<a href="https://your.api.url/me">https://your.api.url/me</a></li></ol><pre><code class="java">public interface UserService &#123;      @POST(&quot;me&quot;)    Call&lt;User&gt; me();&#125;Retrofit retrofit = new Retrofit.Builder()      .baseUrl(&quot;https://your.api.url/v2&quot;);    .build();UserService service = retrofit.create(UserService.class);// the request url for service.me() is: // https://your.api.url/me</code></pre><ol start="3"><li>url：<a href="https://your.api.url/v2/me">https://your.api.url/v2/me</a></li></ol><pre><code class="java">public interface UserService &#123;      @POST(&quot;me&quot;)    Call&lt;User&gt;me();&#125;Retrofit retrofit = new Retrofit.Builder()      .baseUrl(&quot;https://your.api.url/v2/&quot;);    .build();UserService service = retrofit.create(UserService.class);// the request url for service.me() is: // https://your.api.url/v2/me</code></pre><p>经过我的测试（Retrofit 2.1.0），baseUrl必须是以 <strong>/</strong> 结尾（即@GET不以**/**开头），不然会报错：<code>java.lang.IllegalArgumentException: baseUrl must end in /: https://your.api.url/v2/me</code> ，所以，在2.1.0的版本，我们要注意这一点，如果这里有问题，还请留言反馈。</p><ol start="4"><li>动态URL</li></ol><p>在你的url无法立即获取或者使用的时候，你可以配置动态的url来使用，在Retrofit 2.x你可以将HTTP请求注解留空，然后将**@url**作为方法参数的注解，请看以下示例代码：</p><pre><code class="java">public interface UserService &#123;      @GET    public Call&lt;File&gt; getZipFile(@Url String url);&#125;</code></pre><h3 id="OkHttp集成"><a href="#OkHttp集成" class="headerlink" title="OkHttp集成"></a>OkHttp集成</h3><p>OkHttp 在Retrofit 1.x里是可选的。如果你想让Retrofit使用OkHttp作为HTTP连接接口，你需要手动包含OkHttp依赖。<br>但是在Retrofit 2.x中，OkHttp 是必须的，并且自动设置为了依赖。下面的代码来自Retrofit 2.0的pom文件：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;  &lt;artifactId&gt;okhttp&lt;/artifactId&gt;  &lt;version&gt;3.3.1&lt;/version&gt;&lt;/dependency&gt;  </code></pre><p>OkHttp 使用Call 来封装响应，如果你想使用OkHttp特定的版本，不想使用内部的版本，你可以按照以下代码手动配置：</p><pre><code class="xml">compile (&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;) &#123;    // exclude Retrofit’s OkHttp peer-dependency module and define your own module import  exclude module: &#39;okhttp&#39;&#125;compile &#39;com.squareup.okhttp3:okhttp:3.3.1&#39;  </code></pre><h3 id="OkHttp拦截器"><a href="#OkHttp拦截器" class="headerlink" title="OkHttp拦截器"></a>OkHttp拦截器</h3><p>在Retrofit 1.x中，你可以使用RequestInterceptor来拦截一个请求，但是它已经从Retrofit 2.x 移除了，因为HTTP连接层已经转为OkHttp。<br>结果就是，现在我们必须转而实用OkHttp里面的Interceptor。首先你需要实用Interceptor创建一个OkHttpClient对象，然后使用如下Retrofit.Builder()的client()方法设置你自定义的增强版OkHttp：</p><pre><code class="java">OkHttpClient.Builder httpClient = new OkHttpClient.Builder();  httpClient.addInterceptor(new Interceptor() &#123;      @Override    public Response intercept(Chain chain) throws IOException &#123;        Request original = chain.request();        // Customize the request         Request request = original.newBuilder()                .header(&quot;Accept&quot;, &quot;application/json&quot;)                .header(&quot;Authorization&quot;, &quot;auth-token&quot;)                .method(original.method(), original.body())                .build();        Response response = chain.proceed(request);        // Customize or return the response         return response;    &#125;&#125;);OkHttpClient client = httpClient.build();  Retrofit retrofit = new Retrofit.Builder()      .baseUrl(&quot;https://your.api.url/v2/&quot;);    .client(client)    .build();</code></pre><h3 id="同步-amp-异步-请求"><a href="#同步-amp-异步-请求" class="headerlink" title="同步&amp;异步 请求"></a>同步&amp;异步 请求</h3><p>在Retrofit 1.x中，通过在service接口中不同的方法声明来区分，同步方法需要一个返回类型，异步的方法需要一个统一的<strong>Callback</strong>作为最后一个参数。</p><h4 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h4><ul><li>Retrofit 1.x</li></ul><pre><code class="java">public interface UserService &#123;      // Synchronous Request    @POST(&quot;/login&quot;)    User login();    // Asynchronous Request    @POST(&quot;/login&quot;)    void getUser(@Query String id, Callback&lt;User&gt; cb);&#125;</code></pre><ul><li>Retrofit 2.x</li></ul><p>在Retrofit 2.x中，service中方法的声明没有区别，返回类型都被统一封装到一个<strong>Call</strong>类型里面：</p><pre><code class="java">public interface UserService &#123;      @POST(&quot;/login&quot;)    Call&lt;User&gt; login();&#125;</code></pre><h4 id="请求执行"><a href="#请求执行" class="headerlink" title="请求执行"></a>请求执行</h4><ul><li>Retrofit 1.x</li></ul><pre><code class="java">// synchronousUser user = userService.login();// asynchronoususerService.login(new Callback&lt;User&gt;() &#123;  @Override    public void success(User user, Response response) &#123;        // handle response    &#125;    @Override    public void failure(RetrofitError error) &#123;        // handle error    &#125;&#125;);</code></pre><ul><li>Retrofit 2.x</li></ul><p>对于Retrofit 2.x，返回类型都被统一封装到了Call类型里，所以使用了完全不同的执行方式：</p><pre><code class="java">// 同步Call&lt;User&gt; call = userService.login();  User user = call.execute().body();</code></pre><pre><code class="java">// 异步Call&lt;User&gt; call = userService.login();  call.enqueue(new Callback&lt;User&gt;() &#123;      @Override    public void onResponse(Call&lt;User&gt; call, Response&lt;User&gt; response) &#123;        // response.isSuccessful() is true if the response code is 2xx        if (response.isSuccessful()) &#123;            User user = response.body();        &#125; else &#123;            int statusCode = response.code();            // handle request errors yourself            ResponseBody errorBody = response.errorBody();        &#125;    &#125;    @Override    public void onFailure(Call&lt;User&gt; call, Throwable t) &#123;        // handle execution failures like no internet connectivity     &#125;&#125;</code></pre><p>注：在Retrofit 2.x中，即使请求不成功<strong>onResponse()**方法也会被执行，但是</strong>Response<strong>类提供了</strong>isSuccessful()<strong>方法用于检查请求结果（返回的状态码2xx），如果状态代码不是2xx，您需要自己处理错误。如果在失败的情况下，你希望自己解析错误响应信息，你可以通过使用</strong>ResponseBody<strong>类的</strong>errorBody()**方法自己解析对象。</p><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><p>使用Retrofit 1.x，即使请求尚未执行，也无法取消。在Retrofit 2.x这一点已经得到了改善，即如果HTTP调度器没有执行该它，你最终可以取消任何请求。</p><pre><code class="java">Call&lt;User&gt; call = userService.login();  User user = call.execute().body();// changed your mind, cancel the requestcall.cancel();  </code></pre><p>你不需要关心是同步还是异步请求，只要你足够的及时，OkHttp不会发送出任何的请求。</p><h3 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h3><p>Retrofit 1.x对Gson集成并作为默认的JSON转换器，但是Retrofit 2.x没有集成任何转换器，需要你自定义转换器，如果你想使用Gson作为转换器，你可以按照以下方式使用兄弟库：</p><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre><code class="xml">compile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;  </code></pre><p>还有其它很多可用的转换器，根据自己的喜欢手动添加即可：</p><ul><li><strong>Gson</strong>: com.squareup.retrofit2:converter-gson:2.1.0</li><li><strong>Moshi</strong>: com.squareup.retrofit2:converter-moshi:2.1.0</li><li><strong>Jackson</strong>: com.squareup.retrofit2:converter-jackson:2.1.0</li><li><strong>SimpleXML</strong>: com.squareup.retrofit2:converter-simplexml:2.1.0</li><li><strong>ProtoBuf</strong>: com.squareup.retrofit2:converter-protobuf:2.1.0</li><li><strong>Wire</strong>: com.squareup.retrofit2:converter-wire:2.1.0</li></ul><p>假如，没有你想使用的依赖库，你可以继承<strong>Converter.Factory</strong>抽象类，可以去这里参考编写：<a href="https://github.com/square/retrofit/tree/master/retrofit-converters">转换器实现示例</a></p><h4 id="添加转换器"><a href="#添加转换器" class="headerlink" title="添加转换器"></a>添加转换器</h4><pre><code class="java">Retrofit retrofit = new Retrofit.Builder()      .baseUrl(&quot;https://your.api.url/v2/&quot;);    .addConverterFactory(ProtoConverterFactory.create())    .addConverterFactory(GsonConverterFactory.create())    .build();</code></pre><p>上面代码中添加了两个转换器，你是不是要会选择哪个使用？这一点很重要：<strong>添加的顺序决定了使用的顺序，默认使用第一个转换器，如果第一个转换器不可用，会使用第二个转化器</strong>。所以，你可以多添加几个转换器，这是允许的，但是一定要注意顺序。</p><h3 id="RxJava集成"><a href="#RxJava集成" class="headerlink" title="RxJava集成"></a>RxJava集成</h3><p>Retrofit 1 已经集成了三个请求执行机制：同步，异步和RxJava。Retrofit 2 仅仅同步和异步默认是可用的，因此，Retrofit开发团队创建了一种将额外的执行机制插入Retrofit的方法。你可以为你的应用程序添加多个机制，如RxJava或Futures。为了使Retrofit恢复RxJava的支持，需要添加两个依赖：</p><ul><li>第一个依赖是 RxJava的 <strong>CallAdapter</strong>，这是为了告诉Reftrofit有新的方式来处理请求。这就意味着你可以通过定义CustomizedCall <T>来替换Call <T>，在 RxJava 的情况下，我们需要将返回值Call<T> 修改为 Observable<T>。</li><li>第二个依赖是需要AndroidSchedulers类，这是需要在Android的主线程上订阅代码。</li></ul><pre><code class="xml">compile &#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;  compile &#39;io.reactivex:rxandroid:1.0.1&#39;  </code></pre><p>接下来需要的是在创建service实例之前将新的 CallAdapter 添加到 Retrofit 对象。</p><pre><code class="java">Retrofit retrofit = new Retrofit.Builder()      .baseUrl(baseUrl);    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())    .addConverterFactory(GsonConverterFactory.create())    .build();</code></pre><p>首先，我们声明一个service接口。之后，我们假设有一个userService实例被创建，并且可以直接利用Observable来观察Android的主线程。我们还将一个新的Subscriber传递给subscribe方法，它将最终返回成功的响应或错误。</p><pre><code class="java">public interface UserService &#123;      @POST(&quot;/me&quot;)    Observable&lt;User&gt; me();&#125;// this code is part of your activity/fragmentObservable&lt;User&gt; observable = userService.me();  observable          .observeOn(AndroidSchedulers.mainThread())        .subscribeOn(Schedulers.io())        .subscribe(new Subscriber&lt;User&gt;() &#123;    @Override    public void onCompleted() &#123;        // handle completed    &#125;    @Override    public void onError(Throwable e) &#123;        // handle error    &#125;    @Override    public void onNext(User user) &#123;        // handle response    &#125;&#125;);</code></pre><h3 id="默认没有日志记录"><a href="#默认没有日志记录" class="headerlink" title="默认没有日志记录"></a>默认没有日志记录</h3><p>这个内容相对独立，就单独拿出来说吧，请查看另外两篇文章：</p><ul><li><p>Retrofit 1 日志使用</p><blockquote><p><a href="https://goghtsui.github.io/2016/12/08/Retrofit-1-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/">Retrofit-1-之-log得请求与响应</a></p></blockquote></li><li><p>Retrofit 2 日志使用</p><blockquote><p><a href="https://goghtsui.github.io/2016/12/08/Retrofit-2-%E4%B9%8B-log%E5%BE%97%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/undefined/">Retrofit-2-之-log得请求与响应</a></p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些内容摘自官方和日常使用总结，基本上覆盖了日常开发使用，所以你还需要在使用中不断的探索。Retrofit真的是非常的简单、高效，给你填了很多坑，节省了你的开发时间，虽然你需要花些时间去了解它，但是一旦你可以熟练的使用它，那么他带给你的惊喜是你无法想象的，所以，你又有什么理由不去使用它呢？</p><p>其实你可以通过官方的Changelog来详细了解以下：</p><blockquote><p><a href="https://github.com/square/retrofit/blob/master/CHANGELOG.md">Changelog</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;Retrofit库已经发布很久了，已经是主流的Http client库之一，使用简单、高效，但是随着版本的升级，也出现了一些疑难杂症，下面就详细给大家讲解一下，给大家填填坑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方描述：Type-safe HTTP client for Android and Java by Square.&lt;br&gt;官网地址：&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Square-Retrofit&lt;/a&gt;.&lt;br&gt;Github地址：&lt;a href=&quot;https://github.com/square/retrofit/&quot;&gt;Github-Retrofit&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Retrofit" scheme="https://goghtsui.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Android开发之[暗码]</title>
    <link href="https://goghtsui.github.io/2016/10/27/Android%E5%BC%80%E5%8F%91%E4%B9%8B[%E6%9A%97%E7%A0%81]/undefined/"/>
    <id>https://goghtsui.github.io/2016/10/27/Android%E5%BC%80%E5%8F%91%E4%B9%8B[%E6%9A%97%E7%A0%81]/undefined/</id>
    <published>2016-10-27T03:18:53.000Z</published>
    <updated>2021-01-26T02:34:57.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>什么是暗码？不同厂商的手机都会隐藏代码，用来查看系统及固件版本，或者进行硬件的测试，当然Android手机也不例外，除了好像计算机一样能显示更详细的手机信息外，更可重设为原厂设定，更新相机等。但部份代码要谨慎使用，因为可能令手机失去原有的功能，确认在了解其功能的前提下再去尝试，具体的有哪些暗码大家自行搜索吧。</p><p>暗码怎么使用呢？在手机拨号页面，输入:** *#*#munber#*#* *<em>,number对应的就是暗码了。我这里就说一个我经常用到的暗码，以MOTO Z play为例：__\</em>#*#4636#*#*__，显示手机信息、使用情况统计数据、WiFi information、CMAS测试提示、用户首选网络列表、IMS Setting，其中短信中心的号码设置就在这里设置的。那么这个暗码的功能，最为开发者的我们能不能使用呢？答案是绝对可以的，话说你可以给自己的应用留一些后门或者debug开关，亦或者打开特定的页面，功能还是很屌的，下面进入正题吧</p><a id="more"></a><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>首先，这个暗码的捕获及解析是系统来完成的，系统在解析完成暗码之后会发送一个广播出来,系统源码：</p><p><strong>\android\packages\apps\Dialer\src\com\android\dialer\SpecialCharSequenceMgr.java</strong></p><pre><code class="java">/*** Handles secret codes to launch arbitrary activities in the form of *#*#&lt;code&gt;#*#*.* If a secret code is encountered an Intent is started with the android_secret_code://&lt;code&gt;* URI.** @param context the context to use* @param input the text to check for a secret code in* @return true if a secret code was encountered*/static boolean handleSecretCode(Context context, String input) &#123;    // Secret codes are in the form *#*#&lt;code&gt;#*#*    int len = input.length();    if (len &gt; 8 &amp;&amp; input.startsWith(&quot;*#*#&quot;) &amp;&amp; input.endsWith(&quot;#*#*&quot;)) &#123;        final Intent intent = new Intent(SECRET_CODE_ACTION,                Uri.parse(&quot;android_secret_code://&quot; + input.substring(4, len - 4)));        context.sendBroadcast(intent);        return true;    &#125;    return false;&#125;</code></pre><p>也可以看出来 SECRET_CODE_ACTION 也是从这里发出来的，所以我们需要做的就是创建一个receiver来接受该广播。这样，我们就可以通过intent拿到这个暗码，与我们设定的暗码匹配比较，继而完成相关的业务逻辑。</p><h4 id="使用暗码"><a href="#使用暗码" class="headerlink" title="使用暗码"></a>使用暗码</h4><ol><li>自定义的receiver：</li></ol><pre><code class="java">public class SecretReceiver extends BroadcastReceiver &#123;    private static final String ACTION = &quot;android.provider.Telephony.SECRET_CODE&quot;;    private static final String SECRET_CODE = &quot;2016&quot;;    @Override    public void onReceive(Context context, Intent intent) &#123;        if(intent.getAction().equals(ACTION))&#123;            if(intent.getData().getHost().equals(SECRET_CODE))&#123;                Intent target = new Intent(context, MainActivity.class);                target.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                context.startActivity(target);            &#125;        &#125;    &#125;&#125;</code></pre><p>非常简单的一段代码，就是接收到暗码的广播，启动一个页面</p><ol start="2"><li>在AndroidManifest.xml中注册该receiver，并设置识别的暗码：</li></ol><pre><code class="xml">&lt;receiver android:name=&quot;.SecretReceiver&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.provider.Telephony.SECRET_CODE&quot; /&gt;            &lt;data android:scheme=&quot;android_secret_code&quot; android:host=&quot;2016&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><p>只需要这两步，一个简单的暗码启动页面就完成了，亲测可行。</p><h4 id="执行暗码"><a href="#执行暗码" class="headerlink" title="执行暗码"></a>执行暗码</h4><p>上面的方法我们已经可以识别自定义的暗码了，那么如何执行暗码呢？其实还是交给系统去执行的，和拨打电话是一个原理：</p><pre><code class="java">Uri uri = Uri.parse(&quot;android_secret_code://&quot; + code);Intent intent = new Intent(ACTION, uri);context.sendBroadcast(intent);</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可能会有童鞋问道：那我定义一个和系统一样的暗码，会怎么样？告诉你，就是：没你什么事。  系统暗码系统捕获并处理，不会告诉你的，你想多了，不然系统给你搞坏了咋办，哈。。<br>其实这个功能研发本身很简单，但是如果利用好这个功能，还是可以做出一些很特别的东西的，大不了可以装逼用啊。 ToT</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;什么是暗码？不同厂商的手机都会隐藏代码，用来查看系统及固件版本，或者进行硬件的测试，当然Android手机也不例外，除了好像计算机一样能显示更详细的手机信息外，更可重设为原厂设定，更新相机等。但部份代码要谨慎使用，因为可能令手机失去原有的功能，确认在了解其功能的前提下再去尝试，具体的有哪些暗码大家自行搜索吧。&lt;/p&gt;
&lt;p&gt;暗码怎么使用呢？在手机拨号页面，输入:** *#*#munber#*#* *&lt;em&gt;,number对应的就是暗码了。我这里就说一个我经常用到的暗码，以MOTO Z play为例：__\&lt;/em&gt;#*#4636#*#*__，显示手机信息、使用情况统计数据、WiFi information、CMAS测试提示、用户首选网络列表、IMS Setting，其中短信中心的号码设置就在这里设置的。那么这个暗码的功能，最为开发者的我们能不能使用呢？答案是绝对可以的，话说你可以给自己的应用留一些后门或者debug开关，亦或者打开特定的页面，功能还是很屌的，下面进入正题吧&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="SECRET_CODE" scheme="https://goghtsui.github.io/tags/SECRET-CODE/"/>
    
    <category term="SECRET_CODE_ACTION" scheme="https://goghtsui.github.io/tags/SECRET-CODE-ACTION/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio: Error running app: Instant Run requires &#39;Tools | Android | Enable ADB integration&#39; to be enabled</title>
    <link href="https://goghtsui.github.io/2016/10/19/Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled/undefined/"/>
    <id>https://goghtsui.github.io/2016/10/19/Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled/undefined/</id>
    <published>2016-10-19T07:17:38.000Z</published>
    <updated>2021-01-26T02:34:57.568Z</updated>
    
    <content type="html"><![CDATA[<p>在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。</p><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><p>Error running app: Instant Run requires ‘Tools | Android | Enable ADB integration’ to be enabled.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="http://img.blog.csdn.net/20160419101048340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Center"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。&lt;/p&gt;
&lt;h3 id=&quot;错误信息&quot;&gt;&lt;a href=&quot;#错误信息&quot; class=&quot;headerlink&quot; title=&quot;错误信息&quot;&gt;&lt;/a&gt;错误信息&lt;/h3&gt;&lt;p&gt;Error running app</summary>
      
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Instant Run" scheme="https://goghtsui.github.io/tags/Instant-Run/"/>
    
    <category term="Enable ADB integration" scheme="https://goghtsui.github.io/tags/Enable-ADB-integration/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 2.2 新特性</title>
    <link href="https://goghtsui.github.io/2016/10/11/Android-Studio-2-2-%E6%96%B0%E7%89%B9%E6%80%A7/undefined/"/>
    <id>https://goghtsui.github.io/2016/10/11/Android-Studio-2-2-%E6%96%B0%E7%89%B9%E6%80%A7/undefined/</id>
    <published>2016-10-11T09:54:42.000Z</published>
    <updated>2021-01-26T02:34:57.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><img src="https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png" alt="as2.2_character"><br>今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。</p><a id="more"></a><p>作为正式版 Android 应用开发 IDE，Android Studio 2.2 支持 Android 7.0 Nougat 中所有最新的开发者功能（例如代码自动完成），可帮助您添加多种 Android 平台功能，例如多窗口支持、Quick Settings API 或重新设计的通知，当然还有用于测试这些功能的内置 Android Emulator。 </p><p>在此版本中，我们将 Android Frameworks 与 IDE 整合到一起创建约束布局。这个全新的布局管理器功能强大，可帮助您以扁平的流线型层次结构设计庞大而复杂的布局。ConstraintLayout 是与新的布局编辑器同时构建的，可像标准 Android 支持库那样集成到您的应用中。</p><p><img src="https://static.oschina.net/uploads/space/2016/0924/070632_pSbD_2720166.png" alt="new_character"></p><p>Android Studio 2.2 新增了 20 多项功能，涉及开发流程的每个主要阶段：设计、开发、构建和测试。从使用新的 ConstraintLayout 设计 UI，到使用 Android NDK 开发 C++ 代码，到使用最新的 Jack 编译器进行构建，再到为应用创建 Espresso 测试案例，Android Studio 2.2 都是您不容错过的最新版本。</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><h4 id="Layout-Editor-布局编辑器"><a href="#Layout-Editor-布局编辑器" class="headerlink" title="Layout Editor(布局编辑器)"></a>Layout Editor(布局编辑器)</h4><p>本次更新带来了全新的布局编辑器，我们以后调 UI 将更方便。打开一个 XML 文件，默认的 Design 模式如下图所示，主要包含 Palette、Component Tree、Toolbar、Design Editor、Properties 五部分，直接可视化的操作使布局更加方便易操作。</p><p><img src="http://stormzhang.com/image/layout-editor-callouts_2-2_2x.png" alt="layout_editor"></p><p>当然对于习惯写 XML 代码的同学来说可以点击左下角的 Text 切换到代码格式，但是右边依然可以实时预览。Text 模式下的截图如下：</p><p><img src="http://stormzhang.com/image/layout-editor-text_2-2_2x.png" alt="text_mode"></p><p>这里有个小技巧，可以操作快捷键 Control+Shift+Right/Left 来进行左右切换。然后我们可以通过 Toolbar 那一栏来配置我们预览的主题外观</p><p><img src="http://stormzhang.com/image/layout-editor-toolbar1-callouts_2-2_2x.png" alt="text_mode"></p><h4 id="Constraint-Layout-约束布局"><a href="#Constraint-Layout-约束布局" class="headerlink" title="Constraint Layout(约束布局)"></a>Constraint Layout(约束布局)</h4><p>Constraint Layout 翻译过来我把它叫约束布局，它也是今年 Google 全新推出的一种布局，它更强大，简单来说，用 Constraint Layout 可以实现之前需要各种嵌套才能实现的效果，我们知道过多的布局嵌套对性能影响是很大的，因为 Constraint Layout 更强大，所以属性也就特别多，不过 Google 完全提供了一种可视化的操作，一张动图你们感受下：</p><p><img src="http://stormzhang.com/image/image00.gif" alt="text_mode"></p><p>关于 Constraint Layout 的详细用法 Google 官方有个教程，想学习的可以看一下：</p><p><a href="https://codelabs.developers.google.com/codelabs/constraint-layout/">Using ConstraintLayout to design your views</a></p><p>上面链接需要科学上网，英文阅读有困难的不妨看下这篇博客：</p><p><a href="http://www.jianshu.com/p/a8b49ff64cd3">Android ConstraintLayout详解</a></p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="Samples-Browser"><a href="#Samples-Browser" class="headerlink" title="Samples Browser"></a>Samples Browser</h4><p>GitHub 上 Google 有个叫 Google Samples 的组织，罗列了 Google 的上百个关于一些代码的示例，而这其中大部分都是 Android 相关的，比如 NavigationDrawer 不会用了，google 有个 android-NavigationDrawer 的示例。而这次 Google 直接把他关联到 Android Stduio 了，你可以在 Android Studio 选中一个类直接右键点击 Find Sample Code ，神奇的事情发生了：</p><p><img src="http://stormzhang.com/image/code_sample.png" alt="sample-code"></p><p>上图可以看到以选中 PackageManager 为例，下面直接出现了一些 Google Sample 相关的代码，方便你快速查找该用法，而且还有个链接直接指向到 Android Developer 官网该类的详细介绍</p><h4 id="Improved-C-Support（改进的-C-支持）"><a href="#Improved-C-Support（改进的-C-支持）" class="headerlink" title="Improved C++ Support（改进的 C++ 支持）"></a>Improved C++ Support（改进的 C++ 支持）</h4><p>现在可以使用 CMake 或 ndk-build 从 Gradle 编译 C++ 项目。现在可将项目从 CMake 构建系统无缝迁移到 Android Studio。Android Studio 中的新项目向导对 C++ 提供了支持，此外，还对 C++ 编辑和调试体验进行了大量的问题修复。</p><p><img src="https://2.bp.blogspot.com/-fN7u1isHtDg/V-ATulF2JdI/AAAAAAAADZs/pLfGX_85NXomeFgfiIP3sGolu3QdiYQsgCLcB/s640/C_plus_plus.png" alt="C_plus_plus-code"></p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h4 id="Instant-Run-Improvements-Instant-Run改进"><a href="#Instant-Run-Improvements-Instant-Run改进" class="headerlink" title="Instant Run Improvements(Instant Run改进)"></a>Instant Run Improvements(Instant Run改进)</h4><p>Instant Run 的推出确实很不错，但是第一次编译会比较慢。我们先来看下 Google 官方的更新说明：</p><p>在此版本中，我们对 Instant Run 的稳定性和可靠性进行了大量的改进。如果您之前禁用了 Instant Run，建议重新启用，如果今后仍遇到问题，请告诉我们。（Settings → Build, Execution, Deployment → Instant Run [适用于 Windows/Linux], Preferences → Build, Execution, Deployment → Instant Run [适用于 OS X]）。打开方法见下图：</p><p><img src="http://stormzhang.com/image/image05.png" alt="instant-run"></p><h4 id="Build-cache-Experimental-缓存构建"><a href="#Build-cache-Experimental-缓存构建" class="headerlink" title="Build cache (Experimental)(缓存构建)"></a>Build cache (Experimental)(缓存构建)</h4><p>升级2.2之后会提示升级gradle<br><img src="http://stormzhang.com/image/as2.2.png" alt="gradle"></p><p>为了加快 Gradle 的编译速度，Google 新增了一个编译缓存的功能，不过目前还是实验性的，具体用法就是在你的 gradle.properties 文件里加上这么一行代码：</p><pre><code class="xml">android.enableBuildCache=true</code></pre><p>总体来说升级了 Gradle，加上这么一句代码，确实感觉编译快了些，大家可以自行感受下。每次编译生成的缓存在 ~/users/.android/build-cache 目录下，如果缓存过多可以手动删除该目录进行清除。</p><h4 id="APK-Analyzer（apk解析器）"><a href="#APK-Analyzer（apk解析器）" class="headerlink" title="APK Analyzer（apk解析器）"></a>APK Analyzer（apk解析器）</h4><p>Google 推出了一个 APK 分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。具体用法点击 Build -&gt; Analyze APK 然后选择你要分析的 APK 文件就可以了。</p><ul><li>可以方便的查看全部文件和大小</li></ul><p><img src="http://stormzhang.com/image/apk-file-sizes_2x.png" alt="apk-file-sizes_2x"></p><ul><li>可以直接查看 AndroidManifest.xml 文件</li></ul><p><img src="http://stormzhang.com/image/apk-manifest-error_2x.png" alt="apk-manifest-error_2x"></p><ul><li>可以直接查看资源文件</li></ul><p><img src="http://stormzhang.com/image/apk-image-preview_2x.png" alt="preview_2x"></p><p><img src="http://stormzhang.com/image/apk-strings_2x.png" alt="strings_2x"></p><ul><li>可以直接查看 dex 文件</li></ul><p><img src="http://stormzhang.com/image/apk-multidex_2x.png" alt="multidex_2x"></p><ul><li>两个 apk 进行比较</li></ul><p><img src="http://stormzhang.com/image/apk-compare_2x.png" alt="compare_2x"></p><p>以后人人都会逆向 APK 了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）"><a href="#Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）" class="headerlink" title="Virtual Sensors in the Android Emulator（虚拟传感器）"></a>Virtual Sensors in the Android Emulator（虚拟传感器）</h4><p>Google 这次同样改进了模拟器，这次让模拟器支持虚拟传感器，你们感受下。</p><p><img src="http://stormzhang.com/image/image02.gif" alt="image02"></p><h4 id="Espresso-Test-Recorder-Beta-（测试记录器（测试版））"><a href="#Espresso-Test-Recorder-Beta-（测试记录器（测试版））" class="headerlink" title="Espresso Test Recorder (Beta)（测试记录器（测试版））"></a>Espresso Test Recorder (Beta)（测试记录器（测试版））</h4><p>Google 为测试新增了一个功能，就是我们可以对操作进行录像，然后根据我们的操作生成一些测试脚本，而且配合 Firebase 将更方便。</p><p><img src="http://stormzhang.com/image/image10.png" alt="image10"></p><p>理论上来说此功能很不错，可以解放了测试人员的双手，只不过该功能还是测试，应该很不稳定，而且国内行情结合 Firebase 很困难，对开发意义不大，可以持续关注。</p><h4 id="GPU-Debugger-Beta-（GPU-调试程序（测试版））"><a href="#GPU-Debugger-Beta-（GPU-调试程序（测试版））" class="headerlink" title="GPU Debugger (Beta)（GPU 调试程序（测试版））"></a>GPU Debugger (Beta)（GPU 调试程序（测试版））</h4><p>GPU 调试程序现在为测试版。现在，您可捕获 Android 设备上的 OpenGL ES 命令流，然后在 Android Studio 内重播该命令流以便对其进行分析。也可全面检查任何指定 OpenGL ES 命令的 GPU 状态，以更好地了解和调试您的图形输出。</p><p><img src="https://1.bp.blogspot.com/-2IprWPLlQcs/V-AWAlo-SlI/AAAAAAAADaQ/0ppF6MZ8CaQTHpYX7qXV-zrRk28IOlzBQCLcB/s640/image11.png" alt="image11"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除以上之外，此次更新还包括对 Java 8 的支持，Jack 编译器的改进，可以调试 GPU，改进了对 C++ 的支持等，总体来说此次更新推出了不少提升 Android 开发效率的工具，性能上也做了优化，值得大家更新！</p><ol><li><a href="http://android-developers.blogspot.jp/2016/09/android-studio-2-2.html">官方更新说明</a></li><li><a href="https://developer.android.com/studio/releases/index.html">官方各版本描述</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png&quot; alt=&quot;as2.2_character&quot;&gt;&lt;br&gt;今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio2.2" scheme="https://goghtsui.github.io/tags/Android-Studio2-2/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio升級2.2打包报错 - ...xxx-stripped.ap_ specified for property resourceFile does not exist</title>
    <link href="https://goghtsui.github.io/2016/10/10/Android-Studio%E5%8D%87%E7%B4%9A2-2%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist/undefined/"/>
    <id>https://goghtsui.github.io/2016/10/10/Android-Studio%E5%8D%87%E7%B4%9A2-2%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist/undefined/</id>
    <published>2016-10-10T09:54:23.000Z</published>
    <updated>2021-01-26T02:34:57.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>在升级了Android Studio 2.2 之后，使用Build -&gt; Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误日志：</p><pre><code class="bash"> \build\intermediates\res\xxx-stripped.ap_&#39; specified for property &#39;resourceFile&#39; does not exist</code></pre><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Files -&gt; Settings -&gt; Build, Execution, Development -&gt; Instant Run – 把第一个勾选去掉</p><p><img src="http://i.stack.imgur.com/pPc68.png" alt="pPc68"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先说，我在module中使用了资源优化：</p><pre><code class="xml">buildTypes &#123;    release &#123;        shrinkResources false        minifyEnabled false        proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;    &#125;&#125;</code></pre><p>如果将 <em>shrinkResources</em> 设置成 true 就需要通过上面提到的设置，如果设置为false就不需要关闭 instant run 的功能了，因为 instant run 不支持 shrinkResources。</p><ol><li><p><a href="http://stackoverflow.com/questions/36540676/build-intermediates-res-resources-anzhi-debug-stripped-ap-specified-for-prope">stackoverflow的解决方案</a></p></li><li><p><a href="http://tools.android.com/tech-docs/instant-run">官方描述：关于 Instant Run</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;在升级了Android Studio 2.2 之后，使用Build -&amp;gt; Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;错误日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; \build\intermediates\res\xxx-stripped.ap_&amp;#39; specified for property &amp;#39;resourceFile&amp;#39; does not exist&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio2.2" scheme="https://goghtsui.github.io/tags/Android-Studio2-2/"/>
    
    <category term="xxx-stripped.ap_" scheme="https://goghtsui.github.io/tags/xxx-stripped-ap/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio | Intellij 翻译插件 Easy Translation</title>
    <link href="https://goghtsui.github.io/2016/08/16/Android-Studio-Intellij-%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-Easy%20Translation/undefined/"/>
    <id>https://goghtsui.github.io/2016/08/16/Android-Studio-Intellij-%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-Easy%20Translation/undefined/</id>
    <published>2016-08-16T14:08:34.000Z</published>
    <updated>2021-01-26T02:34:57.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。</p><ul><li>基于Gradle的构建支持</li><li>Android 专属的重构和快速修复</li><li>提示工具以捕获性能、可用性、版本兼容性等问题</li><li>支持ProGuard 和应用签名</li><li>基于模板的向导来生成常用的 Android 应用设计和组件</li><li>功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览</li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>为了学技术不得不一点一点的肯那些英文文档，在AS中我们官方注释也是英文的，单词还要复制出来找google翻译，是不是很麻烦，为了方便大家，我写了一个简单的翻译插件，没错，遇到不懂得单词，马上就能翻译出来，和有道词典的效果差不多，其实是可以中英互译的，该插件支持基于IntelliJ IDEA的开发环境，下面就说说在AS/IntelliJ下怎么使用：</p><ul><li>直接在编译器下载安装：<strong>File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories -&gt; 搜索Easy-Translation -&gt; 点击右侧的Install -&gt; 重启</strong> 即可。</li><li>AS可以从官方下载手动安装，插件是以jar的形式提供的，打开AS：<strong>File -&gt; Settings -&gt; Plugins -&gt; Install plugin from disk -&gt; 选择jar包 -&gt; 重启</strong>即可。</li></ul><blockquote><p><a href="http://plugins.jetbrains.com/plugin/8553?pr=idea">插件下载地址1</a></p></blockquote><p><a href="http://plugins.jetbrains.com/plugin/8556?pr=idea">插件下载地址2</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>在编辑页面，双击以选中你想要翻译的词语或语句</p></li><li><p>_第一种形式_：使用快捷键<strong>Alt + A</strong>，会通过弹窗的形式将翻译结果展示出来，支持鼠标操作<br><img src="https://plugins.jetbrains.com/files/8556/screenshot_16176.png" alt="Screenshot"></p></li><li><p>_第二种形式_：使用快捷键<strong>Alt + S</strong>，通过ToolWindow的形式显示翻译结果，默认是弹窗，可以选择贴边（这样比较方便查看）<br><img src="https://plugins.jetbrains.com/files/8556/screenshot_16177.png" alt="Screenshot"></p></li><li><p>通过快捷键<strong>Shift + F10</strong>可以选择在网页查看翻译结果（只提供Google和有道翻译）<br><img src="https://plugins.jetbrains.com/files/8556/screenshot_16179.png" alt="Screenshot"></p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>如果出现乱码，可以修改一下字体：<strong>File -&gt; Settings -&gt; Appearance&amp;Behavior -&gt; Appearance -&gt; UI Options -&gt; Name(eg. Microsoft YaHei)</strong></p></li><li><p>如果翻译出错，稍后重试即可；因为查询会有限制，当然你可以通过：<strong>File -&gt; Settings -&gt;Other Settings -&gt; Easy-Translation</strong>设置自己的有道API</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然只是一个小功能，但是还是挺实用的，使用了有道翻译API，如果觉得好用的就打个赏吧，谢谢</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于Gradle的构建支持&lt;/li&gt;
&lt;li&gt;Android 专属的重构和快速修复&lt;/li&gt;
&lt;li&gt;提示工具以捕获性能、可用性、版本兼容性等问题&lt;/li&gt;
&lt;li&gt;支持ProGuard 和应用签名&lt;/li&gt;
&lt;li&gt;基于模板的向导来生成常用的 Android 应用设计和组件&lt;/li&gt;
&lt;li&gt;功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Intellij IDEA" scheme="https://goghtsui.github.io/tags/Intellij-IDEA/"/>
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="plugin" scheme="https://goghtsui.github.io/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>关于OpenJDK你了解多少？</title>
    <link href="https://goghtsui.github.io/2016/08/10/%E5%85%B3%E4%BA%8EOpenJDK%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9F/undefined/"/>
    <id>https://goghtsui.github.io/2016/08/10/%E5%85%B3%E4%BA%8EOpenJDK%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9F/undefined/</id>
    <published>2016-08-10T13:55:30.000Z</published>
    <updated>2021-01-26T02:34:57.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。</p><p>本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:</p><p><img src="http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png" alt="jdkhistory"></p><a id="more"></a><p>OpenJDK由许多软件库组成，主要有corba,hotspot,jaxp,jaxws,jdk,langtools,以及nashorn。在OpenJDK8和OpenJDK9之间没有新的软件库加入，但有很多改变和结构调整，主要是因为Jigsaw—Java自身的模块化</p><p><img src="http://incdn1.b0.upaiyun.com/2015/01/34ac4545b3f17bd20b571092d2845cc1.jpg" alt="jdkmember"></p><p>Java通过引导一个旧版本的Java——例如，Java以其自身为构件建立。旧的组件被组合在一起创建一个新的组件，即成为下一阶段的结构单元。</p><p>OpenJDK8使用JDK7编译和构建，类似地，OpenJDK9 则使用JDK8编译构建。理论上，OpenJDK8是可以使用从其自身创建的影像编译的，同理，OpenJDK9也能用OpenJDK9编译。使用一个叫做循环启动影像的进程——创建OpenJDK的JDK影像，使用同样的影像，OpenJDK再一次被编译。也可以用make命令实现OpenJDK的编译：</p><pre><code class="bash">$ make bootcycle-images # Build images twice, second time with newly built JDK</code></pre><p>make命令在OpenJDK8和OpenJDK9下都提供了很多设置选项，可以通过命名的方式建立独立的组件或模块。如下：</p><pre><code class="bash">$ make [component-name] | [module-name]</code></pre><p>甚至并行运行多个构建过程，如下：</p><pre><code class="bash">$ make JOBS= # Run parallel make jobs</code></pre><p>最后，用install选项安装上述已构建的组件，如下：</p><pre><code class="bash">$ make install</code></pre><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>性能与可伸缩性</li></ul><p>就我能够看到的性能测试而言，闭源的 Oracle JDK 和 OpenJDK 之间在性能上似乎并没有很大的差别。然而，至少后来我看到的一则明确的消息说，开源版本的性能已经与 Oracle 的产品并驾齐驱了，这或许是一个理由，让我们至少对开源版本的用法做一下评估。</p><ul><li>社区进展</li></ul><p>随着开源开发者持续对源代码进行改进，OpenJDK 很有可能已经超过 Oracle 发布的版本。另外，开源世界为各种思想和概念提供了实现的可能，这通常在闭源的企业环境中是不可能的</p><p>关于开源解决方案如何成为主角的一个例子是 PostgreSQL 数据库。随着 9.5.0 版于 2016 年 1 月初的发布，致力于该产品的贡献者已经使该产品获得了巨大的成功。PostgreSQL 的用户包括：雅虎、Sony在线、BASF、Reddit、Instagram以及 TripAdvisor（只是随便举几个例子）</p><ul><li>包管理</li></ul><p>OpenJDK 也具有了通过类似 brew 这样的包管理器下载/更新 JDK 的能力。JDK 的自动更新能力，对某些人来说可能不算什么，但对于大型的 JDK 实现而言，其作用是巨大的</p><ul><li>许可证问题</li></ul><p>假如你处在类似谷歌的位置，使用 Oracle 的 JDK 有可能会导致违反版权/专利权，那么迁移到 OpenJDK 就是一个应该考虑的选项。从我的非专业、非律师的角度来看，我并不十分肯定的是，仅仅通过采用 OpenJDK是否就能让谷歌完全摆脱困境</p><ul><li>跟从趋势</li></ul><p>如果你本来就是一个开源软件的粉丝，那么 OpenJDK 的目前版本已经稳定，而且性能上接近（如果不是相等的话）Oracle 的产品。再说，跟从由谷歌、IBM、RedHat、Apple 共同设定的趋势，可能是一注安全的赌注，这应该有助于说服你看一下开源 JDK</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。&lt;/p&gt;
&lt;p&gt;本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK&lt;/p&gt;
&lt;h2 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;p&gt;从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png&quot; alt=&quot;jdkhistory&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="openjdk" scheme="https://goghtsui.github.io/tags/openjdk/"/>
    
  </entry>
  
  <entry>
    <title>getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇</title>
    <link href="https://goghtsui.github.io/2016/07/21/getDimension%E3%80%81getDimensionPixelOffset%E3%80%81getDimensionPixelSize%E5%88%9D%E7%BA%A7%E7%AF%87/undefined/"/>
    <id>https://goghtsui.github.io/2016/07/21/getDimension%E3%80%81getDimensionPixelOffset%E3%80%81getDimensionPixelSize%E5%88%9D%E7%BA%A7%E7%AF%87/undefined/</id>
    <published>2016-07-21T14:24:31.000Z</published>
    <updated>2021-01-26T02:34:57.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>在Android应用开发的过程中，我们肯定会遇到一个问题 - <strong>适配</strong> ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：<strong>dp、dip、sp、pt、px、mm、in</strong> ，那么我们怎么读取这些值得？</p><h3 id="官方API"><a href="#官方API" class="headerlink" title="官方API"></a>官方API</h3><p>google给我们提供了三个api使用：<strong>getDimension，getDimensionPixelOffset和getDimensionPixelSize</strong>，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。</p><h3 id="getDimension"><a href="#getDimension" class="headerlink" title="getDimension"></a>getDimension</h3><blockquote><p>包 ： android.content.res.Resources</p></blockquote><ul><li>Added in API level 1 </li><li>float getDimension (int id)</li><li>Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.<a id="more"></a></li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Parameters</strong></td><td><strong>description</strong></td></tr><tr><td>id</td><td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td></tr><tr><td><strong>Returns</strong></td><td><strong>description</strong></td></tr><tr><td>float</td><td>Resource dimension value multiplied by the appropriate metric.</td></tr><tr><td><strong>Throws</strong></td><td><strong>description</strong></td></tr><tr><td>Resources.NotFoundException</td><td>Throws NotFoundException if the given ID does not exist.</td></tr></tbody></table><ul><li><strong>See also</strong>:<ul><li>getDimensionPixelOffset(int)</li><li>getDimensionPixelSize(int)</li></ul></li></ul><h3 id="getDimensionPixelOffset"><a href="#getDimensionPixelOffset" class="headerlink" title="getDimensionPixelOffset"></a>getDimensionPixelOffset</h3><ul><li>Added in API level 1</li><li>int getDimensionPixelOffset (int id)</li><li>Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Parameters</strong></td><td><strong>description</strong></td></tr><tr><td>id</td><td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td></tr><tr><td><strong>Returns</strong></td><td><strong>description</strong></td></tr><tr><td>int</td><td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td></tr><tr><td><strong>Throws</strong></td><td><strong>description</strong></td></tr><tr><td>Resources.NotFoundException</td><td>Throws NotFoundException if the given ID does not exist.</td></tr></tbody></table><ul><li>See also:<ul><li>getDimension(int)</li><li>getDimensionPixelSize(int)</li></ul></li></ul><h3 id="getDimensionPixelSize"><a href="#getDimensionPixelSize" class="headerlink" title="getDimensionPixelSize"></a>getDimensionPixelSize</h3><ul><li>Added in API level 1</li><li>int getDimensionPixelSize (int id)</li><li>Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>Parameters</strong></td><td><strong>description</strong></td></tr><tr><td>id</td><td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td></tr><tr><td><strong>Returns</strong></td><td><strong>description</strong></td></tr><tr><td>int</td><td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td></tr><tr><td><strong>Throws</strong></td><td><strong>description</strong></td></tr><tr><td>Resources.NotFoundException    Throws NotFoundException if the given ID does not exist.</td><td></td></tr></tbody></table><ul><li>See also:<ul><li>getDimension(int)</li><li>getDimensionPixelOffset(int)</li></ul></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>下面通过代码来看看具体的使用：<br>dimens.xml</p><pre><code class="xml">&lt;dimen name=&quot;custom_margin&quot;&gt;16dp&lt;/dimen&gt;&lt;dimen name=&quot;custom_textsize&quot;&gt;16sp&lt;/dimen&gt;&lt;dimen name=&quot;test_margin&quot;&gt;3.5dp&lt;/dimen&gt;&lt;dimen name=&quot;test_textsize&quot;&gt;3.5sp&lt;/dimen&gt;</code></pre><p>调用:</p><pre><code class="java">// dp - 16float dp1 = getResources().getDimension(R.dimen.custom_margin);    int dp2 = getResources().getDimensionPixelOffset(R.dimen.custom_margin);    int dp3 = getResources().getDimensionPixelSize(R.dimen.custom_margin); // dp - 3.5float dp4 = getResources().getDimension(R.dimen.test_margin);    int dp5 = getResources().getDimensionPixelOffset(R.dimen.test_margin);    int dp6 = getResources().getDimensionPixelSize(R.dimen.test_margin);    // sp - 16   float sp1 = getResources().getDimension(R.dimen.custom_textsize);    int sp2 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    int sp3 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);// sp - 3.5float sp4 = getResources().getDimension(R.dimen.custom_textsize);    int sp5 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    int sp6 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);String log = &quot;getDimension(16dp) = &quot; + dp1 + &quot;\n&quot;              + &quot;getDimensionPixelOffset(16dp) = &quot; + dp2 + &quot;\n&quot;              + &quot;getDimensionPixelSize(16dp) = &quot; + dp3 + &quot;\n&quot; + &quot;\n&quot;              + &quot;getDimension(dp3.5) = &quot; + dp4 + &quot;\n&quot;              + &quot;getDimensionPixelOffset(dp3.5) = &quot; + dp5 + &quot;\n&quot;              + &quot;getDimensionPixelSize(dp3.5) = &quot; + dp6 + &quot;\n&quot; + &quot;\n&quot;             + &quot;getDimension(sp16) = &quot; + sp1 + &quot;\n&quot;              + &quot;getDimensionPixelOffset(sp16) = &quot; + sp2 + &quot;\n&quot;              + &quot;getDimensionPixelSize(sp16) = &quot; + sp3 + &quot;\n&quot; + &quot;\n&quot;             + &quot;getDimension(sp3.5) = &quot; + sp4 + &quot;\n&quot;              + &quot;getDimensionPixelOffset(sp3.5) = &quot; + sp5 + &quot;\n&quot;              + &quot;getDimensionPixelSize(sp3.5) = &quot; + sp6;Log.d(&quot;LauncherActivity&quot;, log);</code></pre><p>输出：</p><blockquote><p>densityDpi：160<br>  scale：1.0<br>  fontScale：1.0</p></blockquote><pre><code class="java">getDimension(16dp) = 16.0getDimensionPixelOffset(16dp) = 16getDimensionPixelSize(16dp) = 16getDimension(3.5dp) = 3.5getDimensionPixelOffset(3.5dp) = 3 getDimensionPixelSize(3.5dp) = 4  getDimension(16sp) = 16.0getDimensionPixelOffset(16sp) = 16getDimensionPixelSize(16sp) = 16getDimension(3.5sp) = 3.5getDimensionPixelOffset(3.5sp) = 3getDimensionPixelSize(3.5sp) = 4</code></pre><hr><blockquote><p>densityDpi：240<br>  scale：1.5<br>  fontScale：1.5</p></blockquote><pre><code class="java">getDimension(16dp) = 24.0getDimensionPixelOffset(16dp) = 24getDimensionPixelSize(16dp) = 24getDimension(3.5dp) = 5.25getDimensionPixelOffset(3.5dp) = 5 getDimensionPixelSize(3.5dp) = 5  getDimension(16sp) = 24.0getDimensionPixelOffset(16sp) = 24getDimensionPixelSize(16sp) = 24getDimension(3.5sp) = 5.25getDimensionPixelOffset(3.5sp) = 5getDimensionPixelSize(3.5sp) = 5</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的代码就可以说明问题了，我们可以看到以下几点：</p><ul><li>三个方法都是将源数据乘以scale</li><li>getDimension的返回值是float类型，getDimensionPixelOffset和getDimensionPixelSize的返回值是int类型</li><li>三个方法返回的都是px值，即将dp或者sp等值转换为px值</li><li>getDimensionPixelOffset()是直接将小数位舍弃，而getDimensionPixelSize()则会进行四舍五入</li><li>像setWidth(int)、setHeight(int)这种都是px，根据自己的情况选择getDimensionPixelSize()或getDimensionPixelOffset()</li><li>像setTextSize()：一个参数的是sp；两个参数的是unit和px</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;在Android应用开发的过程中，我们肯定会遇到一个问题 - &lt;strong&gt;适配&lt;/strong&gt; ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：&lt;strong&gt;dp、dip、sp、pt、px、mm、in&lt;/strong&gt; ，那么我们怎么读取这些值得？&lt;/p&gt;
&lt;h3 id=&quot;官方API&quot;&gt;&lt;a href=&quot;#官方API&quot; class=&quot;headerlink&quot; title=&quot;官方API&quot;&gt;&lt;/a&gt;官方API&lt;/h3&gt;&lt;p&gt;google给我们提供了三个api使用：&lt;strong&gt;getDimension，getDimensionPixelOffset和getDimensionPixelSize&lt;/strong&gt;，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。&lt;/p&gt;
&lt;h3 id=&quot;getDimension&quot;&gt;&lt;a href=&quot;#getDimension&quot; class=&quot;headerlink&quot; title=&quot;getDimension&quot;&gt;&lt;/a&gt;getDimension&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;包 ： android.content.res.Resources&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Added in API level 1 &lt;/li&gt;
&lt;li&gt;float getDimension (int id)&lt;/li&gt;
&lt;li&gt;Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="getDimension" scheme="https://goghtsui.github.io/tags/getDimension/"/>
    
    <category term="getDimensionPixelOffset" scheme="https://goghtsui.github.io/tags/getDimensionPixelOffset/"/>
    
    <category term="getDimensionPixelSize" scheme="https://goghtsui.github.io/tags/getDimensionPixelSize/"/>
    
  </entry>
  
  <entry>
    <title>Android刷机-命令篇</title>
    <link href="https://goghtsui.github.io/2016/05/21/Android%E5%88%B7%E6%9C%BA-%E5%91%BD%E4%BB%A4%E7%AF%87/undefined/"/>
    <id>https://goghtsui.github.io/2016/05/21/Android%E5%88%B7%E6%9C%BA-%E5%91%BD%E4%BB%A4%E7%AF%87/undefined/</id>
    <published>2016-05-21T08:20:30.000Z</published>
    <updated>2021-01-26T02:34:57.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>命令行刷机和线刷本质差不多，一个是工具一个是手动的。<br>线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行</p><pre><code class="bash">adb reboot bootloader</code></pre><p>进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）</p><pre><code class="bash">fastboot flash partition gpt.bin</code></pre><p>2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）</p><pre><code class="bash">fastboot flash motoboot motoboot.img</code></pre><a id="more"></a><p>3、刷入基带</p><pre><code class="bash">fastboot flash modem NON-HLOS.bin</code></pre><p>4、刷入efs射频表</p><pre><code class="bash">fastboot flash fsg fsg.mbn</code></pre><p>5、清理基带缓存</p><pre><code class="bash">fastboot erase modemst1</code></pre><p>6、清理efs射频表</p><pre><code class="bash">fastboot erase modemst2</code></pre><p>7、刷入缓存</p><pre><code class="bash">fastboot flash cache cache.img</code></pre><p>8、输入用户数据</p><pre><code class="bash">fastboot flash userdata userdata.img</code></pre><p>9、重新进入bootleader模式</p><pre><code class="bash">fastboot reboot-bootloader</code></pre><p>10、刷入内核部分</p><pre><code class="bash">fastboot flash boot boot.img</code></pre><p>11、刷入系统恢复模式模块</p><pre><code class="bash">fastboot flash recovery recovery.img</code></pre><p>12、刷入系统部分（有可能system.img被分割为很多个文件 system.*****.01啥的，逐个替换内容中的system.img，按照数字顺序执行即可）</p><pre><code class="bash">fastboot flash system system.img</code></pre><p>或</p><pre><code class="bash">fastboot flash system system.01fastboot flash system system.02fastboot flash system system.03</code></pre><p>13、这句一般是用在解锁后跨版本升级，清理fastboot模式缓存，作用也是让新的分区表生效，从而可以加载非本区域的原版系统，比如用在国行刷亚太底包上，就可能会用到这一句</p><pre><code class="bash">fastboot oem fb_mode_clear</code></pre><p>14、还有一些基带相关的：</p><pre><code class="bash">fastboot flash sbl1 sbl1.mbn</code></pre><pre><code class="bash">fastboot flash dbi sdi.mbn</code></pre><pre><code class="bash">fastboot flash aboot emmc_appsboot.mbn</code></pre><pre><code class="bash">fastboot flash tz tz.mbn</code></pre><pre><code class="bash">fastboot flash LOGO logo.bin</code></pre><pre><code class="bash">fastboot flash misc misc.img</code></pre><pre><code class="bash">fastboot flash oppostanvbk static_nvbk.bin</code></pre><p>15、类似双清操作，一般刷机完成之后执行一下这句话，有的不执行可能卡在开机画面</p><pre><code class="bash">fastboot -w</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没什么技术含量，什么文件使用什么命令行，不过一般的线刷包不会这么多文件，命令行刷机还是需要有一定刷机经验的，还是那句话：<strong>刷机有风险，操作需谨慎</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;命令行刷机和线刷本质差不多，一个是工具一个是手动的。&lt;br&gt;线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;adb reboot bootloader&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）&lt;/p&gt;
&lt;h2 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h2&gt;&lt;p&gt;1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;fastboot flash partition gpt.bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;fastboot flash motoboot motoboot.img&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="fastboot" scheme="https://goghtsui.github.io/tags/fastboot/"/>
    
    <category term="adb" scheme="https://goghtsui.github.io/tags/adb/"/>
    
    <category term="bootloader" scheme="https://goghtsui.github.io/tags/bootloader/"/>
    
  </entry>
  
  <entry>
    <title>Android刷机-基础篇</title>
    <link href="https://goghtsui.github.io/2016/05/21/Android%E5%88%B7%E6%9C%BA-%E5%9F%BA%E7%A1%80%E7%AF%87/undefined/"/>
    <id>https://goghtsui.github.io/2016/05/21/Android%E5%88%B7%E6%9C%BA-%E5%9F%BA%E7%A1%80%E7%AF%87/undefined/</id>
    <published>2016-05-21T08:19:57.000Z</published>
    <updated>2021-01-26T02:34:57.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><blockquote><p>刷机有风险，操作需谨慎</p></blockquote><p>先看看<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5">维基百科</a>对刷机的解释：</p><p>刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复</p><p>刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程</p><p>通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)</p><a id="more"></a><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>Android刷机分为四种方式：线刷，卡刷，软刷和厂刷</p><ul><li>软刷：就是利用甜椒、精灵、大师等一键刷机软件进行傻瓜式刷机</li><li>卡刷：就是把刷机包直接放到SD卡上，然后通过手机的Recovery刷入</li><li>线刷：就是通过计算机上的软件把刷机包用数据线连接手机载入到手机内存中，使其作为“第一启动”的刷机方法。线刷软件都为计算机软件，一般来说不同手机型号有不同的刷机软件</li><li>厂刷：寄回厂子刷机，安全性最高，但时间上会更久</li></ul><p>软刷和厂刷没什么多说的，都相当于是找人代工了，这里只讲解卡刷和线刷</p><h2 id="线刷"><a href="#线刷" class="headerlink" title="线刷"></a>线刷</h2><p>线刷也是比较方便快捷的，其实和软刷有异曲同工之妙，不同的手机品牌需要不同的工具（PC软件），下面是我了解的一些，其他的就自己找找吧，也有可能没有</p><table><thead><tr><th align="center">手机品牌</th><th align="center">线刷工具</th></tr></thead><tbody><tr><td align="center">三星</td><td align="center">Odin</td></tr><tr><td align="center">MOTO</td><td align="center">RSD Lite</td></tr><tr><td align="center">小米</td><td align="center">MiFlash</td></tr><tr><td align="center">联想</td><td align="center">SP_Flash_Tool</td></tr><tr><td align="center">华为</td><td align="center">HUAWEI Multi-Upgrade Software</td></tr></tbody></table><p>通用线刷步骤：</p><ul><li>下载对应手机厂商线刷工具并安装</li><li>下载对应手机型号驱动并安装</li><li>下载官方提供的刷机包或OTA包</li><li>关机，通过组合键进入线刷模式（不同手机组合键不同，自行搜索），通常也叫挖煤模式（甚至网上有卖挖煤神器的）</li><li>通过数据线（最好是原装数据线）链接电脑，如果驱动安装正常，就能正常连接手机，一般软件都会有链接提示，然后就是通过软件选择相应的刷机包（或者是需要先解压，在软件界面选择不同文件）</li><li>开始刷机，等待读条完成</li></ul><p>注：线刷要保证电量足够，不建议新手操作，这里面的细节很多，很多手机出厂都是上锁的，像htc还分S-ON和S-OFF，默认线刷只是平刷或更高版本，不能降级刷，这些步骤是核心步骤，其实还有一种手动的线刷的方式，就是通过命令手动刷镜像文件，和工具的原理一样，详情请看下一篇文章</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;刷机有风险，操作需谨慎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看看&lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5&quot;&gt;维基百科&lt;/a&gt;对刷机的解释：&lt;/p&gt;
&lt;p&gt;刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复&lt;/p&gt;
&lt;p&gt;刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程&lt;/p&gt;
&lt;p&gt;通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="卡刷" scheme="https://goghtsui.github.io/tags/%E5%8D%A1%E5%88%B7/"/>
    
    <category term="线刷" scheme="https://goghtsui.github.io/tags/%E7%BA%BF%E5%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>Http协议简介</title>
    <link href="https://goghtsui.github.io/2016/03/02/Http%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/undefined/"/>
    <id>https://goghtsui.github.io/2016/03/02/Http%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/undefined/</id>
    <published>2016-03-02T06:20:33.000Z</published>
    <updated>2021-01-26T02:34:57.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：吾爱<br>源地址：<a href="http://my.oschina.net/cxz001/blog/331671">点击跳转</a></p></blockquote><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg" alt="request-response"><br>我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？</p><p>对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。</p><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png" alt="web-request-process"></p><a id="more"></a><p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。</p><h2 id="Web服务器的工作原理可以简单地定义为："><a href="#Web服务器的工作原理可以简单地定义为：" class="headerlink" title="Web服务器的工作原理可以简单地定义为："></a>Web服务器的工作原理可以简单地定义为：</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>客户机通过TCP/IP协议建立到服务器的TCP连接</td></tr><tr><td>2</td><td>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</td></tr><tr><td>3</td><td>服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端</td></tr><tr><td>4</td><td>客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果</td></tr></tbody></table><p>一个简单的HTTP事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。</p><h2 id="URL和DNS解析"><a href="#URL和DNS解析" class="headerlink" title="URL和DNS解析"></a>URL和DNS解析</h2><p>我们浏览网页都是通过URL访问的，那么URL到底是怎么样的呢？<br>URL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：</p><p><code>html scheme://host[:port#]/path/.../[?query-string][#anchor]</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>scheme</td><td>指定低层使用的协议(例如：http, https, ftp)</td></tr><tr><td>host</td><td>HTTP服务器的IP地址或者域名</td></tr><tr><td>port</td><td>HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.qixing318.com/">http://www.qixing318.com:80/</a></td></tr><tr><td>path</td><td>访问资源的路径</td></tr><tr><td>query-string</td><td>发送给http服务器的数据</td></tr><tr><td>anchor</td><td>锚</td></tr></tbody></table><p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。</p><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/97fc06248d4bc542a355ddfce1549044.png" alt="dns-core"></p><h2 id="DNS工作原理"><a href="#DNS工作原理" class="headerlink" title="DNS工作原理"></a>DNS工作原理</h2><p>更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>在浏览器中输入<a href="http://www.qq.com域名,操作系统会先检查自己本地的hosts文件是否有这个网址映射关系,如果有,就先调用这个ip地址映射,完成域名解析./">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a></td></tr><tr><td>2</td><td>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</td></tr><tr><td>3</td><td>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</td></tr><tr><td>4</td><td>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</td></tr><tr><td>5</td><td>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qixing318.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qixing318.com域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qixing318.com主机./">www.qixing318.com主机。</a></td></tr><tr><td>6</td><td>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</td></tr></tbody></table><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/639c39cf315ddbd717d3d2d78ff74228.png" alt="dns-process"></p><h2 id="DNS解析的整个流程"><a href="#DNS解析的整个流程" class="headerlink" title="DNS解析的整个流程"></a>DNS解析的整个流程</h2><p>所谓 递归查询过程 就是 “查询的递交者” 更替, 而 迭代查询过程 则是 “查询的递交者”不变。</p><blockquote><p>举个例子来说，你想知道某个一起上法律课的女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(此处完成了一次递归查询，即，问询者的角色更替)。然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。(此处完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)最后，他把号码交到了你手里。完成整个查询过程。<br>通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。</p></blockquote><h2 id="HTTP协议详解"><a href="#HTTP协议详解" class="headerlink" title="HTTP协议详解"></a>HTTP协议详解</h2><p>HTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。</p><p>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议–客户端发出一个请求，服务器响应这个请求。</p><p>在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。</p><p>HTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。</p><blockquote><p>HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p></blockquote><h2 id="HTTP请求包（浏览器信息）"><a href="#HTTP请求包（浏览器信息）" class="headerlink" title="HTTP请求包（浏览器信息）"></a>HTTP请求包（浏览器信息）</h2><p>我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。</p><p>header和body之间有个空行，请求包的例子所示:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>GET /domains/example/ HTTP/1.1</td><td>请求行: 请求方法 请求URI HTTP协议/协议版本</td></tr><tr><td>Host：<a href="http://www.qixing318.com/">www.qixing318.com</a>.</td><td>服务端的主机名</td></tr><tr><td>User-Agent：Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4</td><td>客户端浏览器信息</td></tr><tr><td>Accept：text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</td><td>客户端能接收的mine类型</td></tr><tr><td>Accept-Encoding：gzip,deflate,sdcn</td><td>是否支持流压缩</td></tr><tr><td>Accept-Charset：UTF-8,*;q=0.5</td><td>客户端字符编码集</td></tr><tr><td>“\r\n\r\n”</td><td>空行,用于分割请求头和消息体</td></tr><tr><td>“\r\n\r\n”</td><td>空行,消息体,请求资源参数,例如POST传递的参数</td></tr></tbody></table><p>HTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p><h2 id="通过fiddler抓包可以看到如下请求信息"><a href="#通过fiddler抓包可以看到如下请求信息" class="headerlink" title="通过fiddler抓包可以看到如下请求信息:"></a>通过fiddler抓包可以看到如下请求信息:</h2><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/1b655d5bc2e339010d3857fb50c841a2.png" alt="fiddler-get"><br>上图为：fiddler抓取的GET信息</p><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/125b42ec4dcfb1e5601c8e2695076fb9.png" alt="fiddler-post"><br>上图为：fiddler抓取的POST信息</p><h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别:"></a>GET和POST的区别:</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>我们可以看到GET请求消息体为空，POST请求带有消息体。</td></tr><tr><td>2</td><td>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456。POST方法是把提交的数据放在HTTP包的body中。</td></tr><tr><td>3</td><td>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</td></tr><tr><td>4</td><td>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</td></tr></tbody></table><h2 id="HTTP响应包（服务器信息）"><a href="#HTTP响应包（服务器信息）" class="headerlink" title="HTTP响应包（服务器信息）"></a>HTTP响应包（服务器信息）</h2><p>我们再来看看HTTP的response包，他的结构如下：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>HTTP/1.1 200 OK</td><td>状态行</td></tr><tr><td>Server: nginx/1.0.8</td><td>服务器使用的WEB软件名及版本</td></tr><tr><td>Date:Date: Tue, 30 Oct 2012 04:14:25 GMT</td><td>发送时间</td></tr><tr><td>Content-Type: text/html</td><td>服务器发送信息的类型</td></tr><tr><td>Transfer-Encoding: chunked</td><td>表示发送HTTP包是分段发的</td></tr><tr><td>Connection: keep-alive</td><td>保持连接状态</td></tr><tr><td>Content-Length: 90</td><td>消息主体内容长度</td></tr><tr><td>\r\n</td><td>空行，用来分割消息头和主体</td></tr><tr><td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN”…</td><td>消息体部分</td></tr></tbody></table><p>Response包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。<br>HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p><blockquote><p><a href="https://httpstatuses.com/">状态码详细查询</a></p></blockquote><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>1XX</td><td>提示信息 - 表示请求已被成功接收，继续处理</td></tr><tr><td>2XX</td><td>成功 - 表示请求已被成功接收，理解，接受</td></tr><tr><td>3XX</td><td>重定向 - 要完成请求必须进行更进一步的处理</td></tr><tr><td>4XX</td><td>客户端错误 - 请求有语法错误或请求无法实现</td></tr><tr><td>5XX</td><td>服务器端错误 - 服务器未能实现合法的请求</td></tr></tbody></table><p>我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。<br><img src="http://www.qixing318.com/uploads/blog/image/20150120/c9e285dfb362101c4d258534ccfa5401.png" alt="request-allinfo"><br>【上图：访问一次网站的全部请求信息】</p><h2 id="HTTP协议是无状态的和Connection-keep-alive的区别"><a href="#HTTP协议是无状态的和Connection-keep-alive的区别" class="headerlink" title="HTTP协议是无状态的和Connection: keep-alive的区别"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h2><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。<br>从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。<br>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。</p><h2 id="请求实例"><a href="#请求实例" class="headerlink" title="请求实例"></a>请求实例</h2><p><img src="http://www.qixing318.com/uploads/blog/image/20150120/919ca19ef2176dacecdd2824083e9baa.png" alt="request-entity"></p><p>【上图为：一次请求的request和response】</p><p>上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。</p><p>这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。</p><blockquote><p>网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：吾爱&lt;br&gt;源地址：&lt;a href=&quot;http://my.oschina.net/cxz001/blog/331671&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg&quot; alt=&quot;request-response&quot;&gt;&lt;br&gt;我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？&lt;/p&gt;
&lt;p&gt;对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png&quot; alt=&quot;web-request-process&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="http协议" scheme="https://goghtsui.github.io/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>实用bat脚本[笔记]</title>
    <link href="https://goghtsui.github.io/2016/03/01/%E5%AE%9E%E7%94%A8bat%E8%84%9A%E6%9C%AC-%E7%AC%94%E8%AE%B0/undefined/"/>
    <id>https://goghtsui.github.io/2016/03/01/%E5%AE%9E%E7%94%A8bat%E8%84%9A%E6%9C%AC-%E7%AC%94%E8%AE%B0/undefined/</id>
    <published>2016-03-01T03:41:36.000Z</published>
    <updated>2021-01-26T02:34:57.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h3><hr><p>一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：</p><pre><code class="bash">@echo off color 0atitle ********系统垃圾清理******** echo 正在清除系统垃圾文件，请稍后...... echo 删除补丁备份目录 RD %windir%\$hf_mig$ /Q /S echo 把补丁卸载文件夹的名字保存成patchs.txt dir %windir%\$NtUninstall* /a:d /b &gt;%windir%\patchs.txt echo 从patchs.txt中读取文件夹列表并且删除文件夹 for /f %%i in (%windir%\patchs.txt) do rd %windir%\%%i /s /q echo 删除patchs.txt del %windir%\patchs.txt /f /q echo 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\*.log已经包含删除此类文件） del %windir%\KB*.log /f /q echo 删除系统盘目录下临时文件 del /f /s /q %systemdrive%\*.tmp echo 删除系统盘目录下临时文件 del /f /s /q %systemdrive%\*._mp echo 删除系统盘目录下日志文件 del /f /s /q %systemdrive%\*.log echo 删除系统盘目录下GID文件(属于临时文件，具体作用不详) del /f /s /q %systemdrive%\*.gid echo 删除系统目录下scandisk（磁盘扫描）留下的无用文件 del /f /s /q %systemdrive%\*.chk echo 删除系统目录下old文件 del /f /s /q %systemdrive%\*.oldecho 删除回收站的无用文件 del /f /s /q %systemdrive%\recycled\*.* echo 删除系统目录下备份文件 del /f /s /q %windir%\*.bak echo 删除应用程序临时文件 del /f /s /q %windir%\prefetch\*.* echo 删除系统维护等操作产生的临时文件 rd /s /q %windir%\temp &amp; md %windir%\temp echo 删除当前用户的COOKIE（IE） del /f /q %userprofile%\cookies\*.* echo 删除internet临时文件 del /f /s /q &quot;%userprofile%\local settings\temporary internet files\*.*&quot; del /f /s /q &quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&quot;echo 删除当前用户日常操作临时文件 del /f /s /q &quot;%userprofile%\local settings\temp\*.*&quot; del /f /s /q &quot;%userprofile%\Local Settings\Temp\*.*&quot;echo 删除访问记录（开始菜单中的文档里面的东西） del /f /s /q &quot;%userprofile%\recent\*.*&quot; echo echo 恭喜您！清理全部完成！echo. &amp; pause</code></pre><a id="more"></a><p>右键 -&gt; 已管理员身份运行 即可，不会存在任何风险，当然你也可以自己添加路径或者相关的处理，可以说是绿色安全</p><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><hr><pre><code class="bash">@echo offcolor 0atitle ********快速启动******** echo 1、QQecho 2、Exitset /p s=请输入应用的编号，按Enter启动应用：if %s% equ 1 goto aif %s% equ 2 goto b:astart &quot;&quot; &quot;E:\Program Files (x86)\Tencent\QQ\Bin\QQ.exe&quot;echo QQ启动完成！exit:bexit</code></pre><p>这个就非常简单了，一个if判断，指定对应应用的绝对路径，启动指定的应用，还可以打开指定的路径的，因为我比较喜欢简洁的桌面，有了这个脚本，桌面上就不用放置很多快捷方式了</p><h3 id="adb-shell"><a href="#adb-shell" class="headerlink" title="adb shell"></a>adb shell</h3><hr><p>这个适用于Win系统下对手机执行一些操作，原因是命令行执行了adb shell之后，无法继续使用shell的相关命令，那么我们可以先将命令输出到一个文件里，在读取出来就可以了,以删除文件为例：</p><pre><code class="bash">adb rootadb remountecho cd /sdcard/ &gt;&gt; temp.txtecho rm -r 1.txt &gt;&gt; temp.txtecho exit &gt;&gt; temp.txtadb shell &lt; temp.txt</code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;垃圾清理&quot;&gt;&lt;a href=&quot;#垃圾清理&quot; class=&quot;headerlink&quot; title=&quot;垃圾清理&quot;&gt;&lt;/a&gt;垃圾清理&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
@echo off 
color 0a
title ********系统垃圾清理******** 
echo 正在清除系统垃圾文件，请稍后...... 

echo 删除补丁备份目录 
RD %windir%\$hf_mig$ /Q /S 

echo 把补丁卸载文件夹的名字保存成patchs.txt 
dir %windir%\$NtUninstall* /a:d /b &amp;gt;%windir%\patchs.txt 

echo 从patchs.txt中读取文件夹列表并且删除文件夹 
for /f %%i in (%windir%\patchs.txt) do rd %windir%\%%i /s /q 

echo 删除patchs.txt 
del %windir%\patchs.txt /f /q 

echo 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\*.log已经包含删除此类文件） 
del %windir%\KB*.log /f /q 

echo 删除系统盘目录下临时文件 
del /f /s /q %systemdrive%\*.tmp 

echo 删除系统盘目录下临时文件 
del /f /s /q %systemdrive%\*._mp 

echo 删除系统盘目录下日志文件 
del /f /s /q %systemdrive%\*.log 

echo 删除系统盘目录下GID文件(属于临时文件，具体作用不详) 
del /f /s /q %systemdrive%\*.gid 

echo 删除系统目录下scandisk（磁盘扫描）留下的无用文件 
del /f /s /q %systemdrive%\*.chk 

echo 删除系统目录下old文件 
del /f /s /q %systemdrive%\*.old

echo 删除回收站的无用文件 
del /f /s /q %systemdrive%\recycled\*.* 

echo 删除系统目录下备份文件 
del /f /s /q %windir%\*.bak 

echo 删除应用程序临时文件 
del /f /s /q %windir%\prefetch\*.* 

echo 删除系统维护等操作产生的临时文件 
rd /s /q %windir%\temp &amp;amp; md %windir%\temp 

echo 删除当前用户的COOKIE（IE） 
del /f /q %userprofile%\cookies\*.* 

echo 删除internet临时文件 
del /f /s /q &amp;quot;%userprofile%\local settings\temporary internet files\*.*&amp;quot; 
del /f /s /q &amp;quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&amp;quot;

echo 删除当前用户日常操作临时文件 
del /f /s /q &amp;quot;%userprofile%\local settings\temp\*.*&amp;quot; 
del /f /s /q &amp;quot;%userprofile%\Local Settings\Temp\*.*&amp;quot;

echo 删除访问记录（开始菜单中的文档里面的东西） 
del /f /s /q &amp;quot;%userprofile%\recent\*.*&amp;quot; 

echo echo 恭喜您！清理全部完成！
echo. &amp;amp; pause
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="PC" scheme="https://goghtsui.github.io/categories/PC/"/>
    
    
    <category term="bat" scheme="https://goghtsui.github.io/tags/bat/"/>
    
    <category term="批处理文件" scheme="https://goghtsui.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android之自定义actionbar[笔记]</title>
    <link href="https://goghtsui.github.io/2016/03/01/Android%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89actionbar[%E7%AC%94%E8%AE%B0]/undefined/"/>
    <id>https://goghtsui.github.io/2016/03/01/Android%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89actionbar[%E7%AC%94%E8%AE%B0]/undefined/</id>
    <published>2016-03-01T03:06:22.000Z</published>
    <updated>2021-01-26T02:34:57.573Z</updated>
    
    <content type="html"><![CDATA[<p>自定义actionbar或toolbar的属性样式：</p><pre><code class="xml">&lt;style name=&quot;detail_actionbar_style&quot; parent=&quot;AppBaseTheme&quot;&gt;        &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@null&lt;/item&gt;        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;        &lt;!--&lt;item name=&quot;android:colorBackgroundCacheHint&quot;&gt;@null&lt;/item&gt;--&gt;        &lt;!--&lt;item name=&quot;android:windowFrame&quot;&gt;@null&lt;/item&gt;--&gt;        &lt;!--&lt;item name=&quot;android:windowIsFloating&quot;&gt;false&lt;/item&gt;--&gt;        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowTranslucentNavigation&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowActionBar&quot;&gt;false&lt;/item&gt;        &lt;!-- actionbar --&gt;        &lt;item name=&quot;android:windowActionBarOverlay&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;        &lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/ActionBar.Style.Transparent&lt;/item&gt;        &lt;item name=&quot;android:actionOverflowButtonStyle&quot;&gt;@style/OverFlow&lt;/item&gt;    &lt;/style&gt;    &lt;!-- actionbar --&gt;    &lt;style name=&quot;ActionBar.Transparent&quot; parent=&quot;@android:style/Theme.Holo.Light&quot;&gt;        &lt;item name=&quot;android:windowActionBarOverlay&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;        &lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/ActionBar.Style.Transparent&lt;/item&gt;        &lt;item name=&quot;android:actionOverflowButtonStyle&quot;&gt;@style/OverFlow&lt;/item&gt;    &lt;/style&gt;    &lt;!-- 实现Actionbar的透明度 --&gt;    &lt;style name=&quot;ActionBar.Style.Transparent&quot; parent=&quot;@android:style/Widget.Holo.ActionBar&quot;&gt;        &lt;item name=&quot;android:background&quot;&gt;@android:color/transparent&lt;/item&gt;        &lt;item name=&quot;android:titleTextStyle&quot;&gt;@style/ActionBarText&lt;/item&gt;    &lt;/style&gt;    &lt;!-- 标题文字 --&gt;    &lt;style name=&quot;ActionBarText&quot;&gt;        &lt;item name=&quot;android:textSize&quot;&gt;19sp&lt;/item&gt;        &lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt;    &lt;/style&gt;    &lt;!-- 重写actionbar中 OverFlow的属性 --&gt;    &lt;style name=&quot;OverFlow&quot; parent=&quot;@android:style/Widget.Holo.ActionButton.Overflow&quot;&gt;        &lt;item name=&quot;android:src&quot;&gt;@drawable/custom_actionbar_overflow&lt;/item&gt;    &lt;/style&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自定义actionbar或toolbar的属性样式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;style name=&amp;quot;detail_actionbar_style&amp;quot; parent=&amp;quot;AppBaseTheme&amp;quot;&amp;g</summary>
      
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="沉浸式状态栏" scheme="https://goghtsui.github.io/tags/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java之HashMap和HashTable的不同</title>
    <link href="https://goghtsui.github.io/2016/02/19/Java%E4%B9%8BHashMap%E5%92%8CHashTable%E7%9A%84%E4%B8%8D%E5%90%8C/undefined/"/>
    <id>https://goghtsui.github.io/2016/02/19/Java%E4%B9%8BHashMap%E5%92%8CHashTable%E7%9A%84%E4%B8%8D%E5%90%8C/undefined/</id>
    <published>2016-02-19T07:13:32.000Z</published>
    <updated>2021-01-26T02:34:57.576Z</updated>
    
    <content type="html"><![CDATA[<p>HashTable和HashMap的6个不同点：Java热门面试题例子</p><p>HashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是<em>Synchronization_、_Null keys and values_、_Iterating values_、_Fail fast iterator_、_Performance_、_Superclass</em></p><h2 id="HashTable和HashMap的不同"><a href="#HashTable和HashMap的不同" class="headerlink" title="HashTable和HashMap的不同"></a>HashTable和HashMap的不同</h2><p><strong>1.Synchronization or Thread Safe :</strong></p><p>这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。</p><p>什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。</p><a id="more"></a><p>扩展：<br>Java提供了ConcurrentHashMap，它是HashTable的替代品，比HashTable的扩展性更好。HashMap可以通过下面的语句进行同步：</p><pre><code class="java">Map m = Collections.synchronizeMap(hashMap);</code></pre><p><strong>2. Null keys and null values :</strong></p><p>HashMap允许一个空的key和多个空的value， 然而HashTable不允许空的键值。</p><p><strong>3. Iterating the values:</strong></p><p>HashMap对象的值是通过Iterator迭代的。HashTable是除vector之外惟一的一个使用了enumerator迭代器来迭代其对象值的类。</p><p><strong>4.  Fail-fast iterator :</strong></p><p>在HashMap中是<strong>fail-fast</strong>迭代器，而HashTable的emumerator不是。根据<a href="http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html">Oracle Docs</a>,如果HashTable对象的iterator以任何方式被创建之后它在“结构上”被修改，那么除了迭代器自己的remove方法，否则迭代器将抛出ConcurrentModificationException异常。</p><p>结构上的更改指的是删除或者插入一个元素（hashtable和hashmap），因此，由Hashtable的键和元素方法返回的enumerations不是Fail-fast。关于<a href="http://javahungry.blogspot.com/2013/06/difference-between-iterator-and-enumeration-collections-java-interview-question-with-example.html">iterator and enumeration的不同</a>.</p><p>扩展：<br>如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</p><p><strong>5. Performance :</strong><br>HashMap是比较快的，并且使用了很少的内存。在单个的线程环境中，不同步的对象通常在性能上是比同步的对象要好的。</p><p><strong>6.Superclass and Legacy :</strong><br>HashTable是Dictionary的子类，在jdk 1.7中已经过时了，因此它不再被使用。它是最好的外部实现同步的方法，或者使用一个ConcurrentMap实现（如ConcurrentHashMap）HashMap是AbstractMap的子类，尽管HashMap和HashTable有不同的父类，但是他们都继承了抽象类“Map”。</p><h2 id="HashMap和HashTable的例子"><a href="#HashMap和HashTable的例子" class="headerlink" title="HashMap和HashTable的例子"></a>HashMap和HashTable的例子</h2><pre><code class="java">import java.util.Hashtable;public class HashMapHashtableExample &#123;    public static void main(String[] args) &#123;         Hashtable&lt;String,String&gt; hashtableobj = new Hashtable&lt;String, String&gt;();        hashtableobj.put(&quot;Alive is &quot;, &quot;awesome&quot;);        hashtableobj.put(&quot;Love&quot;, &quot;yourself&quot;);        System.out.println(&quot;Hashtable object output :&quot;+ hashtableobj);        HashMap hashmapobj = new HashMap();        hashmapobj.put(&quot;Alive is &quot;, &quot;awesome&quot;);          hashmapobj.put(&quot;Love&quot;, &quot;yourself&quot;);         System.out.println(&quot;HashMap object output :&quot;+hashmapobj);        &#125;&#125;</code></pre><p>输出结果：</p><pre><code>Hashtable object output :&#123;Love=yourself, Alive is =awesome&#125;HashMap object output :&#123;Alive is =awesome, Love=yourself&#125;</code></pre><h2 id="HashMap和Hashtable的相似之处"><a href="#HashMap和Hashtable的相似之处" class="headerlink" title="HashMap和Hashtable的相似之处"></a>HashMap和Hashtable的相似之处</h2><ul><li><p><strong>1.插入顺序：</strong> 随着时间的推移，HashMap和HashTable都不能保证集合的顺序，相反的，使用LinkedHashMap不会因为时间的推移而改变顺序。</p></li><li><p><strong>2.Map接口：</strong> HashMap和HashTable都是实现了Map接口。</p></li><li><p><strong>3.存和取的方法：</strong> HashMap和HashTable为存取提供了稳定的时间性能</p></li><li><p><strong>4.内部原理：</strong> HashMap和HashTable遵顼的是散列的原则：[HashMap是如何工作的？][3]</p></li></ul><h2 id="HashMap和HashTable什么时候使用？"><a href="#HashMap和HashTable什么时候使用？" class="headerlink" title="HashMap和HashTable什么时候使用？"></a>HashMap和HashTable什么时候使用？</h2><ul><li><p><strong>1. 单线程应用</strong><br>在非线程应用中，HashMap要优于HashTable的，简单来说，使用HashMap在非同步或者单线程的应用中。</p></li><li><p><strong>2. 多线程应用</strong><br>我们应该避免使用Hashtable，因为这个类在最近的jdk1.8中过时了。Oracle已经提供了很好的替代的类：<strong>ConcurrentHashMap</strong>，对于多线程应用，使用ConcurrentHashMap而不是Hashtable。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>区别</th><th>HashMap</th><th>HashTable</th></tr></thead><tbody><tr><td>同步</td><td>NO</td><td>Yes</td></tr><tr><td>线程安全</td><td>NO</td><td>Yes</td></tr><tr><td>空键值</td><td>一个空键，任意空值</td><td>不允许空键值</td></tr><tr><td>迭代类型</td><td>Fail fast迭代器</td><td>Fail safe迭代器</td></tr><tr><td>性能</td><td>快</td><td>作比较慢</td></tr><tr><td>父类和遗弃</td><td>AbstractMap，NO</td><td>Dictionary , Yes</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;HashTable和HashMap的6个不同点：Java热门面试题例子&lt;/p&gt;
&lt;p&gt;HashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是&lt;em&gt;Synchronization_、_Null keys and values_、_Iterating values_、_Fail fast iterator_、_Performance_、_Superclass&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;HashTable和HashMap的不同&quot;&gt;&lt;a href=&quot;#HashTable和HashMap的不同&quot; class=&quot;headerlink&quot; title=&quot;HashTable和HashMap的不同&quot;&gt;&lt;/a&gt;HashTable和HashMap的不同&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.Synchronization or Thread Safe :&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。&lt;/p&gt;
&lt;p&gt;什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="HashTable" scheme="https://goghtsui.github.io/tags/HashTable/"/>
    
    <category term="HashMap" scheme="https://goghtsui.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Android之Matrix</title>
    <link href="https://goghtsui.github.io/2016/02/19/Android%E4%B9%8BMatrix/undefined/"/>
    <id>https://goghtsui.github.io/2016/02/19/Android%E4%B9%8BMatrix/undefined/</id>
    <published>2016-02-19T07:11:37.000Z</published>
    <updated>2021-01-26T02:34:57.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者： Qiengo<br>源地址： <a href="http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html">点击跳转</a></p></blockquote><h2 id="Matrix的数学原理"><a href="#Matrix的数学原理" class="headerlink" title="Matrix的数学原理"></a>Matrix的数学原理</h2><p>在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif" alt="matrix_iamge_description"></p><p>Matrix的对图像的处理可分为四类基本变换：</p><ul><li>Translate - 平移变换</li><li>Rotate - 旋转变换</li><li>Scale - 缩放变换</li><li>Skew - 错切变换</li></ul><p>从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。</p><p>针对每种变换，Android提供了pre、set和post三种操作方式。其中：</p><ul><li>set - 用于设置Matrix中的值。</li><li>pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。</li><li>post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。</li></ul><p>除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。</p><p>下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。</p><a id="more"></a><h3 id="一、-平移变换"><a href="#一、-平移变换" class="headerlink" title="一、 平移变换"></a>一、 平移变换</h3><hr><p>假定有一个点的坐标是 ，将其移动到 ，再假定在x轴和y轴方向移动的大小分别为：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709352RQ75.gif" alt="translate"></p><p>如下图所示：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709520MmsS.gif" alt="translate_sample"></p><p>不难知道：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709527kmK6.gif" alt="translate_result"></p><p>如果用矩阵来表示的话，就可以写成：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709536Otg4.gif" alt="translate_tips"></p><h3 id="二、-旋转变换"><a href="#二、-旋转变换" class="headerlink" title="二、 旋转变换"></a>二、 旋转变换</h3><hr><h4 id="2-1-围绕坐标原点旋转："><a href="#2-1-围绕坐标原点旋转：" class="headerlink" title="2.1    围绕坐标原点旋转："></a>2.1    围绕坐标原点旋转：</h4><p>假定有一个点 ，相对坐标原点顺时针旋转后的情形，同时假定P点离坐标原点的距离为r，如下图：<br><img src="http://hi.csdn.net/attachment/201111/19/0_132170975189NC.gif" alt="translate_tips"></p><p>那么，<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709797SBJW.gif" alt="translate_tips"></p><p>如果用矩阵，就可以表示为：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321709849ZLVc.gif" alt="translate_tips"></p><h4 id="2-2-围绕某个点旋转"><a href="#2-2-围绕某个点旋转" class="headerlink" title="2.2    围绕某个点旋转"></a>2.2    围绕某个点旋转</h4><p>如果是围绕某个点顺时针旋转，那么可以用矩阵表示为：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217100380220.gif" alt="translate_tips"></p><p>可以化为：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217100952Vqv.gif" alt="translate_tips"></p><p>很显然，</p><p><strong>1.</strong><br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710153kurQ.gif" alt="translate_tips"> 是将坐标原点移动到点后， 的新坐标。</p><p><strong>2.</strong>     </p><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321710301T9nf.gif" alt="translate_tips"> 是将上一步变换后的，围绕新的坐标原点顺时针旋转 。</p><p><strong>3.</strong><br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710398Z3Je.gif" alt="translate_tips"> 经过上一步旋转变换后，再将坐标原点移回到原来的坐标原点。</p><p>所以，围绕某一点进行旋转变换，可以分成3个步骤，即首先将坐标原点移至该点，然后围绕新的坐标原点进行旋转变换，再然后将坐标原点移回到原先的坐标原点。</p><h3 id="三、-缩放变换"><a href="#三、-缩放变换" class="headerlink" title="三、 缩放变换"></a>三、 缩放变换</h3><hr><p>理论上而言，一个点是不存在什么缩放变换的，但考虑到所有图像都是由点组成，因此，如果图像在x轴和y轴方向分别放大k1和k2倍的话，那么图像中的所有点的x坐标和y坐标均会分别放大k1和k2倍，即</p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710517pb9W.gif" alt="translate_tips"></p><p>缩放变换比较好理解，就不多说了。<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710615riwr.gif" alt="translate_tips"></p><h3 id="四、-错切变换"><a href="#四、-错切变换" class="headerlink" title="四、 错切变换"></a>四、 错切变换</h3><hr><p>错切变换(skew)在数学上又称为Shear mapping(可译为“剪切变换”)或者Transvection(缩并)，它是一种比较特殊的线性变换。错切变换的效果就是让所有点的x坐标(或者y坐标)保持不变，而对应的y坐标(或者x坐标)则按比例发生平移，且平移的大小和该点到x轴(或y轴)的垂直距离成正比。错切变换，属于等面积变换，即一个形状在错切变换的前后，其面积是相等的。</p><p>比如下图，各点的y坐标保持不变，但其x坐标则按比例发生了平移。这种情况将水平错切。<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710625smm5.gif" alt="translate_tips"></p><p>下图各点的x坐标保持不变，但其y坐标则按比例发生了平移。这种情况叫垂直错切。<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710790633H.gif" alt="translate_tips"></p><p>假定一个点经过错切变换后得到，对于水平错切而言，应该有如下关系：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321710798y5L6.gif" alt="translate_tips"></p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217108084B3T.gif" alt="translate_tips"></p><p>扩展到3 x 3的矩阵就是下面这样的形式：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217108954sms.gif" alt="translate_tips"></p><p>同理，对于垂直错切，可以有：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217109074Nv2.gif" alt="translate_tips"></p><p>在数学上严格的错切变换就是上面这样的。在Android中除了有上面说到的情况外，还可以同时进行水平、垂直错切，那么形式上就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711018S31a.gif" alt="translate_tips"></p><h3 id="五、-对称变换"><a href="#五、-对称变换" class="headerlink" title="五、 对称变换"></a>五、 对称变换</h3><hr><p>除了上面讲到的4中基本变换外，事实上，我们还可以利用Matrix，进行对称变换。所谓对称变换，就是经过变化后的图像和原图像是关于某个对称轴是对称的。比如，某点 经过对称变换后得到，</p><p>如果对称轴是x轴，难么，<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711026LZ03.gif" alt="translate_tips"></p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711090fhGd.gif" alt="translate_tips"></p><p>如果对称轴是y轴，那么，<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711099Xhak.gif" alt="translate_tips"></p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711217oHNz.gif" alt="translate_tips"></p><p>如果对称轴是y = x，如图：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif" alt="translate_tips"></p><p>那么，<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif" alt="translate_tips"></p><p>很容易可以解得：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711261E6xG.gif" alt="translate_tips"></p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif" alt="translate_tips"></p><p>同样的道理，如果对称轴是y = -x，那么用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif" alt="translate_tips"></p><p>特殊地，如果对称轴是y = kx，如下图：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217113506Hb8.gif" alt="translate_tips"></p><p>那么，<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711502QQ7A.gif" alt="translate_tips"></p><p>很容易可解得：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711521GZlt.gif" alt="translate_tips"></p><p>用矩阵表示就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711541FJA1.gif" alt="translate_tips"></p><p>当k = 0时，即y = 0，也就是对称轴为x轴的情况；当k趋于无穷大时，即x = 0，也就是对称轴为y轴的情况；当k =1时，即y = x，也就是对称轴为y = x的情况；当k = -1时，即y = -x，也就是对称轴为y = -x的情况。不难验证，这和我们前面说到的4中具体情况是相吻合的。</p><p>如果对称轴是y = kx + b这样的情况，只需要在上面的基础上增加两次平移变换即可，即先将坐标原点移动到(0, b)，然后做上面的关于y = kx的对称变换，再然后将坐标原点移回到原来的坐标原点即可。用矩阵表示大致是这样的：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711616I9SJ.gif" alt="translate_tips"></p><p>需要特别注意：在实际编程中，我们知道屏幕的y坐标的正向和数学中y坐标的正向刚好是相反的，所以在数学上y = x和屏幕上的y = -x才是真正的同一个东西，反之亦然。也就是说，如果要使图片在屏幕上看起来像按照数学意义上y = x对称，那么需使用这种转换：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif" alt="translate_tips"></p><p>要使图片在屏幕上看起来像按照数学意义上y = -x对称，那么需使用这种转换：<br><img src="http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif" alt="translate_tips"></p><p>关于对称轴为y = kx 或y = kx + b的情况，同样需要考虑这方面的问题。</p><h2 id="第二部分-代码验证"><a href="#第二部分-代码验证" class="headerlink" title="第二部分 代码验证"></a>第二部分 代码验证</h2><p>在第一部分中讲到的各种图像变换的验证代码如下，一共列出了10种情况。如果要验证其中的某一种情况，只需将相应的代码反注释即可。试验中用到的图片：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217122673338.gif"><br>其尺寸为162 x 251。</p><p>每种变换的结果，请见代码之后的说明。</p><pre><code class="java">package com.pat.testtransformmatrix;  import android.app.Activity;  import android.content.Context;  import android.graphics.Bitmap;  import android.graphics.BitmapFactory;  import android.graphics.Canvas;  import android.graphics.Matrix;  import android.os.Bundle;  import android.util.Log;  import android.view.MotionEvent;  import android.view.View;  import android.view.Window;  import android.view.WindowManager;  import android.view.View.OnTouchListener;  import android.widget.ImageView;  public class TestTransformMatrixActivity extends Activity  implements  OnTouchListener  &#123;      private TransformMatrixView view;      @Override      public void onCreate(Bundle savedInstanceState)      &#123;          super.onCreate(savedInstanceState);          requestWindowFeature(Window.FEATURE_NO_TITLE);          this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);          view = new TransformMatrixView(this);          view.setScaleType(ImageView.ScaleType.MATRIX);          view.setOnTouchListener(this);          setContentView(view);      &#125;      class TransformMatrixView extends ImageView      &#123;          private Bitmap bitmap;          private Matrix matrix;          public TransformMatrixView(Context context)          &#123;              super(context);              bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sophie);              matrix = new Matrix();          &#125;          @Override          protected void onDraw(Canvas canvas)          &#123;              // 画出原图像              canvas.drawBitmap(bitmap, 0, 0, null);              // 画出变换后的图像              canvas.drawBitmap(bitmap, matrix, null);              super.onDraw(canvas);          &#125;          @Override          public void setImageMatrix(Matrix matrix)          &#123;              this.matrix.set(matrix);              super.setImageMatrix(matrix);          &#125;          public Bitmap getImageBitmap()          &#123;              return bitmap;          &#125;      &#125;      public boolean onTouch(View v, MotionEvent e)      &#123;          if(e.getAction() == MotionEvent.ACTION_UP)          &#123;              Matrix matrix = new Matrix();              // 输出图像的宽度和高度(162 x 251)              Log.e(&quot;TestTransformMatrixActivity&quot;, &quot;image size: width x height = &quot; +  view.getImageBitmap().getWidth() + &quot; x &quot; + view.getImageBitmap().getHeight());              // 1. 平移              matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());              // 在x方向平移view.getImageBitmap().getWidth()，在y轴方向view.getImageBitmap().getHeight()              view.setImageMatrix(matrix);              // 下面的代码是为了查看matrix中的元素              float[] matrixValues = new float[9];              matrix.getValues(matrixValues);              for(int i = 0; i &lt; 3; ++i)              &#123;                  String temp = new String();                  for(int j = 0; j &lt; 3; ++j)                  &#123;                      temp += matrixValues[3 * i + j ] + &quot;\t&quot;;                  &#125;                  Log.e(&quot;TestTransformMatrixActivity&quot;, temp);              &#125;  //          // 2. 旋转(围绕图像的中心点)  //          matrix.setRotate(45f, view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  //          matrix.postTranslate(view.getImageBitmap().getWidth() * 1.5f, 0f);  //          view.setImageMatrix(matrix);  //  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //          // 3. 旋转(围绕坐标原点) + 平移(效果同2)  //          matrix.setRotate(45f);  //          matrix.preTranslate(-1f * view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight() / 2f);  //          matrix.postTranslate((float)view.getImageBitmap().getWidth() / 2f, (float)view.getImageBitmap().getHeight() / 2f);  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  //          matrix.postTranslate((float)view.getImageBitmap().getWidth() * 1.5f, 0f);  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;             //          // 4. 缩放  //          matrix.setScale(2f, 2f);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  //          matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //          // 5. 错切 - 水平  //          matrix.setSkew(0.5f, 0f);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠           //          matrix.postTranslate(view.getImageBitmap().getWidth(), 0f);  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //          // 6. 错切 - 垂直  //          matrix.setSkew(0f, 0.5f);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               //          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;             //          7. 错切 - 水平 + 垂直  //          matrix.setSkew(0.5f, 0.5f);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               //          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //          // 8. 对称 (水平对称)  //          float matrix_values[] = &#123;1f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 1f&#125;;  //          matrix.setValues(matrix_values);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   //          matrix.postTranslate(0f, view.getImageBitmap().getHeight() * 2f);  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;             //          // 9. 对称 - 垂直  //          float matrix_values[] = &#123;-1f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 1f&#125;;  //          matrix.setValues(matrix_values);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;     //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   //          matrix.postTranslate(view.getImageBitmap().getWidth() * 2f, 0f);  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //          // 10. 对称(对称轴为直线y = x)  //          float matrix_values[] = &#123;0f, -1f, 0f, -1f, 0f, 0f, 0f, 0f, 1f&#125;;  //          matrix.setValues(matrix_values);  //          // 下面的代码是为了查看matrix中的元素  //          float[] matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;  //            //          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               //          matrix.postTranslate(view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth(),   //                  view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth());  //          view.setImageMatrix(matrix);  //            //          // 下面的代码是为了查看matrix中的元素  //          matrixValues = new float[9];  //          matrix.getValues(matrixValues);  //          for(int i = 0; i &lt; 3; ++i)  //          &#123;  //              String temp = new String();  //              for(int j = 0; j &lt; 3; ++j)  //              &#123;  //                  temp += matrixValues[3 * i + j ] + &quot;\t&quot;;  //              &#125;  //              Log.e(&quot;TestTransformMatrixActivity&quot;, temp);  //          &#125;              view.invalidate();          &#125;          return true;      &#125;  &#125;  </code></pre><p>下面给出上述代码中，各种变换的具体结果及其对应的相关变换矩阵</p><h3 id="1-平移"><a href="#1-平移" class="headerlink" title="1.平移"></a>1.平移</h3><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321712352qQRu.gif"></p><p>输出的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217123565Wwz.gif"></p><p>请对照第一部分中的“一、平移变换”所讲的情形，考察上述矩阵的正确性。</p><h3 id="2-旋转-围绕图像的中心点"><a href="#2-旋转-围绕图像的中心点" class="headerlink" title="2.旋转(围绕图像的中心点)"></a>2.旋转(围绕图像的中心点)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif"></p><p>输出的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321712512Yj1i.gif"></p><p>它实际上是</p><pre><code class="java">matrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);matrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);</code></pre><p>这两条语句综合作用的结果。根据第一部分中“二、旋转变换”里面关于围绕某点旋转的公式，</p><pre><code class="java">matrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);</code></pre><p>所产生的转换矩阵就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321712644I54M.gif"></p><p>而</p><pre><code class="java">matrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);</code></pre><p>的意思就是在上述矩阵的左边再乘以下面的矩阵：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217126508k4V.gif"></p><p>关于post是左乘这一点，我们在前面的理论部分曾经提及过，后面我们还会专门讨论这个问题。<br>所以它实际上就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217126608wdT.gif"></p><p>出去计算上的精度误差，我们可以看到我们计算出来的结果，和程序直接输出的结果是一致的。</p><h3 id="3-旋转-围绕坐标原点旋转，在加上两次平移，效果同2"><a href="#3-旋转-围绕坐标原点旋转，在加上两次平移，效果同2" class="headerlink" title="3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)"></a>3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif"></p><p>根据第一部分中“二、旋转变换”里面关于围绕某点旋转的解释，不难知道：</p><pre><code class="java">matrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);</code></pre><p>等价于</p><pre><code class="java">matrix.setRotate(45f);matrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);matrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);</code></pre><p>其中<code>matrix.setRotate(45f)</code>对应的矩阵是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321712949GjN7.gif"></p><pre><code class="java">matrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight()/ 2f)</code></pre><p>对应的矩阵是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321712956BNj8.gif"></p><p>由于是preTranslate，是先乘，也就是右乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的右侧。</p><pre><code class="java">matrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f)</code></pre><p>对应的矩阵是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321712963iNO1.gif"></p><p>这次由于是postTranslate，是后乘，也就是左乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的左侧。</p><p>所以综合起来，</p><pre><code class="java">matrix.setRotate(45f);matrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);matrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);</code></pre><p>对应的矩阵就是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713055HOOt.gif"></p><p>这和下面这个矩阵(围绕图像中心顺时针旋转45度)其实是一样的：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713100VIOz.gif"></p><p>因此，此处变换后的图像和2中变换后的图像时一样的。<br>![][307]</p><h3 id="4-缩放变换"><a href="#4-缩放变换" class="headerlink" title="4.缩放变换"></a>4.缩放变换</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321713185yKS7.gif"></p><p>程序所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217131941R24.gif"></p><p>其中第二个矩阵，其实是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713201VRxs.gif"></p><p>大家可以对照第一部分中的“三、缩放变换”和“一、平移变换”说法，自行验证结果。</p><h3 id="5-错切变换-水平错切"><a href="#5-错切变换-水平错切" class="headerlink" title="5.错切变换(水平错切)"></a>5.错切变换(水平错切)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_132171330766G0.gif"></p><p>代码所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713314Dk69.gif"></p><p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713322PeML.gif"></p><p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="6-错切变换-垂直错切"><a href="#6-错切变换-垂直错切" class="headerlink" title="6.错切变换(垂直错切)"></a>6.错切变换(垂直错切)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321713502Akg2.gif"></p><p>代码所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713509Hz7p.gif"></p><p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321713516TUvx.gif"></p><p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="7-错切变换-水平-垂直错切"><a href="#7-错切变换-水平-垂直错切" class="headerlink" title="7.错切变换(水平+垂直错切)"></a>7.错切变换(水平+垂直错切)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321713655Qsij.gif"></p><p>代码所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217136824kKR.gif"></p><p>其中，后者是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217136931vl4.gif"></p><p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="8-对称变换-水平对称"><a href="#8-对称变换-水平对称" class="headerlink" title="8.对称变换(水平对称)"></a>8.对称变换(水平对称)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_13217141232rJI.gif"></p><p>代码所输出的两个各矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321714133P0ha.gif"></p><p>其中，后者是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217141417Bi3.gif"></p><p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="9-对称变换-垂直对称"><a href="#9-对称变换-垂直对称" class="headerlink" title="9.对称变换(垂直对称)"></a>9.对称变换(垂直对称)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_1321714261NN3V.gif"></p><p>代码所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321714269Kqs4.gif"></p><p>其中，后者是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321714276ai2f.gif"></p><p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="10-对称变换-对称轴为直线y-x"><a href="#10-对称变换-对称轴为直线y-x" class="headerlink" title="10.对称变换(对称轴为直线y = x)"></a>10.对称变换(对称轴为直线y = x)</h3><hr><p><img src="http://hi.csdn.net/attachment/201111/19/0_13217144950030.gif"></p><p>代码所输出的两个矩阵分别是：<br><img src="http://hi.csdn.net/attachment/201111/19/0_13217145038hN8.gif"></p><p>其中，后者是下面两个矩阵相乘的结果：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321714509sBN4.gif"></p><p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p><h3 id="11-关于先乘和后乘的问题"><a href="#11-关于先乘和后乘的问题" class="headerlink" title="11.关于先乘和后乘的问题"></a>11.关于先乘和后乘的问题</h3><hr><p>由于矩阵的乘法运算不满足交换律，我们在前面曾经多次提及先乘、后乘的问题，即先乘就是矩阵运算中右乘，后乘就是矩阵运算中的左乘。其实先乘、后乘的概念是针对变换操作的时间先后而言的，左乘、右乘是针对矩阵运算的左右位置而言的。以第一部分“二、旋转变换”中围绕某点旋转的情况为例：<br><img src="http://hi.csdn.net/attachment/201111/19/0_1321714645396z.gif"></p><p>越靠近原图像中像素的矩阵，越先乘，越远离原图像中像素的矩阵，越后乘。事实上，图像处理时，矩阵的运算是从右边往左边方向进行运算的。这就形成了越在右边的矩阵(右乘)，越先运算(先乘)，反之亦然。</p><p>当然，在实际中，如果首先指定了一个matrix，比如我们先setRotate()，即指定了上面变换矩阵中，中间的那个矩阵，那么后续的矩阵到底是pre还是post运算，都是相对这个中间矩阵而言的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者： Qiengo&lt;br&gt;源地址： &lt;a href=&quot;http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html&quot;&gt;点击跳转&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Matrix的数学原理&quot;&gt;&lt;a href=&quot;#Matrix的数学原理&quot; class=&quot;headerlink&quot; title=&quot;Matrix的数学原理&quot;&gt;&lt;/a&gt;Matrix的数学原理&lt;/h2&gt;&lt;p&gt;在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：&lt;br&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif&quot; alt=&quot;matrix_iamge_description&quot;&gt;&lt;/p&gt;
&lt;p&gt;Matrix的对图像的处理可分为四类基本变换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Translate - 平移变换&lt;/li&gt;
&lt;li&gt;Rotate - 旋转变换&lt;/li&gt;
&lt;li&gt;Scale - 缩放变换&lt;/li&gt;
&lt;li&gt;Skew - 错切变换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。&lt;/p&gt;
&lt;p&gt;针对每种变换，Android提供了pre、set和post三种操作方式。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set - 用于设置Matrix中的值。&lt;/li&gt;
&lt;li&gt;pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。&lt;/li&gt;
&lt;li&gt;post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。&lt;/p&gt;
&lt;p&gt;下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Matrix" scheme="https://goghtsui.github.io/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>Android Material Design入门</title>
    <link href="https://goghtsui.github.io/2015/12/31/Android-Material-Design%E5%85%A5%E9%97%A8/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/31/Android-Material-Design%E5%85%A5%E9%97%A8/undefined/</id>
    <published>2015-12-31T01:41:32.000Z</published>
    <updated>2021-01-26T02:34:57.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：Ravi Tamada<br>原文地址：<a href="http://www.androidhive.info/2015/04/android-getting-started-with-material-design/">http://www.androidhive.info/…with-material-design/</a></p></blockquote><p>你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。</p><p>在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。</p><p>通过下面的链接获取更多的关于Material Design的知识：</p><blockquote><p><a href="http://www.google.com/design/spec/material-design/introduction.html#">Material Design Specifications</a><br><a href="http://developer.android.com/intl/zh-tw/training/material/index.html">Creating Apps with Material Design</a></p></blockquote><p>本文资源链接：</p><blockquote><p>源码下载：<a href="http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6/2mkT0heOlNOq4U82rzqbod/14yU2uk5TWY4Zp/AYx6oiD7SKI/EgtUapzQUqkqcWEXX1bmw==vqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo">点击获取</a><br>视频演示地址：<a href="https://youtu.be/jDXX_wDvarM">Yutube</a></p></blockquote><a id="more"></a><h2 id="1-下载Android-Studio"><a href="#1-下载Android-Studio" class="headerlink" title="1. 下载Android Studio"></a>1. 下载Android Studio</h2><p>在进一步了解之前,下载Android Studio并且进行必须的设置，因为之后我将使用Android Studio做教程讲解。如果你是第一次尝试Android Studio，通过<a href="http://developer.android.com/intl/zh-tw/tools/studio/index.html">概述文档</a>了一下Android Studio。</p><h2 id="2-Material-Design颜色自定义"><a href="#2-Material-Design颜色自定义" class="headerlink" title="2. Material Design颜色自定义"></a>2. Material Design颜色自定义</h2><p>Material Design提供了一些其颜色主题的自定义属性，但是我们使用主要的五种，来自定义整个主题：</p><ul><li><p><code>colorPrimaryDark</code> – 应用于通知栏的背景色</p></li><li><p><code>colorPrimary</code> – 这是应用最主要的颜色，应用于toolbar的背景色</p></li><li><p><code>textColorPrimary</code> – 这是文字的颜色，应用于toolbar的标题</p></li><li><p><code>windowBackground</code> – 这是应用默认的背景色</p></li><li><p><code>navigationBarColor</code> – 这个颜色定义了底部导航按钮的背景色</p></li></ul><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-color-schema.png" alt="android-material-design-color-schema"></p><p>你可以通过Material Design颜色模型，去选择适合你应用的一套颜色</p><h2 id="3-创建-Material-Design-主题"><a href="#3-创建-Material-Design-主题" class="headerlink" title="3. 创建 Material Design 主题"></a>3. 创建 Material Design 主题</h2><p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project`**并且填写其他需要的选项，来创建一个新的工程，当被提示选择默认的Activity时，选择</strong>Blank Activity**即可</p><p><strong>2.</strong> 打开<strong>res ⇒ values ⇒ strings.xml</strong>并且添加以下文字：</p><p><code>strings.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;string name=&quot;app_name&quot;&gt;Material Design&lt;/string&gt;    &lt;string name=&quot;action_settings&quot;&gt;Settings&lt;/string&gt;    &lt;string name=&quot;action_search&quot;&gt;Search&lt;/string&gt;    &lt;string name=&quot;drawer_open&quot;&gt;Open&lt;/string&gt;    &lt;string name=&quot;drawer_close&quot;&gt;Close&lt;/string&gt;    &lt;string name=&quot;nav_item_home&quot;&gt;Home&lt;/string&gt;    &lt;string name=&quot;nav_item_friends&quot;&gt;Friends&lt;/string&gt;    &lt;string name=&quot;nav_item_notifications&quot;&gt;Messages&lt;/string&gt;    &lt;!-- navigation drawer item labels  --&gt;    &lt;string-array name=&quot;nav_drawer_labels&quot;&gt;        &lt;item&gt;@string/nav_item_home&lt;/item&gt;        &lt;item&gt;@string/nav_item_friends&lt;/item&gt;        &lt;item&gt;@string/nav_item_notifications&lt;/item&gt;    &lt;/string-array&gt;    &lt;string name=&quot;title_messages&quot;&gt;Messages&lt;/string&gt;    &lt;string name=&quot;title_friends&quot;&gt;Friends&lt;/string&gt;    &lt;string name=&quot;title_home&quot;&gt;Home&lt;/string&gt;&lt;/resources&gt;</code></pre><p><strong>3.</strong> 打开<strong>res ⇒ values ⇒ colors.xml</strong>并且添加以下颜色值，如果你没有找到<code>colors.xml</code>，就新建一个文件即可</p><p><code>colors.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;color name=&quot;colorPrimary&quot;&gt;#F50057&lt;/color&gt;    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#C51162&lt;/color&gt;    &lt;color name=&quot;textColorPrimary&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;color name=&quot;windowBackground&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;color name=&quot;navigationBarColor&quot;&gt;#000000&lt;/color&gt;    &lt;color name=&quot;colorAccent&quot;&gt;#FF80AB&lt;/color&gt;&lt;/resources&gt;</code></pre><p><strong>4.</strong> 打开<strong>res ⇒ values ⇒ dimens.xml</strong>并添加以下尺寸值</p><p><code>dimens.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;!-- Default screen margins, per the Android Design guidelines. --&gt;    &lt;dimen name=&quot;activity_horizontal_margin&quot;&gt;16dp&lt;/dimen&gt;    &lt;dimen name=&quot;activity_vertical_margin&quot;&gt;16dp&lt;/dimen&gt;    &lt;dimen name=&quot;nav_drawer_width&quot;&gt;260dp&lt;/dimen&gt;&lt;/resources&gt;</code></pre><p><strong>5.</strong> 打开<strong>res ⇒ values ⇒ styles.xml</strong>并添加以下样式。这些样式适用于所有的安卓版本，这里我定义主题的名字为：<strong>MyMaterialTheme</strong></p><p><code>styles.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;style name=&quot;MyMaterialTheme&quot; parent=&quot;MyMaterialTheme.Base&quot;&gt;    &lt;/style&gt;    &lt;style name=&quot;MyMaterialTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;    &lt;/style&gt;&lt;/resources&gt;</code></pre><p><strong>6.</strong> 在<strong>res</strong>下新建一个文件夹：<strong>values-v21</strong>，在这下面新建另外一个<strong>styles.xml</strong>天下一下样式，这些延时只适用于<strong>Android Lollipop</strong>版本</p><p><code>styles.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;style name=&quot;MyMaterialTheme&quot; parent=&quot;MyMaterialTheme.Base&quot;&gt;        &lt;item name=&quot;android:windowContentTransitions&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowAllowEnterTransitionOverlap&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowAllowReturnTransitionOverlap&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowSharedElementEnterTransition&quot;&gt;@android:transition/move&lt;/item&gt;        &lt;item name=&quot;android:windowSharedElementExitTransition&quot;&gt;@android:transition/move&lt;/item&gt;    &lt;/style&gt;&lt;/resources&gt;</code></pre><p><strong>7.</strong> 现在我们已经准备好了基本的Material Design样式，为了应用这个主题，打开<strong>AndroidManifest.xml</strong>并通过<application>标签下的<strong>android:theme attribute of</strong>属性为应用设置该主题</p><p><code>android:theme=&quot;@style/MyMaterialTheme&quot;</code></p><p>在设置了该主题之后，你的<strong>AndroidManifest.xml</strong>应该是下面的样子：</p><p><code>AndroidManifest.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    package=&quot;info.androidhive.materialdesign&quot; &gt;    &lt;application        android:allowBackup=&quot;true&quot;        android:icon=&quot;@mipmap/ic_launcher&quot;        android:label=&quot;@string/app_name&quot;        android:theme=&quot;@style/MyMaterialTheme&quot; &gt;        &lt;activity            android:name=&quot;.activity.MainActivity&quot;            android:label=&quot;@string/app_name&quot; &gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>现在运行你的应用，你可以看到通知栏的颜色已经是我们设置的样式的颜色了。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-notification-bar.png" alt="android-material-design-notification-bar"></p><p><strong>3.1</strong> 添加Toolbar(Action Bar)</p><p>添加toolbar是非常容易的，你需要做的就是，为toolbar创建一个单独的layout，在其他layout中需要显示的地方使用。</p><p><strong>8.</strong> 新建一个xml文件<strong>res ⇒ layout ⇒ toolbar.xml</strong>并添加<code>android.support.v7.widget.Toolbar</code>控件，这个toolbar具有特定的宽度和主题</p><p><code>toolbar.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;android.support.v7.widget.Toolbar xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:local=&quot;http://schemas.android.com/apk/res-auto&quot;    android:id=&quot;@+id/toolbar&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    android:minHeight=&quot;?attr/actionBarSize&quot;    android:background=&quot;?attr/colorPrimary&quot;    local:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;    local:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;</code></pre><p><strong>9.</strong> 打开主Activity的布局文件(activity_main.xml)，并通过<code>&lt;include/&gt;</code>来添加对toolbar的使用</p><p><code>activity_main.xml</code></p><pre><code class="xml">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    tools:context=&quot;.MainActivity&quot;&gt;    &lt;LinearLayout        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_alignParentTop=&quot;true&quot;        android:orientation=&quot;vertical&quot;&gt;        &lt;include            android:id=&quot;@+id/toolbar&quot;            layout=&quot;@layout/toolbar&quot; /&gt;    &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt;</code></pre><p>运行这个应用，并且看看toolbar是不是显示在屏幕上</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar1.png" alt="android-material-design-toolbar"></p><p>现在让我们试着给toolbar添加标题和交互</p><p><strong>10.</strong> 下载这个<a href="http://api.androidhive.info/images/ic_action_search.png">搜索图标</a>，在Android Studio中通过Image Asset来引用它</p><p><strong>11.</strong> 右键<strong>res ⇒ New ⇒ Image Asset</strong>，会显示一个弹窗来引入资源，找到你下载的搜索图标，Asset Type选择<strong>Action Bar and Tab Icons</strong>，并命名为<strong>ic_search_action</strong></p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-studio-importing-image-asset.png" alt="android-studio-importing-image-asset"></p><p><strong>12.</strong> 图标导入完成之后，打开<strong>res ⇒ menu ⇒ menu_main.xml</strong>并且添加下面的搜索菜单：</p><p><code>menu_main.xml</code></p><pre><code class="xml">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    tools:context=&quot;.MainActivity&quot;&gt;    &lt;item        android:id=&quot;@+id/action_search&quot;        android:title=&quot;@string/action_search&quot;        android:orderInCategory=&quot;100&quot;        android:icon=&quot;@drawable/ic_action_search&quot;        app:showAsAction=&quot;ifRoom&quot; /&gt;    &lt;item        android:id=&quot;@+id/action_settings&quot;        android:title=&quot;@string/action_settings&quot;        android:orderInCategory=&quot;100&quot;        app:showAsAction=&quot;never&quot; /&gt;&lt;/menu&gt;</code></pre><p><strong>13.</strong> 现在打开<strong>MainActivity.java</strong>并且做如下修改：</p><ul><li><p>1.继承的activity是<strong>AppCompatActivity</strong></p></li><li><p>2.调用<code>setSupportActionBar()</code>并传递toolbar对象，以设置toolbar为可用状态</p></li><li><ol start="3"><li>复写<strong>onCreateOptionsMenu()**和</strong>onOptionsItemSelected()**方法来设置toolbar的交互行为</li></ol></li></ul><p><code>MainActivity.java</code></p><pre><code class="java">import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;public class MainActivity extends AppCompatActivity &#123;    private Toolbar mToolbar;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mToolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(mToolbar);        getSupportActionBar().setDisplayShowHomeEnabled(true);    &#125;    @Override    public boolean onCreateOptionsMenu(Menu menu) &#123;        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    &#125;    @Override    public boolean onOptionsItemSelected(MenuItem item) &#123;        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) &#123;            return true;        &#125;        return super.onOptionsItemSelected(item);    &#125;&#125;</code></pre><p>在做了以上修改之后，如果你运行应用，你应该能够在toolbar中看到搜索图标和更多菜单选项了</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar-action-items.png" alt="android-material-design-toolbar-action-items"></p><p><strong>3.2</strong> 添加导航抽屉</p><p>添加导航抽屉，同样是按照之前lollipop的方式，但是如果菜单项使用列表视图，在Material design中要使用<strong>RecyclerView</strong>。因此让我们看看怎样实现<strong>RecyclerView</strong>导航抽屉。</p><p><strong>14.</strong> 在你项目的java文件夹中，新建三个包：_activity_、_adapter_、_model_，并且把_MainActivity.java_移动到_activity_包下，这样来保证项目的条理性</p><p><strong>15.</strong> 打开model下的<strong>build.gradle</strong>，添加下面的依赖，然后执行<strong>Build ⇒ Rebuild Project</strong>来下载必须的库</p><p><code>build.gradle</code></p><pre><code class="xml">dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:22.2.0&#39;    compile &#39;com.android.support:recyclerview-v7:22.2.+&#39;&#125;</code></pre><p><strong>16.</strong> 在_model_包下，新建一个class文件，命名为<strong>NavDrawerItem.java</strong>，添加以下代码，这个class是一个实体类，它定义了导航抽屉里每一行的菜单项</p><p><code>NavDrawerItem.java</code></p><pre><code class="java">package info.androidhive.materialdesign.model;/** * Created by Ravi on 29/07/15. */public class NavDrawerItem &#123;    private boolean showNotify;    private String title;    public NavDrawerItem() &#123;    &#125;    public NavDrawerItem(boolean showNotify, String title) &#123;        this.showNotify = showNotify;        this.title = title;    &#125;    public boolean isShowNotify() &#123;        return showNotify;    &#125;    public void setShowNotify(boolean showNotify) &#123;        this.showNotify = showNotify;    &#125;    public String getTitle() &#123;        return title;    &#125;    public void setTitle(String title) &#123;        this.title = title;    &#125;&#125;</code></pre><p><strong>17.</strong> 在<strong>res ⇒ layout</strong>之下，新建一个布局文件，叫做<strong>nav_draw_row.xml</strong>添加以下代码。这个layout渲染的导航抽屉每一行的视图，如果你想要自定义导航抽屉菜单项，你应该修改这个文件，现在只有一个TextView</p><p><code>nav_drawer_row.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    android:clickable=&quot;true&quot;&gt;    &lt;TextView        android:id=&quot;@+id/title&quot;        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:paddingLeft=&quot;30dp&quot;        android:paddingTop=&quot;10dp&quot;        android:paddingBottom=&quot;10dp&quot;        android:textSize=&quot;15dp&quot;        android:textStyle=&quot;bold&quot; /&gt;&lt;/RelativeLayout&gt;</code></pre><p><strong>18.</strong> 下载这个<a href="http://api.androidhive.info/images/ic_profile.png">个人信息</a>的图标，并把它粘贴到<em>drawable</em> 文件夹下，这一步是可选的，但是这个图标在导航抽屉的header中有使用到</p><p><strong>19.</strong> 新建一个layout命名<strong>fragment_navigation_drawer.xml</strong>，并且添加以下代码。这个layout呈现了整个导航抽屉的视图，它包含了头部部分，用于展示用户信息、RecyclerView来展示列表视图</p><p><code>fragment_navigation_drawer.xml</code></p><pre><code class="xml">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:background=&quot;@android:color/white&quot;&gt;    &lt;RelativeLayout        android:id=&quot;@+id/nav_header_container&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;140dp&quot;        android:layout_alignParentTop=&quot;true&quot;        android:background=&quot;@color/colorPrimary&quot;&gt;        &lt;ImageView            android:layout_width=&quot;70dp&quot;            android:layout_height=&quot;70dp&quot;            android:src=&quot;@drawable/ic_profile&quot;            android:scaleType=&quot;fitCenter&quot;            android:layout_centerInParent=&quot;true&quot; /&gt;    &lt;/RelativeLayout&gt;    &lt;android.support.v7.widget.RecyclerView        android:id=&quot;@+id/drawerList&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_below=&quot;@id/nav_header_container&quot;        android:layout_marginTop=&quot;15dp&quot; /&gt;&lt;/RelativeLayout&gt;</code></pre><p><strong>20.</strong> 因为<strong>RecyclerView</strong>是自定义的，我们需要一个adapter类去渲染自定义xml布局，因此，在adapter包下，创建一个适配器类<strong>NavigationDrawerAdapter.java</strong>，然后粘贴下面的代码。这个适配器类适配nav_drawer_row.xml布局并呈现RecycleView抽屉菜单</p><pre><code class="java">import android.content.Context;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import java.util.Collections;import java.util.List;/** * Created by Ravi Tamada on 12-03-2015. */public class NavigationDrawerAdapter extends RecyclerView.Adapter&lt;NavigationDrawerAdapter.MyViewHolder&gt; &#123;    List&lt;NavDrawerItem&gt; data = Collections.emptyList();    private LayoutInflater inflater;    private Context context;    public NavigationDrawerAdapter(Context context, List&lt;NavDrawerItem&gt; data) &#123;        this.context = context;        inflater = LayoutInflater.from(context);        this.data = data;    &#125;    public void delete(int position) &#123;        data.remove(position);        notifyItemRemoved(position);    &#125;    @Override    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;        View view = inflater.inflate(R.layout.nav_drawer_row, parent, false);        MyViewHolder holder = new MyViewHolder(view);        return holder;    &#125;    @Override    public void onBindViewHolder(MyViewHolder holder, int position) &#123;        NavDrawerItem current = data.get(position);        holder.title.setText(current.getTitle());    &#125;    @Override    public int getItemCount() &#123;        return data.size();    &#125;    class MyViewHolder extends RecyclerView.ViewHolder &#123;        TextView title;        public MyViewHolder(View itemView) &#123;            super(itemView);            title = (TextView) itemView.findViewById(R.id.title);        &#125;    &#125;&#125;</code></pre><p><strong>21.</strong> 在activity包下，新建一个fragment叫做<strong>FragmentDrawer.java</strong>。在Android Studio中，新建fragment：_右键activity ⇒ New ⇒ Fragment ⇒ Fragment (Blank)_，并且给出你的fragment的名称</p><p><code>FragmentDrawer.java</code></p><pre><code class="java">/** * Created by Ravi on 29/07/15. */import android.content.Context;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.view.GestureDetector;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import java.util.ArrayList;import java.util.List;import info.androidhive.materialdesign.R;import info.androidhive.materialdesign.adapter.NavigationDrawerAdapter;import info.androidhive.materialdesign.model.NavDrawerItem;public class FragmentDrawer extends Fragment &#123;    private static String TAG = FragmentDrawer.class.getSimpleName();    private RecyclerView recyclerView;    private ActionBarDrawerToggle mDrawerToggle;    private DrawerLayout mDrawerLayout;    private NavigationDrawerAdapter adapter;    private View containerView;    private static String[] titles = null;    private FragmentDrawerListener drawerListener;    public FragmentDrawer() &#123;    &#125;    public void setDrawerListener(FragmentDrawerListener listener) &#123;        this.drawerListener = listener;    &#125;    public static List&lt;NavDrawerItem&gt; getData() &#123;        List&lt;NavDrawerItem&gt; data = new ArrayList&lt;&gt;();        // preparing navigation drawer items        for (int i = 0; i &lt; titles.length; i++) &#123;            NavDrawerItem navItem = new NavDrawerItem();            navItem.setTitle(titles[i]);            data.add(navItem);        &#125;        return data;    &#125;    @Override    public void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        // drawer labels        titles = getActivity().getResources().getStringArray(R.array.nav_drawer_labels);    &#125;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) &#123;        // Inflating view layout        View layout = inflater.inflate(R.layout.fragment_navigation_drawer, container, false);        recyclerView = (RecyclerView) layout.findViewById(R.id.drawerList);        adapter = new NavigationDrawerAdapter(getActivity(), getData());        recyclerView.setAdapter(adapter);        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        recyclerView.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), recyclerView, new ClickListener() &#123;            @Override            public void onClick(View view, int position) &#123;                drawerListener.onDrawerItemSelected(view, position);                mDrawerLayout.closeDrawer(containerView);            &#125;            @Override            public void onLongClick(View view, int position) &#123;            &#125;        &#125;));        return layout;    &#125;    public void setUp(int fragmentId, DrawerLayout drawerLayout, final Toolbar toolbar) &#123;        containerView = getActivity().findViewById(fragmentId);        mDrawerLayout = drawerLayout;        mDrawerToggle = new ActionBarDrawerToggle(getActivity(), drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) &#123;            @Override            public void onDrawerOpened(View drawerView) &#123;                super.onDrawerOpened(drawerView);                getActivity().invalidateOptionsMenu();            &#125;            @Override            public void onDrawerClosed(View drawerView) &#123;                super.onDrawerClosed(drawerView);                getActivity().invalidateOptionsMenu();            &#125;            @Override            public void onDrawerSlide(View drawerView, float slideOffset) &#123;                super.onDrawerSlide(drawerView, slideOffset);                toolbar.setAlpha(1 - slideOffset / 2);            &#125;        &#125;;        mDrawerLayout.setDrawerListener(mDrawerToggle);        mDrawerLayout.post(new Runnable() &#123;            @Override            public void run() &#123;                mDrawerToggle.syncState();            &#125;        &#125;);    &#125;    public static interface ClickListener &#123;        public void onClick(View view, int position);        public void onLongClick(View view, int position);    &#125;    static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener &#123;        private GestureDetector gestureDetector;        private ClickListener clickListener;        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) &#123;            this.clickListener = clickListener;            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() &#123;                @Override                public boolean onSingleTapUp(MotionEvent e) &#123;                    return true;                &#125;                @Override                public void onLongPress(MotionEvent e) &#123;                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());                    if (child != null &amp;&amp; clickListener != null) &#123;                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));                    &#125;                &#125;            &#125;);        &#125;        @Override        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) &#123;            View child = rv.findChildViewUnder(e.getX(), e.getY());            if (child != null &amp;&amp; clickListener != null &amp;&amp; gestureDetector.onTouchEvent(e)) &#123;                clickListener.onClick(child, rv.getChildPosition(child));            &#125;            return false;        &#125;        @Override        public void onTouchEvent(RecyclerView rv, MotionEvent e) &#123;        &#125;        @Override        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) &#123;        &#125;    &#125;    public interface FragmentDrawerListener &#123;        public void onDrawerItemSelected(View view, int position);    &#125;&#125;</code></pre><p><strong>22.</strong> 最后，打开首页activity的布局文件<strong>activity_main.xml</strong>，按照下面这样修改。在这个布局中，我们添加了<strong>android.support.v4.widget.DrawerLayout</strong>，来显示导航抽屉菜单</p><p>你也必须写出你的fragment下<strong>FragmentDrawer</strong>的正确路径</p><p><code>actiivty_main.xml</code></p><pre><code class="java">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:id=&quot;@+id/drawer_layout&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;    &lt;LinearLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot;        android:orientation=&quot;vertical&quot;&gt;        &lt;LinearLayout            android:id=&quot;@+id/container_toolbar&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:orientation=&quot;vertical&quot;&gt;            &lt;include                android:id=&quot;@+id/toolbar&quot;                layout=&quot;@layout/toolbar&quot; /&gt;        &lt;/LinearLayout&gt;        &lt;FrameLayout            android:id=&quot;@+id/container_body&quot;            android:layout_width=&quot;fill_parent&quot;            android:layout_height=&quot;0dp&quot;            android:layout_weight=&quot;1&quot; /&gt;    &lt;/LinearLayout&gt;    &lt;fragment        android:id=&quot;@+id/fragment_navigation_drawer&quot;        android:name=&quot;info.androidhive.materialdesign.activity.FragmentDrawer&quot;        android:layout_width=&quot;@dimen/nav_drawer_width&quot;        android:layout_height=&quot;match_parent&quot;        android:layout_gravity=&quot;start&quot;        app:layout=&quot;@layout/fragment_navigation_drawer&quot;        tools:layout=&quot;@layout/fragment_navigation_drawer&quot; /&gt;&lt;/android.support.v4.widget.DrawerLayout&gt;</code></pre><p>现在，我们已经准备好所有的layout和class，让我们在<strong>MainActivity</strong>中做一些必要的修改，使得导航抽屉可以正常运行</p><p><strong>23.</strong> 打开<strong>MainActivity.java</strong>并且做如下修改</p><ul><li><p>activity需要实现FragmentDrawer.FragmentDrawerListener<strong>并且复写</strong>onDrawerItemSelected()**方法</p></li><li><p>创建一个**FragmentDrawer的实例，并设置这个菜单选择的监听器</p></li></ul><p><code>MainActivity.java</code></p><pre><code class="java">import android.support.v4.widget.DrawerLayout;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;public class MainActivity extends AppCompatActivity implements FragmentDrawer.FragmentDrawerListener &#123;    private Toolbar mToolbar;    private FragmentDrawer drawerFragment;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mToolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(mToolbar);        getSupportActionBar().setDisplayShowHomeEnabled(true);        drawerFragment = (FragmentDrawer)                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);        drawerFragment.setDrawerListener(this);    &#125;    @Override    public boolean onCreateOptionsMenu(Menu menu) &#123;        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    &#125;    @Override    public boolean onOptionsItemSelected(MenuItem item) &#123;        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) &#123;            return true;        &#125;        return super.onOptionsItemSelected(item);    &#125;    @Override    public void onDrawerItemSelected(View view, int position) &#123;    &#125;&#125;</code></pre><p>现在，如果你运行这个应用，你能够看到这个导航抽屉，包含一个header和列表</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/androd-material-design-navigation-drawer.png" alt="androd-material-design-navigation-drawer"></p><p>androd-material-design-navigation-drawer</p><p><strong>3.3</strong> 实现导航抽屉的选择事件<br>尽管导航抽屉成功运行了，但是你看到菜单的点击事件没有正常运行，这是因为我们也需要实现RecyclerView的click监听事件</p><p>因为我们有三个菜单项（Home, Friends &amp; Messages）在导航抽屉中，因此我们需要创建三个独立的fragment类为每一个菜单</p><p><strong>24.</strong> 在res下面，新建一个xml文件叫做<strong>fragment_home.xml</strong>并添加以下代码</p><p><code>fragment_home.xml</code></p><pre><code class="xml">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    tools:context=&quot;info.androidhive.materialdesign.activity.HomeFragment&quot;&gt;    &lt;TextView        android:id=&quot;@+id/label&quot;        android:layout_alignParentTop=&quot;true&quot;        android:layout_marginTop=&quot;100dp&quot;        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:gravity=&quot;center_horizontal&quot;        android:textSize=&quot;45dp&quot;        android:text=&quot;HOME&quot;        android:textStyle=&quot;bold&quot;/&gt;    &lt;TextView        android:layout_below=&quot;@id/label&quot;        android:layout_centerInParent=&quot;true&quot;        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:textSize=&quot;12dp&quot;        android:layout_marginTop=&quot;10dp&quot;        android:gravity=&quot;center_horizontal&quot;        android:text=&quot;Edit fragment_home.xml to change the appearance&quot; /&gt;&lt;/RelativeLayout&gt;</code></pre><p><strong>25.</strong> 在activity包下，新建一个fragment类，叫做<strong>HomeFragment.java</strong>并且添加以下代码</p><p><code>HomeFragment.java</code></p><pre><code class="java">import android.app.Activity;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class HomeFragment extends Fragment &#123;    public HomeFragment() &#123;        // Required empty public constructor    &#125;    @Override    public void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);    &#125;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) &#123;        View rootView = inflater.inflate(R.layout.fragment_home, container, false);        // Inflate the layout for this fragment        return rootView;    &#125;    @Override    public void onAttach(Activity activity) &#123;        super.onAttach(activity);    &#125;    @Override    public void onDetach() &#123;        super.onDetach();    &#125;&#125;</code></pre><p><strong>26.</strong> 新建两个fragment类分别叫做：<strong>FriendsFragment.java</strong>、<strong>MessagesFragment.java</strong>，同样新建两个xml：<strong>fragment_friends.xml</strong>、<strong>fragment_messages.xml</strong>，按照上面步骤添加代码</p><p><strong>27.</strong> 现在打开<strong>MainActivity.java</strong>，做以下修改</p><ul><li>_displayView()_方法显示fragment，这个方法在**onDrawerItemSelected()**中被调用，当菜单被选择的时候，来渲染对应的布局</li></ul><p><code>MainActivity.java</code></p><pre><code class="java">import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarActivity;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Toast;public class MainActivity extends ActionBarActivity implements FragmentDrawer.FragmentDrawerListener &#123;    private static String TAG = MainActivity.class.getSimpleName();    private Toolbar mToolbar;    private FragmentDrawer drawerFragment;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        mToolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(mToolbar);        getSupportActionBar().setDisplayShowHomeEnabled(true);        drawerFragment = (FragmentDrawer)                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);        drawerFragment.setDrawerListener(this);        // display the first navigation drawer view on app launch        displayView(0);    &#125;    @Override    public boolean onCreateOptionsMenu(Menu menu) &#123;        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    &#125;    @Override    public boolean onOptionsItemSelected(MenuItem item) &#123;        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) &#123;            return true;        &#125;        if(id == R.id.action_search)&#123;            Toast.makeText(getApplicationContext(), &quot;Search action is selected!&quot;, Toast.LENGTH_SHORT).show();            return true;        &#125;        return super.onOptionsItemSelected(item);    &#125;    @Override    public void onDrawerItemSelected(View view, int position) &#123;            displayView(position);    &#125;    private void displayView(int position) &#123;        Fragment fragment = null;        String title = getString(R.string.app_name);        switch (position) &#123;            case 0:                fragment = new HomeFragment();                title = getString(R.string.title_home);                break;            case 1:                fragment = new FriendsFragment();                title = getString(R.string.title_friends);                break;            case 2:                fragment = new MessagesFragment();                title = getString(R.string.title_messages);                break;            default:                break;        &#125;        if (fragment != null) &#123;            FragmentManager fragmentManager = getSupportFragmentManager();            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();            fragmentTransaction.replace(R.id.container_body, fragment);            fragmentTransaction.commit();            // set the toolbar title            getSupportActionBar().setTitle(title);        &#125;    &#125;&#125;</code></pre><p>现在再来运行你的应用，你能够看到导航抽屉菜单的选择事件可以正常实现，并且对应的布局显示在toolbar下面</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-1.png" alt="android-material-design-navigation-drawer-1"></p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-2.png" alt="android-material-design-navigation-drawer-2"></p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-3.png" alt="android-material-design-navigation-drawer-3"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：Ravi Tamada&lt;br&gt;原文地址：&lt;a href=&quot;http://www.androidhive.info/2015/04/android-getting-started-with-material-design/&quot;&gt;http://www.androidhive.info/…with-material-design/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。&lt;/p&gt;
&lt;p&gt;在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。&lt;/p&gt;
&lt;p&gt;通过下面的链接获取更多的关于Material Design的知识：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html#&quot;&gt;Material Design Specifications&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/intl/zh-tw/training/material/index.html&quot;&gt;Creating Apps with Material Design&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文资源链接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;源码下载：&lt;a href=&quot;http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6/2mkT0heOlNOq4U82rzqbod/14yU2uk5TWY4Zp/AYx6oiD7SKI/EgtUapzQUqkqcWEXX1bmw==vqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo&quot;&gt;点击获取&lt;/a&gt;&lt;br&gt;视频演示地址：&lt;a href=&quot;https://youtu.be/jDXX_wDvarM&quot;&gt;Yutube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Material Design" scheme="https://goghtsui.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Android Material Design - Floating Labels for EditText</title>
    <link href="https://goghtsui.github.io/2015/12/30/Android-Material-Design-Floating-Labels-for-EditText/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/30/Android-Material-Design-Floating-Labels-for-EditText/undefined/</id>
    <published>2015-12-30T02:42:59.000Z</published>
    <updated>2021-01-26T02:34:57.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文作者：Ravi Tamada<br>原文地址：<a href="http://www.androidhive.info/2015/04/android-getting-started-with-material-design/">http://www.androidhive.info/…aterial-design/</a></p></blockquote><p>Android浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。</p><p>这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。</p><p>源码下载地址：<a href="http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p/xpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB/W6QlimXGOiu8gWcH1pqtQKfO5AfA==V7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w">http://download.androidhive.info/…dfyJJ0xyaJTvXugo0HTV0LBnG9w</a><br>视频演示地址：<a href="https://youtu.be/TYhpFJ58g6Y">yutube-display</a></p><h3 id="TextInputLayout"><a href="#TextInputLayout" class="headerlink" title="TextInputLayout"></a>TextInputLayout</h3><p>在Material Design支持库中一个新的元素，叫作<a href="https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html">TextInputLayout</a>，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout<br>所包裹。你也可以给EditText设置一个错误的信息，通过使用<code>setErrorEnabled()</code>和<code>setError()</code>方法。</p><p>TextInputLayout采用了EditText<strong>android:hint</strong>属性的值来作为悬浮标签显示。</p><a id="more"></a><pre><code class="xml">&lt;android.support.design.widget.TextInputLayoutandroid:id=&quot;@+id/input_layout_password&quot;android:layout_width=&quot;match_parent&quot;android:layout_height=&quot;wrap_content&quot;&gt;        &lt;EditText            android:id=&quot;@+id/input_password&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:hint=&quot;@string/hint_email&quot; /&gt;&lt;/android.support.design.widget.TextInputLayout&gt;</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-design-support-library-floating-labels.png" alt="android-design-support-library-floating-labels"></p><h3 id="简单的表单验证示例"><a href="#简单的表单验证示例" class="headerlink" title="简单的表单验证示例"></a>简单的表单验证示例</h3><p>现在让我们来创建一个简单的android应用，去真正的了解TextInputLayout的用法。这个应用包含了一个带有悬浮标签的简答表单，输入验证和错误信息启用。</p><p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project</strong>并填好其它信息来新建一个项目。</p><p><strong>2.</strong> 打开<strong>build.gradle</strong>并且添加Material Design支持库的依赖。</p><p><code>com.android.support:design:23.0.1</code></p><p><code>build.gradle</code></p><pre><code class="xml">dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;    compile &#39;com.android.support:design:23.0.1&#39;&#125;</code></pre><p><strong>3.</strong> 通过<a href="http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/">这里</a>提到的步骤，应用Material Design主题，但这不是必须的。</p><p><strong>4.</strong> 添加下面字符串到<strong>res ⇒ values =&gt; strings.xml</strong>下面。</p><p><code>strings.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;string name=&quot;app_name&quot;&gt;Floating Labels&lt;/string&gt;    &lt;string name=&quot;action_settings&quot;&gt;Settings&lt;/string&gt;    &lt;string name=&quot;hint_name&quot;&gt;Full Name&lt;/string&gt;    &lt;string name=&quot;hint_email&quot;&gt;Email&lt;/string&gt;    &lt;string name=&quot;hint_password&quot;&gt;Password&lt;/string&gt;    &lt;string name=&quot;btn_sign_up&quot;&gt;Sign Up&lt;/string&gt;    &lt;string name=&quot;err_msg_name&quot;&gt;Enter your full name&lt;/string&gt;    &lt;string name=&quot;err_msg_email&quot;&gt;Enter valid email address&lt;/string&gt;    &lt;string name=&quot;err_msg_password&quot;&gt;Enter the password&lt;/string&gt;&lt;/resources&gt;</code></pre><p><strong>5.</strong> 打开主activity的<strong>activity_main.xml</strong>布局文件，然后添加如下代码。这些代码创建了一个简单的表单，有三个输入框。这里你可以看到EditText被TextInputLayout所包裹。</p><p><code>activity_main.xml</code></p><pre><code class="xml">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;    &lt;android.support.design.widget.AppBarLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;        &lt;android.support.v7.widget.Toolbar            android:id=&quot;@+id/toolbar&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;?attr/actionBarSize&quot;            android:background=&quot;?attr/colorPrimary&quot;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;    &lt;/android.support.design.widget.AppBarLayout&gt;    &lt;LinearLayout        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;match_parent&quot;        android:layout_marginTop=&quot;?attr/actionBarSize&quot;        android:orientation=&quot;vertical&quot;        android:paddingLeft=&quot;20dp&quot;        android:paddingRight=&quot;20dp&quot;        android:paddingTop=&quot;60dp&quot;&gt;        &lt;android.support.design.widget.TextInputLayout            android:id=&quot;@+id/input_layout_name&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;&gt;            &lt;EditText                android:id=&quot;@+id/input_name&quot;                android:layout_width=&quot;match_parent&quot;                android:layout_height=&quot;wrap_content&quot;                android:singleLine=&quot;true&quot;                android:hint=&quot;@string/hint_name&quot; /&gt;        &lt;/android.support.design.widget.TextInputLayout&gt;        &lt;android.support.design.widget.TextInputLayout            android:id=&quot;@+id/input_layout_email&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;&gt;            &lt;EditText                android:id=&quot;@+id/input_email&quot;                android:layout_width=&quot;match_parent&quot;                android:layout_height=&quot;wrap_content&quot;                android:inputType=&quot;textEmailAddress&quot;                android:hint=&quot;@string/hint_email&quot; /&gt;        &lt;/android.support.design.widget.TextInputLayout&gt;        &lt;android.support.design.widget.TextInputLayout            android:id=&quot;@+id/input_layout_password&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;&gt;            &lt;EditText                android:id=&quot;@+id/input_password&quot;                android:layout_width=&quot;match_parent&quot;                android:layout_height=&quot;wrap_content&quot;                android:inputType=&quot;textPassword&quot;                android:hint=&quot;@string/hint_password&quot; /&gt;        &lt;/android.support.design.widget.TextInputLayout&gt;        &lt;Button android:id=&quot;@+id/btn_signup&quot;            android:layout_width=&quot;fill_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:text=&quot;@string/btn_sign_up&quot;            android:background=&quot;@color/colorPrimary&quot;            android:layout_marginTop=&quot;40dp&quot;            android:textColor=&quot;@android:color/white&quot;/&gt;    &lt;/LinearLayout&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre><p><strong>6.</strong> 打开<strong>MainActivity.java</strong>并且按照以下代码修改，这里我已经添加了一些方法去验证用户的输入数据比如名字、email、密码。我也. 我也指定了TextWatcher给所有的edittext来验证用户正在输入的内容，当输入无效或者为空时，setError()方法就会被调用来显示错误信息。</p><p><code>MainActivity.java</code></p><pre><code class="java">package info.androidhive.floatinglabels;import android.os.Bundle;import android.support.design.widget.TextInputLayout;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.View;import android.view.WindowManager;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity &#123;    private Toolbar toolbar;    private EditText inputName, inputEmail, inputPassword;    private TextInputLayout inputLayoutName, inputLayoutEmail, inputLayoutPassword;    private Button btnSignUp;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);        inputLayoutEmail = (TextInputLayout) findViewById(R.id.input_layout_email);        inputLayoutPassword = (TextInputLayout) findViewById(R.id.input_layout_password);        inputName = (EditText) findViewById(R.id.input_name);        inputEmail = (EditText) findViewById(R.id.input_email);        inputPassword = (EditText) findViewById(R.id.input_password);        btnSignUp = (Button) findViewById(R.id.btn_signup);        inputName.addTextChangedListener(new MyTextWatcher(inputName));        inputEmail.addTextChangedListener(new MyTextWatcher(inputEmail));        inputPassword.addTextChangedListener(new MyTextWatcher(inputPassword));        btnSignUp.setOnClickListener(new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;                submitForm();            &#125;        &#125;);    &#125;    /**     * Validating form     */    private void submitForm() &#123;        if (!validateName()) &#123;            return;        &#125;        if (!validateEmail()) &#123;            return;        &#125;        if (!validatePassword()) &#123;            return;        &#125;        Toast.makeText(getApplicationContext(), &quot;Thank You!&quot;, Toast.LENGTH_SHORT).show();    &#125;    private boolean validateName() &#123;        if (inputName.getText().toString().trim().isEmpty()) &#123;            inputLayoutName.setError(getString(R.string.err_msg_name));            requestFocus(inputName);            return false;        &#125; else &#123;            inputLayoutName.setErrorEnabled(false);        &#125;        return true;    &#125;    private boolean validateEmail() &#123;        String email = inputEmail.getText().toString().trim();        if (email.isEmpty() || !isValidEmail(email)) &#123;            inputLayoutEmail.setError(getString(R.string.err_msg_email));            requestFocus(inputEmail);            return false;        &#125; else &#123;            inputLayoutEmail.setErrorEnabled(false);        &#125;        return true;    &#125;    private boolean validatePassword() &#123;        if (inputPassword.getText().toString().trim().isEmpty()) &#123;            inputLayoutPassword.setError(getString(R.string.err_msg_password));            requestFocus(inputPassword);            return false;        &#125; else &#123;            inputLayoutPassword.setErrorEnabled(false);        &#125;        return true;    &#125;    private static boolean isValidEmail(String email) &#123;        return !TextUtils.isEmpty(email) &amp;&amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();    &#125;    private void requestFocus(View view) &#123;        if (view.requestFocus()) &#123;            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);        &#125;    &#125;    private class MyTextWatcher implements TextWatcher &#123;        private View view;        private MyTextWatcher(View view) &#123;            this.view = view;        &#125;        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) &#123;        &#125;        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) &#123;        &#125;        public void afterTextChanged(Editable editable) &#123;            switch (view.getId()) &#123;                case R.id.input_name:                    validateName();                    break;                case R.id.input_email:                    validateEmail();                    break;                case R.id.input_password:                    validatePassword();                    break;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels.png" alt="android-material-design-floating-labels"></p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels-error-messages.png" alt="android-material-design-floating-labels-error-messages"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文作者：Ravi Tamada&lt;br&gt;原文地址：&lt;a href=&quot;http://www.androidhive.info/2015/04/android-getting-started-with-material-design/&quot;&gt;http://www.androidhive.info/…aterial-design/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。&lt;/p&gt;
&lt;p&gt;这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。&lt;/p&gt;
&lt;p&gt;源码下载地址：&lt;a href=&quot;http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p/xpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB/W6QlimXGOiu8gWcH1pqtQKfO5AfA==V7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w&quot;&gt;http://download.androidhive.info/…dfyJJ0xyaJTvXugo0HTV0LBnG9w&lt;/a&gt;&lt;br&gt;视频演示地址：&lt;a href=&quot;https://youtu.be/TYhpFJ58g6Y&quot;&gt;yutube-display&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TextInputLayout&quot;&gt;&lt;a href=&quot;#TextInputLayout&quot; class=&quot;headerlink&quot; title=&quot;TextInputLayout&quot;&gt;&lt;/a&gt;TextInputLayout&lt;/h3&gt;&lt;p&gt;在Material Design支持库中一个新的元素，叫作&lt;a href=&quot;https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html&quot;&gt;TextInputLayout&lt;/a&gt;，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout&lt;br&gt;所包裹。你也可以给EditText设置一个错误的信息，通过使用&lt;code&gt;setErrorEnabled()&lt;/code&gt;和&lt;code&gt;setError()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;TextInputLayout采用了EditText&lt;strong&gt;android:hint&lt;/strong&gt;属性的值来作为悬浮标签显示。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Material Design" scheme="https://goghtsui.github.io/tags/Material-Design/"/>
    
    <category term="EditText" scheme="https://goghtsui.github.io/tags/EditText/"/>
    
    <category term="Floating Lables" scheme="https://goghtsui.github.io/tags/Floating-Lables/"/>
    
  </entry>
  
  <entry>
    <title>Android Material Design - Tabs</title>
    <link href="https://goghtsui.github.io/2015/12/28/Android-Material-Design-Tabs/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/28/Android-Material-Design-Tabs/undefined/</id>
    <published>2015-12-28T03:51:06.000Z</published>
    <updated>2021-01-26T02:34:57.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：Ravi Tamada<br>原文地址：<a href="http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/">http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/</a></p></blockquote><p><a href="http://android-developers.blogspot.in/2015/05/android-design-support-library.html">Android Design支持库</a> 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。</p><p>在进一步深入了解之前，我建议先看一下<a href="https://www.google.co.in/design/spec/components/tabs.html#">tabs的文档</a>，它可以告诉你在实现tabs的时候，什么该做什么不该做。</p><p>这里还有yutube的视频：<a href="https://youtu.be/6sGhDYYUoBM">到墙外看一看</a></p><h3 id="使用Material"><a href="#使用Material" class="headerlink" title="使用Material"></a>使用Material</h3><p>首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章<a href="http://www.androidhive.info/2015/04/android-getting-started-with-material-design/">Material Design入门</a></p><p><strong>1</strong>.在Android Studio中，<strong>File =&gt; New Project</strong>并且填好其它信息去创建一个新项目。</p><p><strong>2</strong>.打开<strong>build.gradle</strong>然后添加支持库<strong>com.android.support:design:23.0.1</strong></p><p><code>build.gradle</code></p><pre><code class="xml">dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;    compile &#39;com.android.support:design:23.0.1&#39;&#125;</code></pre><a id="more"></a><p><strong>3</strong>.打开位于<strong>res =&gt; values</strong>下的<strong>colors.xml</strong>，并且添加以下颜色值：</p><p><code>colors.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;color name=&quot;colorPrimary&quot;&gt;#125688&lt;/color&gt;    &lt;color name=&quot;colorPrimaryDark&quot;&gt;#125688&lt;/color&gt;    &lt;color name=&quot;textColorPrimary&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;color name=&quot;windowBackground&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;color name=&quot;navigationBarColor&quot;&gt;#000000&lt;/color&gt;    &lt;color name=&quot;colorAccent&quot;&gt;#c8e8ff&lt;/color&gt;&lt;/resources&gt;</code></pre><p><strong>4</strong>.在<strong>res =&gt; values</strong>下的<strong>dimens.xml</strong>添加以下代码：</p><p><code>dimens.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;!-- Default screen margins, per the Android Design guidelines. --&gt;    &lt;dimen name=&quot;activity_horizontal_margin&quot;&gt;16dp&lt;/dimen&gt;    &lt;dimen name=&quot;activity_vertical_margin&quot;&gt;16dp&lt;/dimen&gt;    &lt;dimen name=&quot;tab_max_width&quot;&gt;264dp&lt;/dimen&gt;    &lt;dimen name=&quot;tab_padding_bottom&quot;&gt;16dp&lt;/dimen&gt;    &lt;dimen name=&quot;tab_label&quot;&gt;14sp&lt;/dimen&gt;    &lt;dimen name=&quot;custom_tab_layout_height&quot;&gt;72dp&lt;/dimen&gt;&lt;/resources&gt;</code></pre><p><strong>5</strong>. 打开<strong>res ⇒ values</strong>下的<strong>styles.xml</strong>，并添加以下主题。在<strong>styles.xml</strong>中这个主题是通用于所有安卓版本的。</p><p><code>styles.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;style name=&quot;MyMaterialTheme&quot; parent=&quot;MyMaterialTheme.Base&quot;&gt;    &lt;/style&gt;    &lt;style name=&quot;MyMaterialTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;        &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;    &lt;/style&gt;&lt;/resources&gt;</code></pre><p><strong>6.</strong> 在<strong>res</strong>下面创建<strong>values-v21</strong>文件夹，然后创建另外一个<strong>styles.xml</strong>，写入以下主题，这个主题是适用于Android 5.0的。</p><p><code>styles.xml</code></p><pre><code class="xml">&lt;resources&gt;    &lt;style name=&quot;MyMaterialTheme&quot; parent=&quot;MyMaterialTheme.Base&quot;&gt;        &lt;item name=&quot;android:windowContentTransitions&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowAllowEnterTransitionOverlap&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowAllowReturnTransitionOverlap&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:windowSharedElementEnterTransition&quot;&gt;@android:transition/move&lt;/item&gt;        &lt;item name=&quot;android:windowSharedElementExitTransition&quot;&gt;@android:transition/move&lt;/item&gt;    &lt;/style&gt;&lt;/resources&gt;</code></pre><p><strong>7.</strong> 最后打开<strong>AndroidManifest.xml</strong>并且修改<strong>android:theme</strong>属性为我们自定义的主题。</p><p><code>AndroidManifest.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    package=&quot;info.androidhive.materialtabs&quot; &gt;    &lt;application        android:allowBackup=&quot;true&quot;        android:icon=&quot;@mipmap/ic_launcher&quot;        android:label=&quot;@string/app_name&quot;        android:theme=&quot;@style/MyMaterialTheme&quot; &gt;        &lt;activity            android:name=&quot;.activity.MainActivity&quot;            android:label=&quot;@string/app_name&quot; &gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>运行这个应用，通过通知栏的颜色来验证一下Material Design主题。如果你看到通知栏颜色改变了，这就意味着Material Design主题已经被成功使用。</p><p>图例</p><p>现在我们已经有了Material Design主题的应用，接下来让我们开始添加tabs。但是在这之前。我们需要创建一些fragment来协助测试，所有这些fragment只有非常简单的UI，一个TextView而已。</p><p><strong>8.</strong> 在你的包目录下，创建一个fragment，命名为<strong>OneFragment.java</strong>并添加以下代码：</p><p><code>OneFragment.java</code></p><pre><code class="java">package info.androidhive.materialtabs.fragments;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import info.androidhive.materialtabs.R;public class OneFragment extends Fragment&#123;    public OneFragment() &#123;        // Required empty public constructor    &#125;    @Override    public void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);    &#125;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) &#123;        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_one, container, false);    &#125;&#125;</code></pre><p><strong>9.</strong> 在<strong>res ⇒ layout</strong>下添加<strong>fragment_one.xml</strong>，写入以下代码：</p><p><code>fragment_one.xml</code></p><pre><code class="xml">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    tools:context=&quot;info.androidhive.materialtabs.fragments.OneFragment&quot;&gt;    &lt;TextView        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/one&quot;        android:textSize=&quot;40dp&quot;        android:textStyle=&quot;bold&quot;        android:layout_centerInParent=&quot;true&quot;/&gt;&lt;/RelativeLayout&gt;</code></pre><p><strong>10.</strong> 同样的，创建一些其它的fragment，并且写入像<strong>OneFragment.java</strong>一样的代码，我已经创建好了<strong>TwoFragment.java</strong>, <strong>ThreeFragment.java</strong>, <strong>FourFragemnt.java</strong>一直到<strong>TenFragment.java</strong></p><h3 id="固定标签"><a href="#固定标签" class="headerlink" title="固定标签"></a>固定标签</h3><p>当tabs是固定数目的时候，你可以使用这个方式。这些tabs固定在适当的位置。在design支持库中，一些新的元素像<strong>CoordinatorLayout</strong>、<strong>AppBarLayout</strong>、<strong>TabLayout</strong>等介绍了很多。我覆盖不到所有的情况，因为这不是本文的目的。</p><p><strong>11</strong>. 打开布局文件<strong>activity_main.xml</strong>并修改为一下代码：</p><p><code>app:tabMode</code> – 定义tab的形式，在这我们定义为<strong>fixed</strong></p><p><code>activity_main.xml</code></p><pre><code class="xml">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;    &lt;android.support.design.widget.AppBarLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;        &lt;android.support.v7.widget.Toolbar            android:id=&quot;@+id/toolbar&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;?attr/actionBarSize&quot;            android:background=&quot;?attr/colorPrimary&quot;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;        &lt;android.support.design.widget.TabLayout            android:id=&quot;@+id/tabs&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            app:tabMode=&quot;fixed&quot;            app:tabGravity=&quot;fill&quot;/&gt;    &lt;/android.support.design.widget.AppBarLayout&gt;    &lt;android.support.v4.view.ViewPager        android:id=&quot;@+id/viewpager&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;  /&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre><p><strong>12.</strong> 打开<strong>MainActivity.java</strong> 并作以下修改：</p><p><code>tabLayout.setupWithViewPager()</code> – 适配ViewPager给TabLayout</p><p><code>setupViewPager()</code> – 通过添加适当的fragment来设置tabs的数量和tab的名字</p><p><code>ViewPagerAdapter</code> – 自定义适配器类提供了ViewPager需要的额fragment</p><p><code>MainActivity.java</code></p><pre><code class="java">package info.androidhive.materialtabs.activity;import android.os.Bundle;import android.support.design.widget.TabLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import java.util.ArrayList;import java.util.List;import info.androidhive.materialtabs.R;import info.androidhive.materialtabs.fragments.OneFragment;import info.androidhive.materialtabs.fragments.ThreeFragment;import info.androidhive.materialtabs.fragments.TwoFragment;public class MainActivity extends AppCompatActivity &#123;    private Toolbar toolbar;    private TabLayout tabLayout;    private ViewPager viewPager;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        viewPager = (ViewPager) findViewById(R.id.viewpager);        setupViewPager(viewPager);        tabLayout = (TabLayout) findViewById(R.id.tabs);        tabLayout.setupWithViewPager(viewPager);    &#125;    private void setupViewPager(ViewPager viewPager) &#123;        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());        adapter.addFragment(new OneFragment(), &quot;ONE&quot;);        adapter.addFragment(new TwoFragment(), &quot;TWO&quot;);        adapter.addFragment(new ThreeFragment(), &quot;THREE&quot;);        viewPager.setAdapter(adapter);    &#125;    class ViewPagerAdapter extends FragmentPagerAdapter &#123;        private final List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;();        private final List&lt;String&gt; mFragmentTitleList = new ArrayList&lt;&gt;();        public ViewPagerAdapter(FragmentManager manager) &#123;            super(manager);        &#125;        @Override        public Fragment getItem(int position) &#123;            return mFragmentList.get(position);        &#125;        @Override        public int getCount() &#123;            return mFragmentList.size();        &#125;        public void addFragment(Fragment fragment, String title) &#123;            mFragmentList.add(fragment);            mFragmentTitleList.add(title);        &#125;        @Override        public CharSequence getPageTitle(int position) &#123;            return mFragmentTitleList.get(position);        &#125;    &#125;&#125;</code></pre><p>现在运行这个应用，你应该能看到tabs已经显示，并且能够通过滑动在他们之间切换。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-tab-layout.png" alt="swipe"></p><p><strong>2.1</strong> 屏幕宽度的标签<br>如果你想要标签栏占据整个屏幕的宽度，你需要给TabLayout设置 **app:tabGravity=”fill”**属性。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-landscape-view.png" alt="full"></p><p><strong>2.2</strong> 中心对齐的标签<br>如果你想要你的标签按照水平居中的形式来显示，你需要给TabLayout设置**app:tabGravity=”center”**的属性。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-gravity-center.png" alt="full"></p><h3 id="滚动标签"><a href="#滚动标签" class="headerlink" title="滚动标签"></a>滚动标签</h3><p>当你有很多标签时，并且一个屏幕的空间放不下的时候，你可以使用滑动标签。标签可以滚动，给TabLayout设置**app:tabMode=”scrollable”**即可。</p><p><strong>13.</strong> 打开<strong>activity_main.xml</strong>并且修改<strong>app:tabMode</strong>为<strong>scrollable</strong>。</p><pre><code class="xml">&lt;android.support.design.widget.TabLayout            android:id=&quot;@+id/tabs&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            app:tabMode=&quot;scrollable&quot;/&gt;</code></pre><p><strong>14.</strong> 编辑<strong>MainActivity.java</strong>并且添加一些fragment到ViewPager通过**setupViewPager()**方法。我已经添加了10个fragment，这样做之后，你的MainActivity应该像下面这样。</p><p><code>MainActivity.java</code></p><pre><code class="java">package info.androidhive.materialtabs.activity;import android.os.Bundle;import android.support.design.widget.TabLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity &#123;    private Toolbar toolbar;    private TabLayout tabLayout;    private ViewPager viewPager;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        viewPager = (ViewPager) findViewById(R.id.viewpager);        setupViewPager(viewPager);        tabLayout = (TabLayout) findViewById(R.id.tabs);        tabLayout.setupWithViewPager(viewPager);    &#125;    private void setupViewPager(ViewPager viewPager) &#123;        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());        adapter.addFrag(new OneFragment(), &quot;ONE&quot;);        adapter.addFrag(new TwoFragment(), &quot;TWO&quot;);        adapter.addFrag(new ThreeFragment(), &quot;THREE&quot;);        adapter.addFrag(new FourFragment(), &quot;FOUR&quot;);        adapter.addFrag(new FiveFragment(), &quot;FIVE&quot;);        adapter.addFrag(new SixFragment(), &quot;SIX&quot;);        adapter.addFrag(new SevenFragment(), &quot;SEVEN&quot;);        adapter.addFrag(new EightFragment(), &quot;EIGHT&quot;);        adapter.addFrag(new NineFragment(), &quot;NINE&quot;);        adapter.addFrag(new TenFragment(), &quot;TEN&quot;);        viewPager.setAdapter(adapter);    &#125;    class ViewPagerAdapter extends FragmentPagerAdapter &#123;        private final List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;();        private final List&lt;String&gt; mFragmentTitleList = new ArrayList&lt;&gt;();        public ViewPagerAdapter(FragmentManager manager) &#123;            super(manager);        &#125;        @Override        public Fragment getItem(int position) &#123;            return mFragmentList.get(position);        &#125;        @Override        public int getCount() &#123;            return mFragmentList.size();        &#125;        public void addFrag(Fragment fragment, String title) &#123;            mFragmentList.add(fragment);            mFragmentTitleList.add(title);        &#125;        @Override        public CharSequence getPageTitle(int position) &#123;            return mFragmentTitleList.get(position);        &#125;    &#125;&#125;</code></pre><p>现在如果你再运行你的应用，你就可以看到很多tabs，而且具有欢动功能。 </p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout.png" alt="layout"><br><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout-horizontal.png" alt="horizontal"></p><h3 id="图文标签"><a href="#图文标签" class="headerlink" title="图文标签"></a>图文标签</h3><p>有时候你可能想要给标签添加图标。此前给标签添加图标是非常繁琐的过程，但是现在有了Material Design支持库，这就变得很容易了。所以你必须要做的就是调用**setIcon()**方法来设置适当的图标，这个图标就可以显示在标签文字前面了。</p><pre><code class="java">tabLayout.getTabAt(0).setIcon(tabIcons[0]);tabLayout.getTabAt(1).setIcon(tabIcons[1]);</code></pre><p><strong>15.</strong> 打开<strong>MainActivity.java</strong>并且按照下面来修改代码。在这里我已经添加了一个新的方法**setupTabIcons()**来设置标签的图标。</p><p><code>MainActivity.java</code></p><pre><code class="java">import android.os.Bundle;import android.support.design.widget.TabLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity &#123;    private Toolbar toolbar;    private TabLayout tabLayout;    private ViewPager viewPager;    private int[] tabIcons = &#123;            R.drawable.ic_tab_favourite,            R.drawable.ic_tab_call,            R.drawable.ic_tab_contacts    &#125;;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        viewPager = (ViewPager) findViewById(R.id.viewpager);        setupViewPager(viewPager);        tabLayout = (TabLayout) findViewById(R.id.tabs);        tabLayout.setupWithViewPager(viewPager);        setupTabIcons();    &#125;    private void setupTabIcons() &#123;        tabLayout.getTabAt(0).setIcon(tabIcons[0]);        tabLayout.getTabAt(1).setIcon(tabIcons[1]);        tabLayout.getTabAt(2).setIcon(tabIcons[2]);    &#125;    private void setupViewPager(ViewPager viewPager) &#123;        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());        adapter.addFrag(new OneFragment(), &quot;ONE&quot;);        adapter.addFrag(new TwoFragment(), &quot;TWO&quot;);        adapter.addFrag(new ThreeFragment(), &quot;THREE&quot;);        viewPager.setAdapter(adapter);    &#125;    class ViewPagerAdapter extends FragmentPagerAdapter &#123;        private final List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;();        private final List&lt;String&gt; mFragmentTitleList = new ArrayList&lt;&gt;();        public ViewPagerAdapter(FragmentManager manager) &#123;            super(manager);        &#125;        @Override        public Fragment getItem(int position) &#123;            return mFragmentList.get(position);        &#125;        @Override        public int getCount() &#123;            return mFragmentList.size();        &#125;        public void addFrag(Fragment fragment, String title) &#123;            mFragmentList.add(fragment);            mFragmentTitleList.add(title);        &#125;        @Override        public CharSequence getPageTitle(int position) &#123;            return mFragmentTitleList.get(position);        &#125;    &#125;&#125;</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-icon-and-text.png" alt="android-tab-layout-with-icon-and-text"></p><h3 id="图标标签"><a href="#图标标签" class="headerlink" title="图标标签"></a>图标标签</h3><p>仅仅设置图标的选项卡是和图文的选项卡是一样的，只是ViewPagerAdapter类的**getPageTitle()**方法返回值为null即可。</p><p><strong>16.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码修改**getPageTitle()**方法，接着运行项目。</p><pre><code class="java">@Overridepublic CharSequence getPageTitle(int position) &#123;    // return null to display only the icon    return null;&#125;</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-only-icons.png" alt="android-tab-layout-with-only-icons"></p><h3 id="自定义图文选项卡"><a href="#自定义图文选项卡" class="headerlink" title="自定义图文选项卡"></a>自定义图文选项卡</h3><p>当默认的选项卡布局不能达到你预期的输出效果时，自定义选项卡就非常实用了。在你自定义选项卡试图的时候，请务必遵循Android选项卡的规范建议。</p><p>当我们设置了图文选项卡时，你能够看到图标和文字是水平居中的，但是如果你想要放置图标在选项卡标签之上，你就必须使用一个自定义的view来完成它。</p><p><strong>17.</strong> 在<strong>res ⇒ values</strong>下面,创建<strong>fonts.xml</strong>文件，并且添加以下字符串值。这个xml文件定义了选项卡中文字所使用的字体。</p><p><code>fonts.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;string name=&quot;font_fontFamily_medium&quot;&gt;sans-serif&lt;/string&gt;&lt;/resources&gt;</code></pre><p><strong>18.</strong> 在<strong>res ⇒ values-v21下面，创建另一个</strong>fonts.xml**文件。</p><p><code>fonts.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;string name=&quot;font_fontFamily_medium&quot;&gt;sans-serif-medium&lt;/string&gt;&lt;/resources&gt;</code></pre><p><strong>19.</strong> 打开<strong>activity_main.xml</strong>并且给TabLayout设置自定义的高度。设置这个高度显得非常重要，因为在选项卡标签上面放置图标需要更多的空间。</p><pre><code class="xml">&lt;android.support.design.widget.TabLayout           android:id=&quot;@+id/tabs&quot;           android:layout_width=&quot;match_parent&quot;           android:layout_height=&quot;@dimen/custom_tab_layout_height&quot;           app:tabMode=&quot;fixed&quot;           app:tabGravity=&quot;fill&quot;/&gt;</code></pre><p><strong>20.</strong> 在<strong>res ⇒ layout</strong>下新建的一个xml文件<strong>custom_tab.xml</strong>，这个文件是用来自定义选项卡布局的。</p><p><code>custom_tab.xml</code></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;wrap_content&quot;    android:layout_height=&quot;wrap_content&quot;    android:id=&quot;@+id/tab&quot;    android:textColor=&quot;@color/colorAccent&quot;    android:textSize=&quot;@dimen/tab_label&quot;    android:fontFamily=&quot;@string/font_fontFamily_medium&quot;/&gt;</code></pre><p><strong>21.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码做修改。这里你是否注意到setupTabIcon()方法。下面的代码中我已经给每一个选项卡使用了custom_tab.xml布局，。</p><pre><code class="java">TextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);tabOne.setText(&quot;ONE&quot;);tabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);tabLayout.getTabAt(0).setCustomView(tabOne);</code></pre><p><code>MainActivity.java</code></p><pre><code class="java">import android.os.Bundle;import android.support.design.widget.TabLayout;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.LayoutInflater;import android.widget.TextView;import java.util.ArrayList;import java.util.List;import info.androidhive.materialtabs.R;import info.androidhive.materialtabs.fragments.OneFragment;import info.androidhive.materialtabs.fragments.ThreeFragment;import info.androidhive.materialtabs.fragments.TwoFragment;public class MainActivity extends AppCompatActivity &#123;    private Toolbar toolbar;    private TabLayout tabLayout;    private ViewPager viewPager;    private int[] tabIcons = &#123;            R.drawable.ic_tab_favourite,            R.drawable.ic_tab_call,            R.drawable.ic_tab_contacts    &#125;;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        viewPager = (ViewPager) findViewById(R.id.viewpager);        setupViewPager(viewPager);        tabLayout = (TabLayout) findViewById(R.id.tabs);        tabLayout.setupWithViewPager(viewPager);        setupTabIcons();    &#125;    private void setupTabIcons() &#123;        TextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);        tabOne.setText(&quot;ONE&quot;);        tabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);        tabLayout.getTabAt(0).setCustomView(tabOne);        TextView tabTwo = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);        tabTwo.setText(&quot;TWO&quot;);        tabTwo.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_call, 0, 0);        tabLayout.getTabAt(1).setCustomView(tabTwo);        TextView tabThree = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);        tabThree.setText(&quot;THREE&quot;);        tabThree.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_contacts, 0, 0);        tabLayout.getTabAt(2).setCustomView(tabThree);    &#125;    private void setupViewPager(ViewPager viewPager) &#123;        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());        adapter.addFrag(new OneFragment(), &quot;ONE&quot;);        adapter.addFrag(new TwoFragment(), &quot;TWO&quot;);        adapter.addFrag(new ThreeFragment(), &quot;THREE&quot;);        viewPager.setAdapter(adapter);    &#125;    class ViewPagerAdapter extends FragmentPagerAdapter &#123;        private final List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;();        private final List&lt;String&gt; mFragmentTitleList = new ArrayList&lt;&gt;();        public ViewPagerAdapter(FragmentManager manager) &#123;            super(manager);        &#125;        @Override        public Fragment getItem(int position) &#123;            return mFragmentList.get(position);        &#125;        @Override        public int getCount() &#123;            return mFragmentList.size();        &#125;        public void addFrag(Fragment fragment, String title) &#123;            mFragmentList.add(fragment);            mFragmentTitleList.add(title);        &#125;        @Override        public CharSequence getPageTitle(int position) &#123;            return mFragmentTitleList.get(position);        &#125;    &#125;&#125;</code></pre><p>现在如果你运行这个程序，你就能看到图标被放置在选项卡标签的上面了。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-custom-view-icon-and-text.png" alt="android-tab-layout-with-custom-view-icon-and-text"></p><p>我希望这篇文章对于Material Design支持库的使用，提供了一些非常有用的信息，如果你有任何问题，请在下面回复。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：Ravi Tamada&lt;br&gt;原文地址：&lt;a href=&quot;http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/&quot;&gt;http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.in/2015/05/android-design-support-library.html&quot;&gt;Android Design支持库&lt;/a&gt; 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。&lt;/p&gt;
&lt;p&gt;在进一步深入了解之前，我建议先看一下&lt;a href=&quot;https://www.google.co.in/design/spec/components/tabs.html#&quot;&gt;tabs的文档&lt;/a&gt;，它可以告诉你在实现tabs的时候，什么该做什么不该做。&lt;/p&gt;
&lt;p&gt;这里还有yutube的视频：&lt;a href=&quot;https://youtu.be/6sGhDYYUoBM&quot;&gt;到墙外看一看&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用Material&quot;&gt;&lt;a href=&quot;#使用Material&quot; class=&quot;headerlink&quot; title=&quot;使用Material&quot;&gt;&lt;/a&gt;使用Material&lt;/h3&gt;&lt;p&gt;首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章&lt;a href=&quot;http://www.androidhive.info/2015/04/android-getting-started-with-material-design/&quot;&gt;Material Design入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;.在Android Studio中，&lt;strong&gt;File =&amp;gt; New Project&lt;/strong&gt;并且填好其它信息去创建一个新项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;.打开&lt;strong&gt;build.gradle&lt;/strong&gt;然后添加支持库&lt;strong&gt;com.android.support:design:23.0.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;dependencies &amp;#123;
    compile fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.jar&amp;#39;])
    compile &amp;#39;com.android.support:appcompat-v7:23.0.1&amp;#39;
    compile &amp;#39;com.android.support:design:23.0.1&amp;#39;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Material Design" scheme="https://goghtsui.github.io/tags/Material-Design/"/>
    
    <category term="TabLayout" scheme="https://goghtsui.github.io/tags/TabLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android Material Design - Snackbar</title>
    <link href="https://goghtsui.github.io/2015/12/24/Android-Material-Design-Snackbar/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/24/Android-Material-Design-Snackbar/undefined/</id>
    <published>2015-12-24T08:49:57.000Z</published>
    <updated>2021-01-26T02:34:57.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：Ravi Tamada<br>原文地址：<a href="http://www.androidhive.info/2015/09/android-material-design-snackbar-example/">http://www.androidhive.info/…example/</a></p></blockquote><p>Material Design中一个有趣的组件介绍就是**<a href="https://www.google.co.in/design/spec/components/snackbars-toasts.html">Snackbar</a><strong>。Snackbar就像</strong>Toast**消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。</p><p>这篇文章讲述的是关于Snackbar和一些不同场景下的例子。</p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p><a href="http://download.androidhive.info/">戳我下载</a></p><h4 id="1-简单的Snackbar"><a href="#1-简单的Snackbar" class="headerlink" title="1.简单的Snackbar"></a>1.简单的Snackbar</h4><p>下面是一个简单的Snackbar语法。<strong>make</strong>方法接收三个参数：View、显示的信息、消息显示的持续时间。</p><p>通常传递 <strong>CoordinatorLayout</strong> 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。</p><p>并且显示的持续时间应该是<strong>LENGTH_SHORT</strong>, <strong>LENGTH_LONG</strong>或者<strong>LENGTH_INDEFINITE</strong>。当<strong>LENGTH_INDEFINITE</strong>被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。</p><pre><code class="java">Snackbar snackbar = Snackbar        .make(coordinatorLayout, &quot;Welcome to AndroidHive&quot;, Snackbar.LENGTH_LONG);snackbar.show();</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png" alt="example"></p><a id="more"></a><h4 id="2-Snackbar与动作回调"><a href="#2-Snackbar与动作回调" class="headerlink" title="2.Snackbar与动作回调"></a>2.Snackbar与动作回调</h4><p>你也可以使用一个回调方法_setAction()_，使得它可以和我们有一些动作交互。</p><pre><code class="java">Snackbar snackbar = Snackbar        .make(coordinatorLayout, &quot;Message is deleted&quot;, Snackbar.LENGTH_LONG)        .setAction(&quot;UNDO&quot;, new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, &quot;Message is restored!&quot;, Snackbar.LENGTH_SHORT);                snackbar1.show();            &#125;        &#125;);snackbar.show();</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-with-action-callback-undo.png" alt="example"></p><h4 id="3-自定义Snackbar"><a href="#3-自定义Snackbar" class="headerlink" title="3.自定义Snackbar"></a>3.自定义Snackbar</h4><p>Snackbar默认文字颜色 <strong>white</strong>、默认背景是 <strong>#323232</strong>。你可以按照下面的方式修改：</p><pre><code class="java">Snackbar snackbar = Snackbar        .make(coordinatorLayout, &quot;No internet connection!&quot;, Snackbar.LENGTH_LONG)        .setAction(&quot;RETRY&quot;, new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;            &#125;        &#125;);// Changing message text colorsnackbar.setActionTextColor(Color.RED);// Changing action button text colorView sbView = snackbar.getView();TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);textView.setTextColor(Color.YELLOW);snackbar.show();</code></pre><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-custom-color-view-text-color.png" alt="example"></p><h4 id="4-创建新项目"><a href="#4-创建新项目" class="headerlink" title="4.创建新项目"></a>4.创建新项目</h4><p>现在我们创建一个demo来看看Snackbar动作，而且应用用<strong>CoordinatorLayout **和</strong>FloatingActionButton**。</p><p>1.在Android Studio中，执行<strong>File =&gt; New Project</strong>，然后填上所有的信息来创建一个新工程。</p><p>2.打开<strong>Build.gradle</strong>然后添加库的依赖<br><code>build.gradle</code></p><pre><code class="java">dependencies &#123;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;    compile &#39;com.android.support:design:23.0.1&#39;&#125;</code></pre><p>3.可选项，你可以应用<strong>material design</strong>的主题，通过<a href="http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/">这里</a>的步骤。</p><p>4.打开布局文件，然后我添加了以下代码，是包含<strong>CoordinatorLayout</strong>、<strong>FloatingActionButton</strong>。</p><p><code>activity_main.xml</code></p><pre><code class="java">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:id=&quot;@+id/coordinatorLayout&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    tools:context=&quot;.MainActivity&quot;&gt;    &lt;android.support.design.widget.AppBarLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;        &lt;android.support.v7.widget.Toolbar            android:id=&quot;@+id/toolbar&quot;            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;?attr/actionBarSize&quot;            android:background=&quot;?attr/colorPrimary&quot;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;    &lt;/android.support.design.widget.AppBarLayout&gt;    &lt;LinearLayout        android:layout_width=&quot;fill_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:orientation=&quot;vertical&quot;        android:paddingLeft=&quot;20dp&quot;        android:paddingRight=&quot;20dp&quot;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;        &lt;Button            android:id=&quot;@+id/btnSimpleSnackbar&quot;            android:layout_width=&quot;fill_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:layout_marginTop=&quot;30dp&quot;            android:text=&quot;Simple Snackbar&quot; /&gt;        &lt;Button            android:id=&quot;@+id/btnActionCallback&quot;            android:layout_width=&quot;fill_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:layout_marginTop=&quot;10dp&quot;            android:text=&quot;With Action Callback&quot; /&gt;        &lt;Button            android:id=&quot;@+id/btnCustomSnackbar&quot;            android:layout_width=&quot;fill_parent&quot;            android:layout_height=&quot;wrap_content&quot;            android:layout_marginTop=&quot;10dp&quot;            android:text=&quot;Custom Color&quot; /&gt;    &lt;/LinearLayout&gt;    &lt;android.support.design.widget.FloatingActionButton        android:id=&quot;@+id/fab&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_gravity=&quot;end|bottom&quot;        android:layout_margin=&quot;16dp&quot;        android:src=&quot;@android:drawable/ic_dialog_email&quot; /&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre><p>5.现在打开<strong>MainActivity.java</strong>然后按照下面的修改，这个activity包含了三个按钮及点击事件，实现了上面提到的不同样式的Snackbar。</p><p><code>MainActivity.java</code></p><pre><code class="java">import android.graphics.Color;import android.os.Bundle;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.view.View;import android.widget.Button;import android.widget.TextView;public class MainActivity extends AppCompatActivity &#123;    private Toolbar mToolbar;    private CoordinatorLayout coordinatorLayout;    private Button btnSimpleSnackbar, btnActionCallback, btnCustomView;    private FloatingActionButton fab;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                .coordinatorLayout);        fab = (FloatingActionButton) findViewById(R.id.fab);        mToolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(mToolbar);        btnSimpleSnackbar = (Button) findViewById(R.id.btnSimpleSnackbar);        btnActionCallback = (Button) findViewById(R.id.btnActionCallback);        btnCustomView = (Button) findViewById(R.id.btnCustomSnackbar);        btnSimpleSnackbar.setOnClickListener(new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;                Snackbar snackbar = Snackbar                        .make(coordinatorLayout, &quot;Welcome to AndroidHive&quot;, Snackbar.LENGTH_LONG);                snackbar.show();            &#125;        &#125;);        btnActionCallback.setOnClickListener(new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;                Snackbar snackbar = Snackbar                        .make(coordinatorLayout, &quot;Message is deleted&quot;, Snackbar.LENGTH_LONG)                        .setAction(&quot;UNDO&quot;, new View.OnClickListener() &#123;                            @Override                            public void onClick(View view) &#123;                                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, &quot;Message is restored!&quot;, Snackbar.LENGTH_SHORT);                                snackbar1.show();                            &#125;                        &#125;);                snackbar.show();            &#125;        &#125;);        btnCustomView.setOnClickListener(new View.OnClickListener() &#123;            @Override            public void onClick(View view) &#123;                Snackbar snackbar = Snackbar                        .make(coordinatorLayout, &quot;No internet connection!&quot;, Snackbar.LENGTH_LONG)                        .setAction(&quot;RETRY&quot;, new View.OnClickListener() &#123;                            @Override                            public void onClick(View view) &#123;                            &#125;                        &#125;);                // Changing message text color                snackbar.setActionTextColor(Color.RED);                // Changing action button text color                View sbView = snackbar.getView();                TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                textView.setTextColor(Color.YELLOW);                snackbar.show();            &#125;        &#125;);    &#125;&#125;</code></pre><p>6.运行这个项目，可以测试这几种效果。</p><p><img src="http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-snackbar-example.png" alt="example"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：Ravi Tamada&lt;br&gt;原文地址：&lt;a href=&quot;http://www.androidhive.info/2015/09/android-material-design-snackbar-example/&quot;&gt;http://www.androidhive.info/…example/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Material Design中一个有趣的组件介绍就是**&lt;a href=&quot;https://www.google.co.in/design/spec/components/snackbars-toasts.html&quot;&gt;Snackbar&lt;/a&gt;&lt;strong&gt;。Snackbar就像&lt;/strong&gt;Toast**消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。&lt;/p&gt;
&lt;p&gt;这篇文章讲述的是关于Snackbar和一些不同场景下的例子。&lt;/p&gt;
&lt;h4 id=&quot;源码下载&quot;&gt;&lt;a href=&quot;#源码下载&quot; class=&quot;headerlink&quot; title=&quot;源码下载&quot;&gt;&lt;/a&gt;源码下载&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://download.androidhive.info/&quot;&gt;戳我下载&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-简单的Snackbar&quot;&gt;&lt;a href=&quot;#1-简单的Snackbar&quot; class=&quot;headerlink&quot; title=&quot;1.简单的Snackbar&quot;&gt;&lt;/a&gt;1.简单的Snackbar&lt;/h4&gt;&lt;p&gt;下面是一个简单的Snackbar语法。&lt;strong&gt;make&lt;/strong&gt;方法接收三个参数：View、显示的信息、消息显示的持续时间。&lt;/p&gt;
&lt;p&gt;通常传递 &lt;strong&gt;CoordinatorLayout&lt;/strong&gt; 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。&lt;/p&gt;
&lt;p&gt;并且显示的持续时间应该是&lt;strong&gt;LENGTH_SHORT&lt;/strong&gt;, &lt;strong&gt;LENGTH_LONG&lt;/strong&gt;或者&lt;strong&gt;LENGTH_INDEFINITE&lt;/strong&gt;。当&lt;strong&gt;LENGTH_INDEFINITE&lt;/strong&gt;被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Snackbar snackbar = Snackbar
        .make(coordinatorLayout, &amp;quot;Welcome to AndroidHive&amp;quot;, Snackbar.LENGTH_LONG);

snackbar.show();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Material Design" scheme="https://goghtsui.github.io/tags/Material-Design/"/>
    
    <category term="Snackbar" scheme="https://goghtsui.github.io/tags/Snackbar/"/>
    
  </entry>
  
  <entry>
    <title>Parcelable vs Serializable</title>
    <link href="https://goghtsui.github.io/2015/12/24/Parcelable-vs-Serializable/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/24/Parcelable-vs-Serializable/undefined/</id>
    <published>2015-12-24T07:49:15.000Z</published>
    <updated>2021-01-26T02:34:57.579Z</updated>
    
    <content type="html"><![CDATA[<h4 id="序论"><a href="#序论" class="headerlink" title="序论"></a>序论</h4><p>在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。</p><p>通过api我们了解到有两种选择，可以使用对象的**<a href="http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html">Parcelable</a><strong>或者</strong><a href="https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html">Serializable</a>**形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？</p><p>要回答这个问题，先让我们看看这两个方法。</p><h4 id="Serializable，简单之主"><a href="#Serializable，简单之主" class="headerlink" title="Serializable，简单之主"></a><strong>Serializable</strong>，简单之主</h4><pre><code class="java">// access modifiers, accessors and constructors omitted for brevitypublic class SerializableDeveloper implements Serializable    String name;    int yearsOfExperience;    List&lt;Skill&gt; skillSet;    float favoriteFloat;    static class Skill implements Serializable &#123;        String name;        boolean programmingRelated;    &#125;&#125;</code></pre><p>Serializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。</p><p>这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。</p><a id="more"></a><h4 id="Parcelable-速度之王"><a href="#Parcelable-速度之王" class="headerlink" title="Parcelable, 速度之王"></a><strong>Parcelable</strong>, 速度之王</h4><pre><code class="java">// access modifiers, accessors and regular constructors ommited for brevityclass ParcelableDeveloper implements Parcelable &#123;    String name;    int yearsOfExperience;    List&lt;Skill&gt; skillSet;    float favoriteFloat;    ParcelableDeveloper(Parcel in) &#123;        this.name = in.readString();        this.yearsOfExperience = in.readInt();        this.skillSet = new ArrayList&lt;Skill&gt;();        in.readTypedList(skillSet, Skill.CREATOR);        this.favoriteFloat = in.readFloat();    &#125;    void writeToParcel(Parcel dest, int flags) &#123;        dest.writeString(name);        dest.writeInt(yearsOfExperience);        dest.writeTypedList(skillSet);        dest.writeFloat(favoriteFloat);    &#125;    int describeContents() &#123;        return 0;    &#125;    static final Parcelable.Creator&lt;ParcelableDeveloper&gt; CREATOR            = new Parcelable.Creator&lt;ParcelableDeveloper&gt;() &#123;        ParcelableDeveloper createFromParcel(Parcel in) &#123;            return new ParcelableDeveloper(in);        &#125;        ParcelableDeveloper[] newArray(int size) &#123;            return new ParcelableDeveloper[size];        &#125;    &#125;;    static class Skill implements Parcelable &#123;        String name;        boolean programmingRelated;        Skill(Parcel in) &#123;            this.name = in.readString();            this.programmingRelated = (in.readInt() == 1);        &#125;        @Override        void writeToParcel(Parcel dest, int flags) &#123;            dest.writeString(name);            dest.writeInt(programmingRelated ? 1 : 0);        &#125;        static final Parcelable.Creator&lt;Skill&gt; CREATOR            = new Parcelable.Creator&lt;Skill&gt;() &#123;            Skill createFromParcel(Parcel in) &#123;                return new Skill(in);            &#125;            Skill[] newArray(int size) &#123;                return new Skill[size];            &#125;        &#125;;        @Override        int describeContents() &#123;            return 0;        &#125;    &#125;&#125;</code></pre><p>根据**<a href="http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364">google engineers</a>**，这段代码明显运行的很快。其中一个原因就是，我们明确实例化的进程，而不是使用反射来推断它。支撑他的另一个原因就是，它也为此目的做了大量的优化。</p><p>无论怎样，可以明显的看出实现Parcelable不是免费的，他会有大量的样板代码，并且是类很难阅读和维护。</p><h4 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h4><p>当然，我们想要知道Parcelable有多快。</p><h4 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h4><ul><li>1.模拟传递对象给activity的过程，通过将一个对象放入bundle并调用**[Bundle#writeToParcel(Parcel,int)](<a href="https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel">https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel</a>(android.os.Parcel, int)**，然后取出来。</li><li>2.循环执行1000次</li><li>3.取10次独立运行的内存占用平均值，其他应用使用这个cpu</li><li>4.被测试对象是上面展示的SerializableDeveloper和ParcelableDeveloper</li><li>5.在多个设备上测试 - android版本<ul><li>LG Nexus 4 - Android 4.2.2 </li><li>Samsung Nexus 10 - Android 4.2.2</li><li>HTC Desire Z - Android 2.3.3</li></ul></li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="http://www.developerphil.com/assets/parcelable-vs-serializable-e1366334109758.png" alt="result"><br><strong>Nexus 10</strong></p><p>Serializable: 1.0004ms,  Parcelable: 0.0850ms - 10.16x improvement.</p><p><strong>Nexus 4</strong></p><p>Serializable: 1.8539ms - Parcelable: 0.1824ms - 11.80x improvement.</p><p><strong>Desire Z</strong></p><p>Serializable: 5.1224ms - Parcelable: 0.2938ms - 17.36x improvement.</p><p>想必你已经知道了，Parcelable比Serializable快了10倍。</p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>如果你想要成为一个好公民，那就花费更多的时间来实现**<a href="http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html">Parcelable</a>**，因为这将快10倍的速度，而且占用更少的资源。</p><p>然而，在大部分情况下，**<a href="https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html">Serializable</a>**的慢并不是很明显，你可以随意使用它，但是记住，序列化是一个昂贵的操作，它将保持在一个低速状态。</p><p>如果你正在传递上千的序列化对象队列，整个过程很有可能超过了一秒钟，它可以使转换或旋转从纵向到横向感到十分缓慢。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;序论&quot;&gt;&lt;a href=&quot;#序论&quot; class=&quot;headerlink&quot; title=&quot;序论&quot;&gt;&lt;/a&gt;序论&lt;/h4&gt;&lt;p&gt;在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。&lt;/p&gt;
&lt;p&gt;通过api我们了解到有两种选择，可以使用对象的**&lt;a href=&quot;http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html&quot;&gt;Parcelable&lt;/a&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;a href=&quot;https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html&quot;&gt;Serializable&lt;/a&gt;**形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？&lt;/p&gt;
&lt;p&gt;要回答这个问题，先让我们看看这两个方法。&lt;/p&gt;
&lt;h4 id=&quot;Serializable，简单之主&quot;&gt;&lt;a href=&quot;#Serializable，简单之主&quot; class=&quot;headerlink&quot; title=&quot;Serializable，简单之主&quot;&gt;&lt;/a&gt;&lt;strong&gt;Serializable&lt;/strong&gt;，简单之主&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// access modifiers, accessors and constructors omitted for brevity
public class SerializableDeveloper implements Serializable
    String name;
    int yearsOfExperience;
    List&amp;lt;Skill&amp;gt; skillSet;
    float favoriteFloat;

    static class Skill implements Serializable &amp;#123;
        String name;
        boolean programmingRelated;
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Serializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。&lt;/p&gt;
&lt;p&gt;这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。&lt;/p&gt;</summary>
    
    
    
    <category term="Complex" scheme="https://goghtsui.github.io/categories/Complex/"/>
    
    
    <category term="Parcelable" scheme="https://goghtsui.github.io/tags/Parcelable/"/>
    
    <category term="Serializable" scheme="https://goghtsui.github.io/tags/Serializable/"/>
    
    <category term="序列化" scheme="https://goghtsui.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Tips of the Day(2)</title>
    <link href="https://goghtsui.github.io/2015/12/23/Android-Studio-Tips-of-the-Day(2)/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/23/Android-Studio-Tips-of-the-Day(2)/undefined/</id>
    <published>2015-12-23T06:22:27.000Z</published>
    <updated>2021-01-26T02:34:57.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：Philippe Breault<br>原文地址：<a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/">http://www.developerphil.com/…the-day-roundup-2/</a></p></blockquote><h4 id="关于快捷键"><a href="#关于快捷键" class="headerlink" title="关于快捷键"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p><h4 id="1-重复的行"><a href="#1-重复的行" class="headerlink" title="1.重复的行"></a>1.重复的行</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+d</td><td align="left">ctrl+d</td></tr></tbody></table><p>它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。</p><p><img src="http://www.developerphil.com/assets/11-duplicate_lines.gif" alt="dumplicate"></p><a id="more"></a><h4 id="2-扩大-缩小选择"><a href="#2-扩大-缩小选择" class="headerlink" title="2.扩大/缩小选择"></a>2.扩大/缩小选择</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+up/down</td><td align="left">ctrl+w / ctrl+shift+w</td></tr></tbody></table><p>以光标为基点,在上下文扩展选择的范围。例如:它将选择当前的变量,然后该语句,然后是这个方法等。<br><img src="http://www.developerphil.com/assets/12-expand_shrink_selection.gif" alt="dumplicate"></p><h4 id="3-环绕-包装"><a href="#3-环绕-包装" class="headerlink" title="3.环绕(包装)"></a>3.环绕(包装)</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+alt+t</td><td align="left">ctrl+alt+t</td></tr></tbody></table><p>这个操作可以包装一个结构的代码块。通常是一个 <em>if</em> 语句,一个循环、一个 <em>try-catch</em> 或者是一个 _runnable_。<br>如果你什么都没选, 那么它只会包裹当前行。</p><p><img src="http://www.developerphil.com/assets/13-surround_with.gif" alt="dumplicate"></p><h4 id="4-最近列表"><a href="#4-最近列表" class="headerlink" title="4.最近列表"></a>4.最近列表</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+e</td><td align="left">ctrl+e</td></tr></tbody></table><p>使用这个功能,你可以看到最近查看过的文件列表。</p><p><img src="http://www.developerphil.com/assets/14-recents.gif" alt="dumplicate"></p><h4 id="5-自动代码"><a href="#5-自动代码" class="headerlink" title="5.自动代码"></a>5.自动代码</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+j</td><td align="left">ctrl+j</td></tr></tbody></table><p>它可以快速插入代码片段。更有趣的是它带有合理的默认值,并通过参数引导你完成插入。</p><p>其他提示:</p><ul><li>如果你知道缩写,你也可以不用快捷方式。你仅仅需要如果缩写并且使用_Tab_key 完成即可。</li></ul><p><img src="http://www.developerphil.com/assets/15-live_templates.gif" alt="dumplicate"></p><h4 id="6-移动方法"><a href="#6-移动方法" class="headerlink" title="6.移动方法"></a>6.移动方法</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+alt+up/down</td><td align="left">ctrl+shift+up/down</td></tr></tbody></table><p>这是一个类似移动行的快捷方式,但是移动的是整个方法。没必要使用复制-粘贴,就可以上下移动方法。例如:你可以重新排序字段和内部类。</p><p><img src="http://www.developerphil.com/assets/15-movemethods.gif" alt="dumplicate"></p><h4 id="7-完成语句"><a href="#7-完成语句" class="headerlink" title="7.完成语句"></a>7.完成语句</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+shift+enter</td><td align="left">ctrl+shift+enter</td></tr></tbody></table><p>它会自动生成丢失的代码来完成一条语句,它通常的使用情景是:</p><ul><li>添加一个分号在行的末尾,即时光标不在行尾</li><li>在_if、while、for_的后面添加一个括号或者大括号</li><li>添加一个大括号在方法声明之后</li></ul><p>其他提示:</p><ul><li>如果一条语句已经完成,它会进入下一行,即时光标没有在当前行的最后一个字符.<br><img src="http://www.developerphil.com/assets/16-completestatement.gif" alt="dumplicate"></li></ul><h4 id="8-最后一次编辑的位置"><a href="#8-最后一次编辑的位置" class="headerlink" title="8.最后一次编辑的位置"></a>8.最后一次编辑的位置</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+shift+backspace</td><td align="left">ctrl+shift+backspace</td></tr></tbody></table><p>它会让你浏览你最后一次修改的位置,这个和点击工具栏的返回按钮是不一样的。它会带你在你修改的历史记录中浏览。</p><p><img src="http://www.developerphil.com/assets/17-navigate-previous-changes.gif" alt="dumplicate"></p><h4 id="9-整合行和文字"><a href="#9-整合行和文字" class="headerlink" title="9.整合行和文字"></a>9.整合行和文字</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">ctrl+shift+j</td><td align="left">ctrl+shift+j</td></tr></tbody></table><p>它能比你在行尾模拟删除键要做的更多,它可以保留当前的格式规则,并且它还可以:</p><ul><li>合并两个注释行,并且删除无用的<em>//</em></li><li>合并多行字符串,并且去除<em>+、””</em></li><li>整合字段和任务</li></ul><p>其他提示:</p><ul><li>如果你选择了一个字符串,跨越多行,那么它就可以将其整合成一行</li></ul><p><img src="http://www.developerphil.com/assets/18-joinlines.gif" alt="dumplicate"></p><h4 id="10-查找"><a href="#10-查找" class="headerlink" title="10.查找"></a>10.查找</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+f1</td><td align="left">alt+f1</td></tr></tbody></table><p>获取当前文件,并且询问你在哪选择它。他可以在_project、structure_或者文件管理器中打开它。每一个动作都有一个数字或字母前缀,这是调用它的快捷方式。</p><p>你可以从文件或者直接从_project_试图调用测方法。</p><p><img src="http://www.developerphil.com/assets/19-select-in.gif" alt="dumplicate"></p><h4 id="11-展开-删除"><a href="#11-展开-删除" class="headerlink" title="11.展开/删除"></a>11.展开/删除</h4><p>这个操作将会移除包裹的代码,它可以移除一个<em>if_语句、_while</em> 循环、<em>try-catch</em> 或者<em>runnable</em> 。<br>这和包裹的快捷方式是完全相反的。</p><p><img src="http://www.developerphil.com/assets/20-unwrap.gif" alt="dumplicate"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：Philippe Breault&lt;br&gt;原文地址：&lt;a href=&quot;http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/&quot;&gt;http://www.developerphil.com/…the-day-roundup-2/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;关于快捷键&quot;&gt;&lt;a href=&quot;#关于快捷键&quot; class=&quot;headerlink&quot; title=&quot;关于快捷键&quot;&gt;&lt;/a&gt;关于快捷键&lt;/h4&gt;&lt;p&gt;Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过&lt;em&gt;Settings-&amp;gt;KeyMap.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-重复的行&quot;&gt;&lt;a href=&quot;#1-重复的行&quot; class=&quot;headerlink&quot; title=&quot;1.重复的行&quot;&gt;&lt;/a&gt;1.重复的行&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Mac&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Win&amp;amp;Linux&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;cmd+d&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ctrl+d&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.developerphil.com/assets/11-duplicate_lines.gif&quot; alt=&quot;dumplicate&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="快捷键" scheme="https://goghtsui.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="tips of the Day" scheme="https://goghtsui.github.io/tags/tips-of-the-Day/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Tips of the Day(1)</title>
    <link href="https://goghtsui.github.io/2015/12/22/Android-Studio-Tips-of-the-Day(1)/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/22/Android-Studio-Tips-of-the-Day(1)/undefined/</id>
    <published>2015-12-22T09:19:51.000Z</published>
    <updated>2021-01-26T02:34:57.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原作者：Philippe Breault<br>原文地址：<a href="http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/">http://www.developerphil.com/…day-roundup-1/</a></p></blockquote><h4 id="关于快捷键"><a href="#关于快捷键" class="headerlink" title="关于快捷键"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p><h4 id="1-高亮显示"><a href="#1-高亮显示" class="headerlink" title="1.高亮显示"></a>1.高亮显示</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+shift+f7</td><td align="left">ctrl+shift+f7</td></tr></tbody></table><p>高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：<em>Edit -&gt; Find -&gt; Find Next/Previous</em></p><p>其他提示：</p><ul><li>高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示</li><li>高亮类声明中“extends”或者“implements”，同样会高亮 <strong>override/implemented</strong>的方法</li><li>高亮一个 import 会同样高亮使用它的地方</li><li>可以通过 <em>Escape</em> 取消高亮</li></ul><p><img src="http://www.developerphil.com/assets/01-highlight.gif" alt="ctrlshiftf7"></p><a id="more"></a><h4 id="2-在方法和内部类之间移动"><a href="#2-在方法和内部类之间移动" class="headerlink" title="2.在方法和内部类之间移动"></a>2.在方法和内部类之间移动</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">ctrl+up/down</td><td align="left">alt+up/down</td></tr></tbody></table><p>在当前文件中，移动光标到下一个方法或者类的名字开头。</p><p>如果你在方法内，向上就会将光标移动到该方法的名字开头。它非常有用，因为它让你在正确的地方重构或者发现方法的用法。</p><p><img src="http://www.developerphil.com/assets/02-move_between_methods.gif" alt="move"></p><h4 id="3-类结构弹窗"><a href="#3-类结构弹窗" class="headerlink" title="3.类结构弹窗"></a>3.类结构弹窗</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+f12</td><td align="left">ctrl+f12</td></tr></tbody></table><p>用来展示当前类的概要和内部的导航.最好的事情是你可以使用你的键盘过滤。这是一件非常高效的方法，去定位到一个你知道其名字的方法。</p><p>其他提示：</p><ul><li>输入过滤列表时，你可以使用驼峰匹配。例如：输入**”oCr”<strong>将查找到</strong>“onCreate”**</li><li>你也可以切换复选框来显示匿名内部类。假如你想要查找<strong>onClickListener</strong>中的<strong>onClick</strong>方法，这个就非常好用。</li></ul><p><img src="http://www.developerphil.com/assets/04-callinghierarchy.gif" alt="hierarachy"></p><h4 id="4-调用层级结构弹窗"><a href="#4-调用层级结构弹窗" class="headerlink" title="4.调用层级结构弹窗"></a>4.调用层级结构弹窗</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">ctrl+alt+h</td><td align="left">ctrl+alt+h</td></tr><tr><td align="left">它可以显示一个方法的声明和调用之间可能的路径。</td><td align="left"></td></tr><tr><td align="left"><img src="http://www.developerphil.com/assets/03-filestructure.gif" alt="popup"></td><td align="left"></td></tr></tbody></table><h4 id="5-定义快速查询"><a href="#5-定义快速查询" class="headerlink" title="5.定义快速查询"></a>5.定义快速查询</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+space</td><td align="left">ctrl+shift+i</td></tr><tr><td align="left">有没有想要查看一个方法或者类的实现，但是又不想离开当前的页面？使用这个快捷键就可以在当前页面通过窗口的形式展现。</td><td align="left"></td></tr><tr><td align="left"><img src="http://www.developerphil.com/assets/05-quickdefinition.gif" alt="quick"></td><td align="left"></td></tr></tbody></table><h4 id="6-折叠展开代码块"><a href="#6-折叠展开代码块" class="headerlink" title="6.折叠展开代码块"></a>6.折叠展开代码块</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+plus/minus</td><td align="left">ctrl+shift+plus/minus</td></tr><tr><td align="left">这个功能的目的是让你隐藏你此刻不关心的东西。他将以最简单的形式隐藏整个代码块（例如：当你打开一个新的文件的时候忽略 _import_列表）。一个更有趣的用法是，它会隐藏周围简单的匿名内部类模块，并使它看起来像一个lambda表达式。</td><td align="left"></td></tr></tbody></table><p>其他提示：</p><ul><li>你可以设置默认，通过 <em>Edit -&gt; Code Folding.</em><br><img src="http://www.developerphil.com/assets/06-codefolding.gif" alt="fold"></li></ul><h4 id="7-书签"><a href="#7-书签" class="headerlink" title="7.书签"></a>7.书签</h4><ul><li>切换书签</li></ul><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">f3</td><td align="left">f11</td></tr></tbody></table><ul><li>通过助记符切换书签</li></ul><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+f3</td><td align="left">ctrl+f11</td></tr></tbody></table><p>如果你分配了一个数据，你可以通过快捷方式 <em>ctrl+number</em> 回到书签</p><ul><li>显示书签</li></ul><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+f3</td><td align="left">shift+f11</td></tr></tbody></table><p><img src="http://www.developerphil.com/assets/08-findaction.gif" alt="find"></p><h4 id="8-符号查找"><a href="#8-符号查找" class="headerlink" title="8.符号查找"></a>8.符号查找</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+shift+a</td><td align="left">ctrl+shift+a</td></tr></tbody></table><p>对于Android Studio，你可以通过它的名字，调用任何你知道的菜单或者符号！这对于你曾经有一段时间使用过，但却没有快捷方式的命令是非常有用的。</p><p>其他提示：</p><ul><li>如果有相关联的快捷键，会一同显示<br><img src="http://www.developerphil.com/assets/07-bookmarks.gif" alt="move"></li></ul><h4 id="9-行上下移动"><a href="#9-行上下移动" class="headerlink" title="9.行上下移动"></a>9.行上下移动</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">alt+shift+up/down</td><td align="left">alt+shift+up/down</td></tr></tbody></table><p><img src="http://www.developerphil.com/assets/09-movelines.gif" alt="bookmark"></p><h4 id="10-删除行"><a href="#10-删除行" class="headerlink" title="10.删除行"></a>10.删除行</h4><table><thead><tr><th align="left">Mac</th><th align="left">Win&amp;Linux</th></tr></thead><tbody><tr><td align="left">cmd+backspace</td><td align="left">ctrl+y</td></tr></tbody></table><p><img src="http://www.developerphil.com/assets/10-deleteline.gif" alt="bookmark"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原作者：Philippe Breault&lt;br&gt;原文地址：&lt;a href=&quot;http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/&quot;&gt;http://www.developerphil.com/…day-roundup-1/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;关于快捷键&quot;&gt;&lt;a href=&quot;#关于快捷键&quot; class=&quot;headerlink&quot; title=&quot;关于快捷键&quot;&gt;&lt;/a&gt;关于快捷键&lt;/h4&gt;&lt;p&gt;Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过&lt;em&gt;Settings-&amp;gt;KeyMap.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-高亮显示&quot;&gt;&lt;a href=&quot;#1-高亮显示&quot; class=&quot;headerlink&quot; title=&quot;1.高亮显示&quot;&gt;&lt;/a&gt;1.高亮显示&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Mac&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Win&amp;amp;Linux&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;cmd+shift+f7&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;ctrl+shift+f7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：&lt;em&gt;Edit -&amp;gt; Find -&amp;gt; Find Next/Previous&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;其他提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示&lt;/li&gt;
&lt;li&gt;高亮类声明中“extends”或者“implements”，同样会高亮 &lt;strong&gt;override/implemented&lt;/strong&gt;的方法&lt;/li&gt;
&lt;li&gt;高亮一个 import 会同样高亮使用它的地方&lt;/li&gt;
&lt;li&gt;可以通过 &lt;em&gt;Escape&lt;/em&gt; 取消高亮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://www.developerphil.com/assets/01-highlight.gif&quot; alt=&quot;ctrlshiftf7&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/categories/Android-Studio/"/>
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="快捷键" scheme="https://goghtsui.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="tips of the Day" scheme="https://goghtsui.github.io/tags/tips-of-the-Day/"/>
    
  </entry>
  
  <entry>
    <title>Java的连接与初始化</title>
    <link href="https://goghtsui.github.io/2015/12/09/Java%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/undefined/"/>
    <id>https://goghtsui.github.io/2015/12/09/Java%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/undefined/</id>
    <published>2015-12-09T04:52:53.000Z</published>
    <updated>2021-01-26T02:34:57.577Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文作者：iceAeterna<br>原文链接：<a href="http://www.cnblogs.com/iceAeterNa/p/4876747.html">http://www.cnblogs.com/iceAeterNa/p/4876747.html</a></p></blockquote><h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。<br><img src="http://img.blog.csdn.net/20151010184504881"></p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。<br>以下为主动使用的情况： </p><ul><li>创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)</li><li>使用某个类的静态方法 </li><li>访问某个类或接口的静态字段 </li><li>调用JavaAPI中的某些反射方法 </li><li>初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) </li><li>启动某个标明为启动类的类(含有main()方法)<br>主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。 <a id="more"></a></li></ul><p>Grandpa的定义如下：</p><pre><code class="java">package com.ice.passiveaccess;public class Grandpa &#123;    static&#123;        System.out.println(&quot;Grandpa was initialized.&quot;);    &#125;&#125;</code></pre><p>Parent的定义如下：</p><pre><code class="java">package com.ice.passiveaccess;public class Parent extends Grandpa&#123;    static String language = &quot;Chinese&quot;;    static&#123;        System.out.println(&quot;Parent was initialized.&quot;);    &#125;&#125;</code></pre><p>Cindy的定义如下：</p><pre><code class="java">package com.ice.passiveaccess;public class Cindy extends Parent&#123;    static&#123;        System.out.println(&quot;Child was initialized.&quot;);    &#125;&#125;</code></pre><p>现在通过Cindy访问父类的language成员:</p><pre><code class="java">package com.ice.passiveaccess;public class PassiveAccessTest &#123;    public static void main(String args[])&#123;        System.out.println(Cindy.language);    &#125;&#125;</code></pre><p>结果如下： </p><pre><code class="java">Grandpa was initialized.Parent was initialized.Chinese</code></pre><p>可见这是被动访问，Cindy自身并没有初始化</p><h4 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h4><p>装载的过程：</p><ul><li>(1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法) </li><li>(2).解析该二进制数据流为方法区内的数据结构 </li><li>(3).创建一个该类型的java.lang.Class实例 </li></ul><p>在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。 </p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>class文件校验器需要四趟独立的扫描来完成验证工作，其中： </p><ul><li>第一趟扫描在装载时进行，会对class文件进行结构检查，如 <ul><li>(1).对魔数进行检查，以判断该文件是否是一个正常的class文件 </li><li>(2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容 </li><li>(3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。 　</li></ul></li><li>第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件 <ul><li>(1).final类不能拥有子类 </li><li>(2).final方法不能被重写(覆盖) </li><li>(3).子类和超类之间没有不兼容的方法声明 </li><li>(4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池) </li><li>(5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式 </li></ul></li><li>第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。 </li><li>第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。 </li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0) </p><h4 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h4><p>在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用 </p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。<br>如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。</p><p>注意：</p><ul><li><p>(1).在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么，也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。<br>如UsefulParameter类如下： </p><pre><code class="java">Class UsefulParameter&#123;   static final int height = 2;   static final int width = height * 2; &#125; </code></pre><p>类Area的类变量初始化如下： </p><pre><code class="java">Class Area&#123;   static int height = UsefulParameter.height * 2 ;   static int width = UsefulParameter.width * 2; &#125; </code></pre><p>在Area的&lt; clinit&gt;中，将直接把2、4嵌入到字节码中:<br><img src="http://images2015.cnblogs.com/blog/821477/201510/821477-20151014103108788-81357571.png" alt="clinit"></p></li><li><p>(2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化 </p></li></ul><h4 id="类实例化"><a href="#类实例化" class="headerlink" title="类实例化"></a>类实例化</h4><p>这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化</p><p>如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。<br>类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。<br>　　<br>**类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。 **</p><p>比如：</p><pre><code class="java">package com.ice.init;public class Parent &#123;    public static int i = print(&quot;parent static:i&quot;);    public int ii = print(&quot;parent:ii&quot;);    static&#123;        print(&quot;父类静态初始化&quot;);    &#125;    &#123;        print(&quot;父类实例初始化&quot;);    &#125;    public Parent(String str) &#123;        System.out.println(&quot;parent constructor:&quot; + str);    &#125;    public static int print(String str)&#123;        System.out.println(&quot;initial:&quot; + str);        return i;    &#125;&#125;</code></pre><p>子类Child如下：</p><pre><code class="java">package com.ice.init;public class Child extends Parent&#123;    public static int i = print(&quot;child static:i&quot;);    public int ii = print(&quot;child:ii&quot;);    static&#123;        print(&quot;子类静态初始化&quot;);    &#125;    &#123;        print(&quot;子类实例初始化&quot;);    &#125;    public Child(String str) &#123;        super(str);        System.out.println(&quot;Child constructor:&quot; + str);    &#125;    public static int print(String str)&#123;        System.out.println(&quot;initial:&quot; + str);        return i;    &#125;    public static void main(String args[])&#123;        Child child = new Child(&quot;cindy&quot;);    &#125;&#125;</code></pre><p>其初始化顺序为：</p><pre><code class="java">initial:parent static:iinitial:父类静态初始化initial:child static:iinitial:子类静态初始化initial:parent:iiinitial:父类实例初始化parent constructor:cindyinitial:child:iiinitial:子类实例初始化Child constructor:cindy</code></pre><p>Java编译器为每个类生成了至少一个实例初始化方法&lt; init &gt;，一个&lt; init &gt;方法分为三部分： 另一个初始化方法&lt; init &gt;()，对任意实例成员的初始化的字节码，构造方法的方法体的字节码</p><p>&lt; init &gt;方法的调用如下：<br>若&lt; init &gt;指明从this()方法明确调用另一个构造方法，那么将调用另一个构造方法，否则，若该类有直接超类，那么，若&lt; init &gt;指明从super()方法明确调用其超类的构造方法，那么将调用超类的构造方法，否则，将默认调用超类的无参构造方法。这样，将从其祖先类到该类，分别完成对应的实例成员的初始化(可能被子类覆盖) </p><p>接下来以一道题结束本节：<br>判断输出：</p><pre><code class="java">package com.ice.init;class T  implements Cloneable&#123;      public static int k = 0;      public static T t1 = new T(&quot;t1&quot;);      public static T t2 = new T(&quot;t2&quot;);      public static int i = print(&quot;i&quot;);      public static int n = 99;      public int j = print(&quot;j&quot;);      &#123;          print(&quot;构造块&quot;);      &#125;      static &#123;          print(&quot;静态块&quot;);      &#125;      public T(String str) &#123;          System.out.println((++k) + &quot;:&quot; + str + &quot;    i=&quot; + i + &quot;  n=&quot; + n);          ++n; ++ i;      &#125;      public static int print(String str)&#123;          System.out.println((++k) +&quot;:&quot; + str + &quot;   i=&quot; + i + &quot;   n=&quot; + n);          ++n;          return ++ i;      &#125;      public static void main(String[] args)&#123;          T t = new T(&quot;init&quot;);      &#125;    &#125;</code></pre><p>题解如下：</p><p>(1).首先T类被加载、连接后进行初始化，会先对字段k、t1、t2、i、n以及static块进行初始化。<br>(2).t1实例的初始化会初始化实例成员j，(实际上先进行父类实例内容的初始化)先调用静态方法print，并执行实例初始化块{}，        输出：<br> 1: j i=0 n= 0(i和n都还没有初始化)<br> 2:构造块 i=1 n=1<br>(3)随后调用t1实例的构造函数，输出：<br> 3:t1 i=2 n=2<br>(4).类似有t2实例的初始化：<br> 4: j i=3 n= 3<br> 5:构造块 i=4 n=4<br> 6:t2 i=5 n=5<br>(5).i的初始化：<br> 7.i i=6 n=6<br>(6).n的初始化和静态块的初始化：<br> 8.静态块 i=7 n=99(n已经被初始化)<br>(7).t实例的初始化：<br> 9.j i=8 n= 100<br> 10.构造块 i=9 n= 101<br> 11.init i=10 n= 102</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文作者：iceAeterna&lt;br&gt;原文链接：&lt;a href=&quot;http://www.cnblogs.com/iceAeterNa/p/4876747.html&quot;&gt;http://www.cnblogs.com/iceAeterNa/p/4876747.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h4&gt;&lt;p&gt;Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151010184504881&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;解析&quot;&gt;&lt;a href=&quot;#解析&quot; class=&quot;headerlink&quot; title=&quot;解析&quot;&gt;&lt;/a&gt;解析&lt;/h4&gt;&lt;p&gt;解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。&lt;br&gt;以下为主动使用的情况： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)&lt;/li&gt;
&lt;li&gt;使用某个类的静态方法 &lt;/li&gt;
&lt;li&gt;访问某个类或接口的静态字段 &lt;/li&gt;
&lt;li&gt;调用JavaAPI中的某些反射方法 &lt;/li&gt;
&lt;li&gt;初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) &lt;/li&gt;
&lt;li&gt;启动某个标明为启动类的类(含有main()方法)&lt;br&gt;主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="类初始化" scheme="https://goghtsui.github.io/tags/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
    <category term="虚拟机" scheme="https://goghtsui.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="Java" scheme="https://goghtsui.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>通过Swiftype实现hexo站内搜索</title>
    <link href="https://goghtsui.github.io/2015/11/25/%E9%80%9A%E8%BF%87Swiftype%E5%AE%9E%E7%8E%B0hexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/25/%E9%80%9A%E8%BF%87Swiftype%E5%AE%9E%E7%8E%B0hexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/undefined/</id>
    <published>2015-11-25T09:30:54.000Z</published>
    <updated>2021-01-26T02:34:57.592Z</updated>
    
    <content type="html"><![CDATA[<p>hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。</p><h4 id="注册swiftype账号"><a href="#注册swiftype账号" class="headerlink" title="注册swiftype账号"></a>注册swiftype账号</h4><p>官方地址：<a href="https://swiftype.com/">https://swiftype.com/</a></p><h4 id="创建搜索引擎"><a href="#创建搜索引擎" class="headerlink" title="创建搜索引擎"></a>创建搜索引擎</h4><p>注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;<br>1、CREATE AN ENGINE：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg" alt="CREATEANENGINE"><br>2、继续点击创建：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png" alt="create"></p><a id="more"></a><p>3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png" alt="enginename"><br>4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png" alt="sitemap"><br>5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png" alt="homepage"><br>5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png" alt="contentdata"><br>6、点击上面的INTEGRATE -&gt; INSTALL SEARCH ，进行一些关键的配置：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png" alt="install"><br>7、点击CHANGE CONFIGURATION：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png" alt="change"><br>8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（<strong>results container</strong> - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png" alt="container"><br>9、配置<strong>Search field</strong>，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png" alt="searchfield"></p><p> 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。</p><h4 id="hexo主题配置（pacman）"><a href="#hexo主题配置（pacman）" class="headerlink" title="hexo主题配置（pacman）"></a>hexo主题配置（pacman）</h4><p>我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。</p><p><strong>1、</strong>首先打开<strong>pacman\_config.yml</strong>文件在末尾添加如下代码，提供对swiftype的支持：</p><pre><code>swift_search:  enable: true</code></pre><p><strong>2、</strong> 在<strong>hexo\source</strong>目录（注意不是pacman主题的source目录）下<strong>新建一个search文件夹</strong>（如果不存在的），在里面<strong>新建一个index.md</strong>，index.md中写入如下代码：</p><pre><code>layout: searchtitle: search---</code></pre><p><strong>3、</strong> 切换的到<strong>pacman\layout\_partial</strong>目录下，大部分的代码配置都在这里完成的。先<strong>打开header.ejs</strong>，把</p><pre><code>&lt;li&gt;......&lt;/li&gt;</code></pre><p>之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接<strong>copy</strong>过去就行：</p><pre><code>&lt;% if    (theme.swift_search&amp;&amp;theme.swift_search.enable)&#123; %&gt;    &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;    &lt;label&gt;Search&lt;/label&gt;    &lt;input type=&quot;text&quot; class=&quot;st-default-search-input&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;    &lt;/form&gt;    &lt;% &#125;else if    (theme.google_cse&amp;&amp;theme.google_cse.enable)&#123; %&gt;    &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;    &lt;label&gt;Search&lt;/label&gt;    &lt;input type=&quot;text&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; name=&quot;q&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&#39;search&#39;) %&gt;&quot; /&gt;    &lt;/form&gt;    &lt;% &#125; else &#123; %&gt;    &lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;    &lt;label&gt;Search&lt;/label&gt;    &lt;input type=&quot;text&quot; id=&quot;search&quot; name=&quot;q&quot; autocomplete=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&#39;search&#39;) %&gt;&quot; /&gt;    &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\/\//, &#39;&#39;) %&gt;&quot;&gt;    &lt;/form&gt;    &lt;% &#125; %&gt;</code></pre><p><strong>4、</strong>将原来的<strong>search.ejs</strong>中的代码<strong>清空</strong>，<strong>替换为以下的代码</strong>，其实主要就是为了控制结果的显示样式（后期可以自己调整），<strong>注意：将最下面的<code>&lt;script ...   &gt;  ...</code> 部分替换成swiftype给你的js代码</strong>。</p><pre><code>&lt;% if(theme.swift_search.enable) &#123; %&gt;&lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;  &lt;div id=&quot;st-results-container&quot; class=&quot;st-search-container&quot; style=&quot;width:80%&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;  &lt;style&gt;.st-result-text &#123;  background: #fafafa;  display: block;  border-left: 0.5em solid #ccc;  -webkit-transition: border-left 0.45s;  -moz-transition: border-left 0.45s;  -o-transition: border-left 0.45s;  -ms-transition: border-left 0.45s;  transition: border-left 0.45s;  padding: 0.5em;&#125;@media only screen and (min-width: 768px) &#123;  .st-result-text &#123;    padding: 1em;  &#125;&#125;.st-result-text:hover &#123;  border-left: 0.5em solid #ea6753;&#125;.st-result-text h3 a&#123;  color: #2ca6cb;  line-height: 1.5;  font-size: 22px;&#125;.st-snippet em &#123;  font-weight: bold;  color: #ea6753;&#125;&lt;/style&gt;&lt;script type=&quot;text/javascript&quot;&gt;  (function(w,d,t,u,n,s,e)&#123;w[&#39;SwiftypeObject&#39;]=n;w[n]=w[n]||function()&#123;  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);  &#125;)(window,document,&#39;script&#39;,&#39;//s.swiftypecdn.com/install/v2/st.js&#39;,&#39;_st&#39;);  _st(&#39;install&#39;,&#39;w7ca3xWstLkz2UvAeyAJ&#39;,&#39;2.0.0&#39;);&lt;/script&gt;&lt;% &#125; %&gt;</code></pre><p><strong>5、</strong>打开<strong>footer.ejs或header.ejs</strong>，在最后一个标签（<code>&lt;/div&gt;</code>）之前添加swiftype分配给你的js代码（同上），我的是：</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;  (function(w,d,t,u,n,s,e)&#123;w[&#39;SwiftypeObject&#39;]=n;w[n]=w[n]||function()&#123;  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);  &#125;)(window,document,&#39;script&#39;,&#39;//s.swiftypecdn.com/install/v2/st.js&#39;,&#39;_st&#39;);  _st(&#39;install&#39;,&#39;w7ca3xWstLkz2UvAeyAJ&#39;,&#39;2.0.0&#39;);&lt;/script&gt;</code></pre><p>到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：</p><pre><code>&gt; hexo clean&gt; hexo d -g</code></pre><p>等部署完成，你就可以打开你的Blog任性的搜索了</p><h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p>这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，<a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html">点我跳转.</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。&lt;/p&gt;
&lt;h4 id=&quot;注册swiftype账号&quot;&gt;&lt;a href=&quot;#注册swiftype账号&quot; class=&quot;headerlink&quot; title=&quot;注册swiftype账号&quot;&gt;&lt;/a&gt;注册swiftype账号&lt;/h4&gt;&lt;p&gt;官方地址：&lt;a href=&quot;https://swiftype.com/&quot;&gt;https://swiftype.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建搜索引擎&quot;&gt;&lt;a href=&quot;#创建搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;创建搜索引擎&quot;&gt;&lt;/a&gt;创建搜索引擎&lt;/h4&gt;&lt;p&gt;注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;&lt;br&gt;1、CREATE AN ENGINE：&lt;br&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg&quot; alt=&quot;CREATEANENGINE&quot;&gt;&lt;br&gt;2、继续点击创建：&lt;br&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png&quot; alt=&quot;create&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://goghtsui.github.io/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="https://goghtsui.github.io/tags/hexo/"/>
    
    <category term="swiftype" scheme="https://goghtsui.github.io/tags/swiftype/"/>
    
    <category term="pacman" scheme="https://goghtsui.github.io/tags/pacman/"/>
    
  </entry>
  
  <entry>
    <title>[Win10]快捷键之Win组合键</title>
    <link href="https://goghtsui.github.io/2015/11/25/Win10-%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B9%8BWin%E7%BB%84%E5%90%88%E9%94%AE/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/25/Win10-%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B9%8BWin%E7%BB%84%E5%90%88%E9%94%AE/undefined/</id>
    <published>2015-11-25T01:27:42.000Z</published>
    <updated>2021-01-26T02:34:57.580Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Win组合键"><a href="#Win组合键" class="headerlink" title="Win组合键"></a>Win组合键</h4><table><thead><tr><th align="left">Shortcut</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">Windows Key <img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"></td><td align="left">Open and close the Start menu.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+1,<img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+2,etc.</td><td align="left">Switch to the desktop and launch the nth application in the taskbar. For example, <img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"> +1 launches whichever application is first in the list, numbered from left to right.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+A</td><td align="left">Open the action center.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+B</td><td align="left">Highlight the notification area.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+C</td><td align="left">Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+D</td><td align="left">Switch between <strong>Show Desktop</strong> (hides/shows any applications and other windows) and the previous state.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+E</td><td align="left">Switch to the desktop and launch File Explorer with the <strong>Quick Access</strong> tab displayed.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+H</td><td align="left">Open the action center.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+I</td><td align="left">Open the action center.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+K</td><td align="left">Open the <strong>Connect</strong> pane to connect to wireless displays and audio devices.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+L</td><td align="left">Lock the device and go to the <strong>Lock</strong> screen.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+M</td><td align="left">Switch to the desktop and minimize all open windows.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+O</td><td align="left">Lock device orientation.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+P</td><td align="left">Open the <strong>Project</strong> pane to search and connect to external displays and projectors.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+R</td><td align="left">Display the <strong>Run</strong> dialog box.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+S</td><td align="left">Launch Cortana.[注2]  Users can begin to type a query immediately.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+T</td><td align="left">Cycle through the apps on the taskbar.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+U</td><td align="left">Launch the Ease of Access Center.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+A</td><td align="left">Cycle through notifications.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+V</td><td align="left">Open the action center.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+X</td><td align="left">Open the advanced menu in the lower-left corner of the screen.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Z</td><td align="left">Open the app-specific command bar.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Enter</td><td align="left">Launch Narrator.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"> + Space</td><td align="left">Switch input language and keyboard layout.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Tab</td><td align="left">Open Task view.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+,</td><td align="left">Peek at the desktop.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Plus Sign</td><td align="left">Zoom in.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Minus Sign</td><td align="left">Zoom out.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+ESCAPE</td><td align="left">Close Magnifier.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+LEFT ARROW</td><td align="left">Dock the active window to the left half of the monitor.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+RIGHT ARROW</td><td align="left">Dock the active window to the right half of the monitor.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+UP ARROW</td><td align="left">Maximize the active window vertically and horizontally.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+DOWN ARROW</td><td align="left">Restore or minimize the active window.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT UP ARROW</td><td align="left">Maximize the active window vertically, maintaining the current width.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT DOWN ARROW</td><td align="left">Restore or minimize the active window vertically, maintaining the current width.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT LEFT ARROW</td><td align="left">With multiple monitors, move the active window to the monitor on the left.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT RIGHT ARROW</td><td align="left">With multiple monitors, move the active window to the monitor on the right.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+HOME</td><td align="left">Minimize all nonactive windows; restore on second keystroke.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+PRNT SCRN</td><td align="left">Take a picture of the screen and place it in the <strong>Computer&gt;Pictures&gt;Screenshots</strong> folder.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL+LEFT/RIGHT ARROW</td><td align="left">Switch to the next or previous virtual desktop.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL+D</td><td align="left">Create a new virtual desktop.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL_F4</td><td align="left">Close the current virtual desktop.</td></tr><tr><td align="left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+?</td><td align="left">Launch the Windows Feedback App.</td></tr></tbody></table><p>[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.</p><p>[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Win组合键&quot;&gt;&lt;a href=&quot;#Win组合键&quot; class=&quot;headerlink&quot; title=&quot;Win组合键&quot;&gt;&lt;/a&gt;Win组合键&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Shortcut&lt;/th&gt;
&lt;th a</summary>
      
    
    
    
    <category term="Win10" scheme="https://goghtsui.github.io/categories/Win10/"/>
    
    
    <category term="快捷键" scheme="https://goghtsui.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    <category term="Win10" scheme="https://goghtsui.github.io/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>[推荐]Markdown编辑器(PC+手机端)</title>
    <link href="https://goghtsui.github.io/2015/11/24/%E6%8E%A8%E8%8D%90-Markdown%E7%BC%96%E8%BE%91%E5%99%A8/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/24/%E6%8E%A8%E8%8D%90-Markdown%E7%BC%96%E8%BE%91%E5%99%A8/undefined/</id>
    <published>2015-11-24T07:14:12.000Z</published>
    <updated>2021-01-26T02:34:57.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><p>相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png" alt="gitbub-readme"><br>上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。</p><h3 id="在线编辑器-马克飞象"><a href="#在线编辑器-马克飞象" class="headerlink" title="在线编辑器 - 马克飞象"></a>在线编辑器 - 马克飞象</h3><p>官方地址：<a href="http://tool.oschina.net/markdown/">点我跳转</a><br>这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览</p><a id="more"></a><h3 id="Windows-MarkdownPad"><a href="#Windows-MarkdownPad" class="headerlink" title="Windows - MarkdownPad"></a>Windows - MarkdownPad</h3><p>官网地址：<a href="http://markdownpad.com/">点我跳转</a><br>官方描述：<strong>MarkdownPad is a full-featured Markdown editor for Windows.</strong><br>这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png" alt="markdownpad"></p><h3 id="Gmail-Markdown-Here"><a href="#Gmail-Markdown-Here" class="headerlink" title="Gmail - Markdown Here"></a>Gmail - Markdown Here</h3><p>这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了<br>Chrome扩展插件：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png" alt="chromeplugin"><br>编辑gmail邮件：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-before.png" alt="gmailediter"><br>gmail的预览，点击图一插件按钮即可看到图二预览效果：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png" alt="gmailpluginbutton"><br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png" alt="gmailpreview"></p><h3 id="Android-MarkdownX"><a href="#Android-MarkdownX" class="headerlink" title="Android - MarkdownX"></a>Android - MarkdownX</h3><p>在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。<br>下图来自google play：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png" alt="markdownx"></p><p>这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h3&gt;&lt;p&gt;相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：&lt;br&gt;&lt;img src=&quot;http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png&quot; alt=&quot;gitbub-readme&quot;&gt;&lt;br&gt;上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。&lt;/p&gt;
&lt;h3 id=&quot;在线编辑器-马克飞象&quot;&gt;&lt;a href=&quot;#在线编辑器-马克飞象&quot; class=&quot;headerlink&quot; title=&quot;在线编辑器 - 马克飞象&quot;&gt;&lt;/a&gt;在线编辑器 - 马克飞象&lt;/h3&gt;&lt;p&gt;官方地址：&lt;a href=&quot;http://tool.oschina.net/markdown/&quot;&gt;点我跳转&lt;/a&gt;&lt;br&gt;这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览&lt;/p&gt;</summary>
    
    
    
    <category term="Markdown" scheme="https://goghtsui.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="https://goghtsui.github.io/tags/Markdown/"/>
    
    <category term="马克飞象" scheme="https://goghtsui.github.io/tags/%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1/"/>
    
    <category term="MarkdownPad" scheme="https://goghtsui.github.io/tags/MarkdownPad/"/>
    
    <category term="MarkdownX" scheme="https://goghtsui.github.io/tags/MarkdownX/"/>
    
  </entry>
  
  <entry>
    <title>Java之静态绑定和动态绑定</title>
    <link href="https://goghtsui.github.io/2015/11/24/Java%E4%B9%8B%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/24/Java%E4%B9%8B%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/undefined/</id>
    <published>2015-11-24T02:07:20.000Z</published>
    <updated>2021-01-26T02:34:57.576Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 <strong>静态绑定</strong>和<strong>动态绑定</strong></li><li>动态绑定：在面向过程中又称为<strong>后期绑定</strong>，在程序<strong>运行期</strong>进行了绑定，根据实际情况有选择的进行绑定</li><li>静态绑定：在面向过程中又称为<strong>前期绑定</strong>，在程序<strong>编译期</strong>进行了绑定，即在还没运行时，就已经加载到内存<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4></li><li>动态绑定<ul><li>又称为后期绑定</li><li>发生在运行时期</li><li>虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定</li><li>动态绑定使用对象信息来完成</li><li>典型应用是方法的重写（Override）</li></ul></li><li>静态绑定<ul><li>又称为前期绑定</li><li>发生在编译时期</li><li>使用private或static或final修饰的变量或者方法（包括构造方法）</li><li>静态绑定使用类信息来完成</li><li>典型应用是方法重载（Overload）</li></ul></li></ul><a id="more"></a><ul><li>运行期<br>Java的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错</li><li>编译期<br>Java的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序</li></ul><p>Java字节码的执行有两种方式： </p><ul><li>即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码</li><li>解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。</li></ul><p>Java程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>关于final、static、private和构造方法是前期绑定的理解：</p><ul><li><strong>private</strong><br>对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起</li><li><strong>final</strong><br>final方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)</li><li><strong>static</strong><br>对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏<br>就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法<br>由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。</li><li><strong>构造</strong><br>构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类</li></ul><p><strong>示例代码</strong></p><pre><code>public class SuperClass &#123;    protected String attribute = &quot;from SuperClass&quot;;    public String getAttribute() &#123;        return attribute;    &#125;    public static void print(SuperClass superClass) &#123;        System.out.println(&quot; static method &quot; + superClass.attribute);    &#125;&#125;public class SubClass extends SuperClass &#123;    protected String attribute = &quot;from SubClass&quot;;    public String getAttribute() &#123;        return attribute;    &#125;    public static void print(SuperClass superClass) &#123;        System.out.println(&quot; static method &quot; + superClass.attribute);    &#125;    public static void main(String[] args) &#123;        SuperClass superClass = new SubClass();        SubClass subClass = new SubClass();        superClass.print(superClass);        subClass.print(subClass);        System.out.println(&quot; attribute &quot; + superClass.attribute);        System.out.println(&quot; method &quot; + superClass.getAttribute());    &#125;&#125;</code></pre><p><strong>输出结果</strong></p><pre><code> static method from SuperClass static method from SuperClass attribute from SuperClass method from SubClass</code></pre><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p>使用JDK自带的javap命令反编译看看：<br><code>&gt;javap -c SubClass</code></p><pre><code>Warning: Binary file SubClass contains com.gogh.bind.SubClassCompiled from &quot;SubClass.java&quot;public class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass &#123;  protected java.lang.String attribute;  public com.gogh.bind.SubClass();    Code:       0: aload_0       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.&quot;&lt;init&gt;&quot;:()V       4: aload_0       5: ldc           #12                 // String from SubClass       7: putfield      #14                 // Field attribute:Ljava/lang/String;      10: return  public java.lang.String getAttribute();    Code:       0: aload_0       1: getfield      #14                 // Field attribute:Ljava/lang/String;       4: areturn  public static void print(com.gogh.bind.SuperClass);    Code:       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;       3: new           #30                 // class java/lang/StringBuilder       6: dup       7: ldc           #32                 // String  static method       9: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V      12: aload_0      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V      25: return  public static void main(java.lang.String[]);    Code:       0: new           #1                  // class com/gogh/bind/SubClass       3: dup       4: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V       7: astore_1       8: new           #1                  // class com/gogh/bind/SubClass      11: dup      12: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V      15: astore_2      16: aload_1      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V      20: aload_2      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;      27: new           #30                 // class java/lang/StringBuilder      30: dup      31: ldc           #58                 // String  attribute      33: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V      36: aload_1      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;      52: new           #30                 // class java/lang/StringBuilder      55: dup      56: ldc           #60                 // String  method      58: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V      61: aload_1      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V      74: return&#125;</code></pre><p>通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：</p><ul><li> 17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V<br>调用的SuperClass.print方法</li><li>21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</li><li>37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;<br>这个也是调用的SuperClass.print方法<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4>Java中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。</li></ul><p>与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。</p><p>Java因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。</p><p>内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 &lt;strong&gt;静态绑定&lt;/strong&gt;和&lt;strong&gt;动态绑定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;动态绑定：在面向过程中又称为&lt;strong&gt;后期绑定&lt;/strong&gt;，在程序&lt;strong&gt;运行期&lt;/strong&gt;进行了绑定，根据实际情况有选择的进行绑定&lt;/li&gt;
&lt;li&gt;静态绑定：在面向过程中又称为&lt;strong&gt;前期绑定&lt;/strong&gt;，在程序&lt;strong&gt;编译期&lt;/strong&gt;进行了绑定，即在还没运行时，就已经加载到内存&lt;h4 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;动态绑定&lt;ul&gt;
&lt;li&gt;又称为后期绑定&lt;/li&gt;
&lt;li&gt;发生在运行时期&lt;/li&gt;
&lt;li&gt;虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定&lt;/li&gt;
&lt;li&gt;动态绑定使用对象信息来完成&lt;/li&gt;
&lt;li&gt;典型应用是方法的重写（Override）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态绑定&lt;ul&gt;
&lt;li&gt;又称为前期绑定&lt;/li&gt;
&lt;li&gt;发生在编译时期&lt;/li&gt;
&lt;li&gt;使用private或static或final修饰的变量或者方法（包括构造方法）&lt;/li&gt;
&lt;li&gt;静态绑定使用类信息来完成&lt;/li&gt;
&lt;li&gt;典型应用是方法重载（Overload）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="动态绑定" scheme="https://goghtsui.github.io/tags/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    
    <category term="静态绑定" scheme="https://goghtsui.github.io/tags/%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    
    <category term="重载" scheme="https://goghtsui.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
    <category term="重写" scheme="https://goghtsui.github.io/tags/%E9%87%8D%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Java重载匹配优先级</title>
    <link href="https://goghtsui.github.io/2015/11/23/Java%E9%87%8D%E8%BD%BD%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E7%BA%A7/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/23/Java%E9%87%8D%E8%BD%BD%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E7%BA%A7/undefined/</id>
    <published>2015-11-23T08:31:05.000Z</published>
    <updated>2021-01-26T02:34:57.578Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h4><p>Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：</p><pre><code class="java">public class OverloadPriority &#123;    public static void print(Object arg) &#123;        System.out.println(&quot;parameter type = Object&quot;);    &#125;    public static void print(int arg) &#123;        System.out.println(&quot;parameter type = int&quot;);    &#125;    public static void print(long arg) &#123;        System.out.println(&quot;parameter type = long&quot;);    &#125;    public static void print(double arg) &#123;        System.out.println(&quot;parameter type = double&quot;);    &#125;    public static void print(float arg) &#123;        System.out.println(&quot;parameter type = float&quot;);    &#125;    public static void print(char arg) &#123;        System.out.println(&quot;parameter type = char&quot;);    &#125;    public static void print(Character arg) &#123;        System.out.println(&quot;parameter type = Character&quot;);    &#125;    public static void print(char... arg) &#123;        System.out.println(&quot;parameter type = char...&quot;);    &#125;    public static void print(Serializable arg) &#123;        System.out.println(&quot;parameter type = Serializable&quot;);    &#125;    public static void print(Comparable&lt;?&gt; arg) &#123;        System.out.println(&quot;parameter type = Comparable&quot;);    &#125;    public static void main(String[] args) &#123;        // int        print(&#39;g&#39;);    &#125;&#125;</code></pre><a id="more"></a><p>可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。</p><p>main方法执行print(‘g’)，输出结果毫无疑问就是：</p><pre><code>parameter type = char</code></pre><p>那么注释掉print(char arg)这个方法，会输出什么结果呢？</p><pre><code>parameter type = int</code></pre><p>那么注释掉print(int arg)这个方法，会输出什么结果呢？</p><pre><code>parameter type = long</code></pre><p>这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道’g’除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -&gt; int -&gt; long -&gt; double -&gt; float -&gt; Character -&gt; Serializable or Comparable -&gt; Object -&gt; char…(变长参数，即char元素数组)</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>变长参数的重载优先级最低</li><li>char到byte或short之间的转换是不安全的</li><li>在Serializable和Comparable同时存在的情况下会报异常：<br>  The method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，<br>  因为Character实现了Serializable和Comparable这两个接口，<br>  而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，<br>  提示类型模糊，无法正常编译）</li><li>接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配</li></ul><p>所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h4&gt;&lt;p&gt;Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；&lt;/p&gt;
&lt;h4 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h4&gt;&lt;p&gt;无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class OverloadPriority &amp;#123;

    public static void print(Object arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = Object&amp;quot;);
    &amp;#125;

    public static void print(int arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = int&amp;quot;);
    &amp;#125;

    public static void print(long arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = long&amp;quot;);
    &amp;#125;

    public static void print(double arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = double&amp;quot;);
    &amp;#125;

    public static void print(float arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = float&amp;quot;);
    &amp;#125;

    public static void print(char arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = char&amp;quot;);
    &amp;#125;

    public static void print(Character arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = Character&amp;quot;);
    &amp;#125;

    public static void print(char... arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = char...&amp;quot;);
    &amp;#125;

    public static void print(Serializable arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = Serializable&amp;quot;);
    &amp;#125;

    public static void print(Comparable&amp;lt;?&amp;gt; arg) &amp;#123;
        System.out.println(&amp;quot;parameter type = Comparable&amp;quot;);
    &amp;#125;

    public static void main(String[] args) &amp;#123;
        // int
        print(&amp;#39;g&amp;#39;);
    &amp;#125;

&amp;#125;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://goghtsui.github.io/categories/Java/"/>
    
    
    <category term="重载" scheme="https://goghtsui.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
    <category term="java" scheme="https://goghtsui.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Android之Log混淆</title>
    <link href="https://goghtsui.github.io/2015/11/18/Android%E4%B9%8BLog%E6%B7%B7%E6%B7%86/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/18/Android%E4%B9%8BLog%E6%B7%B7%E6%B7%86/undefined/</id>
    <published>2015-11-18T08:38:59.000Z</published>
    <updated>2021-01-26T02:34:57.570Z</updated>
    
    <content type="html"><![CDATA[<p>作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？</p><h3 id="日志形式"><a href="#日志形式" class="headerlink" title="日志形式"></a>日志形式</h3><ul><li><strong>Java形式</strong><pre><code>System.out.println(&quot; log for test &quot;);</code></pre>这个一般不提倡使用</li><li><strong>Android Log</strong><pre><code>Log.d(TAG, &quot; log for test &quot;);</code></pre>这个是Android标准的日志输出类：android.util.Log</li></ul><h3 id="TAG定义"><a href="#TAG定义" class="headerlink" title="TAG定义"></a>TAG定义</h3><p>关于TAG的命名简单说一下，基本上有以下几种形式：</p><ul><li><strong>人名</strong> <pre><code>Log.d(&quot;gogh&quot; &quot; log for test &quot;);</code></pre>与代码无关，无法定位日志的位置</li><li><strong>类名</strong><pre><code>private static final String TAG = LogUtils.class.getSimpleName();Log.d(TAG, &quot; log for test &quot;);</code></pre>经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。<a id="more"></a></li></ul><h3 id="TAG定义推荐"><a href="#TAG定义推荐" class="headerlink" title="TAG定义推荐"></a>TAG定义推荐</h3><p>那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：</p><pre><code>public class Utils &#123;    public static final String TAG = &quot;Utils&quot;;    public String setText(String text)&#123;        Logger.d(TAG, &quot; setText text = &quot; + text );        // do something    &#125;&#125;</code></pre><p>基本的规范是：</p><ul><li><strong>日志所在类</strong></li><li><strong>日志所在的方法</strong></li><li><strong>基本的信息</strong><br>这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。</li></ul><h3 id="屏蔽日志"><a href="#屏蔽日志" class="headerlink" title="屏蔽日志"></a>屏蔽日志</h3><p>我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。<br>#####运行时屏蔽<br>这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：</p><pre><code>public class Logger &#123;    private static final boolean ENABLE = &quot;true;    public static void d(String tag, String message)&#123;        if(ENABLE)&#123;            android.util.Log.d(tag, message);        &#125;    &#125;&#125;Logger.d(XXX, &quot;VERSION = &quot; + Build.VERSION.SDK_INT);</code></pre><p>编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。</p><h5 id="编译期屏蔽"><a href="#编译期屏蔽" class="headerlink" title="编译期屏蔽"></a>编译期屏蔽</h5><p>这个就很简单了，在打包发布的时候加入代码混淆，如下：</p><pre><code class="&#123;bash&#125;">-assumenosideeffects class com.gogh.Logger&#123;    public static *** i(...);&#125;</code></pre><p>但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：</p><pre><code class="&#123;bash&#125;">-assumenosideeffects class android.util.Log &#123;    public static *** v(...);    public static *** d(...);    public static *** i(...);    public static *** w(...);    public static *** e(...);&#125;</code></pre><p>这样就可以达到平日日志输出的效果了</p><h3 id="对比描述"><a href="#对比描述" class="headerlink" title="对比描述"></a>对比描述</h3><p>运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已</p><p>编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>理论上编译期屏蔽相对于运行期屏蔽更优</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？&lt;/p&gt;
&lt;h3 id=&quot;日志形式&quot;&gt;&lt;a href=&quot;#日志形式&quot; class=&quot;headerlink&quot; title=&quot;日志形式&quot;&gt;&lt;/a&gt;日志形式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java形式&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;System.out.println(&amp;quot; log for test &amp;quot;);&lt;/code&gt;&lt;/pre&gt;
这个一般不提倡使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Android Log&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;Log.d(TAG, &amp;quot; log for test &amp;quot;);&lt;/code&gt;&lt;/pre&gt;
这个是Android标准的日志输出类：android.util.Log&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;TAG定义&quot;&gt;&lt;a href=&quot;#TAG定义&quot; class=&quot;headerlink&quot; title=&quot;TAG定义&quot;&gt;&lt;/a&gt;TAG定义&lt;/h3&gt;&lt;p&gt;关于TAG的命名简单说一下，基本上有以下几种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;人名&lt;/strong&gt; &lt;pre&gt;&lt;code&gt;Log.d(&amp;quot;gogh&amp;quot; &amp;quot; log for test &amp;quot;);&lt;/code&gt;&lt;/pre&gt;
与代码无关，无法定位日志的位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类名&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;private static final String TAG = LogUtils.class.getSimpleName();
Log.d(TAG, &amp;quot; log for test &amp;quot;);&lt;/code&gt;&lt;/pre&gt;
经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Log" scheme="https://goghtsui.github.io/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>解决Android Studio中Terminal无法输入的问题</title>
    <link href="https://goghtsui.github.io/2015/11/16/%E8%A7%A3%E5%86%B3Android-Studio%E4%B8%ADTerminal%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/16/%E8%A7%A3%E5%86%B3Android-Studio%E4%B8%ADTerminal%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/undefined/</id>
    <published>2015-11-16T02:14:09.000Z</published>
    <updated>2021-01-26T02:34:57.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><pre><code>Windows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。</code></pre><h3 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h3><p>这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非<br>常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于<br>C:\Windows\System32\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导<br>致了这里描述的问题。</p><a id="more"></a><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>下面给出具体的操作步骤，有图有真相：</p><p>1、win+R组合键打开运行窗口，输入cmd ，点击OK</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/cmd.png" alt="cmd窗口"></p><p>2、在出现的cmd窗口中，右键点击标题栏-&gt;Properties，出现如下窗口：</p><p><img src="http://7xod2d.com1.z0.glb.clouddn.com/settings.png" alt="Properties窗口"></p><p>3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Windows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;问题原因：&quot;&gt;&lt;a href=&quot;#问题原因：&quot; class=&quot;headerlink&quot; title=&quot;问题原因：&quot;&gt;&lt;/a&gt;问题原因：&lt;/h3&gt;&lt;p&gt;这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非&lt;br&gt;常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于&lt;br&gt;C:\Windows\System32\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导&lt;br&gt;致了这里描述的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="Android Studio" scheme="https://goghtsui.github.io/tags/Android-Studio/"/>
    
    <category term="Terminal" scheme="https://goghtsui.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>Android之简单实现ButterKnife中的injectView的方案</title>
    <link href="https://goghtsui.github.io/2015/11/13/Android%E4%B9%8B%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0ButterKnife%E4%B8%AD%E7%9A%84injectView%E7%9A%84%E6%96%B9%E6%A1%88/undefined/"/>
    <id>https://goghtsui.github.io/2015/11/13/Android%E4%B9%8B%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0ButterKnife%E4%B8%AD%E7%9A%84injectView%E7%9A%84%E6%96%B9%E6%A1%88/undefined/</id>
    <published>2015-11-13T01:37:14.000Z</published>
    <updated>2021-01-26T02:34:57.573Z</updated>
    
    <content type="html"><![CDATA[<p>首先说这里面用的知识点，注解、反射。</p><p>Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。</p><h2 id="1、注解声明"><a href="#1、注解声明" class="headerlink" title="1、注解声明"></a>1、注解声明</h2><pre><code class="java">// 表示用在字段上@Target(ElementType.FIELD)// 表示在生命周期是运行时@Retention(RetentionPolicy.RUNTIME)//注解类，实现findViewById功能public @interface FindView &#123;    int findViewByResId() default 0;&#125;</code></pre><a id="more"></a><h2 id="2、反射注入"><a href="#2、反射注入" class="headerlink" title="2、反射注入"></a>2、反射注入</h2><pre><code class="java">Class&lt;?&gt; clazz = this.getClass();// 获得Activity中声明的字段Field[] fields = clazz.getDeclaredFields();//遍历所有字段for (Field field : fields) &#123;// 是否有我们自定义的注解类标志  if (field.isAnnotationPresent(FindView.class)) &#123;         FindView inject = field.getAnnotation(FindView.class);      int mId = inject.findViewByResId();      View view;      if (mId &gt; 0) &#123;          view = findViewById(mId);          field.setAccessible(true);          field.set(this, view);// 给我们要找的字段设置值      &#125;    &#125;&#125;</code></pre><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><pre><code class="java">@FindView(findViewByResId = R.id.id_text)private TextView mText;</code></pre><p>总结：<br>是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。<br>个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先说这里面用的知识点，注解、反射。&lt;/p&gt;
&lt;p&gt;Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。&lt;/p&gt;
&lt;h2 id=&quot;1、注解声明&quot;&gt;&lt;a href=&quot;#1、注解声明&quot; class=&quot;headerlink&quot; title=&quot;1、注解声明&quot;&gt;&lt;/a&gt;1、注解声明&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;
// 表示用在字段上
@Target(ElementType.FIELD)
// 表示在生命周期是运行时
@Retention(RetentionPolicy.RUNTIME)
//注解类，实现findViewById功能
public @interface FindView &amp;#123;
    int findViewByResId() default 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Android" scheme="https://goghtsui.github.io/categories/Android/"/>
    
    
    <category term="ButterKnife" scheme="https://goghtsui.github.io/tags/ButterKnife/"/>
    
    <category term="InjectView" scheme="https://goghtsui.github.io/tags/InjectView/"/>
    
    <category term="annotation" scheme="https://goghtsui.github.io/tags/annotation/"/>
    
  </entry>
  
</feed>
